@using BlazorServerApp1.Data
@using System.Data;

@page "/Halfwing"

@inject IJSRuntime Js

@implements IDisposable

@inject NavigationManager Navigator


@code
{
    [Parameter]
    public DoorConfig doorConfig { get; set; }

    //[Parameter]
    //public bool ExtdecorIsFull { get; set; }

	[Parameter]
    public Configurator4 config4 { get; set; }
}

@code {
    protected bool openMsgBox = false;
    private bool openYesNo = false;
    string errMsg2 = string.Empty;
    private string ErrMsgCssClass = "modal-body centeredMsg"; 
    string YNissue = string.Empty;
    private bool ansYes = false;
    int newLockDrilHeight = 0;
    private string msgCaption = "שגיאה";
    string msgClass = "modal-body centeredMsg";
    private string MsgTitleCssClass = string.Empty;
    string msgHeaderClass = "modal-header";
    string msgBorder1Style = string.Empty;

    private bool disableColor = true;
    private bool disableExtColor = true;
    private bool disableIntColor = true;

    #region hide variables
    // Halfwing acts actually like Movingwing because when it's launched there is no Movingwing
    //   it's also like Staticwing , i.e its fields are those of Staticwing.
    //   So we use here both hide* variables of Movingwing and Staticwing.

    // Movingwing.razor hide* variables
    bool hideColorsNum = false;
    bool hideDoorColor = false;
    bool hideExtColr = false;
    bool hideIntColor = false;
    bool hideCylinder = false;
    bool hideHw = false;
    bool hideHwColor = false;
    bool hideHwAccessory = false;
    bool hideHandle = false;
    bool hideHandleColor = false;

    // Staticwing.razor hide* variables
    bool hideCentralColWidth = false;
    bool hideCentralColClr = false;
    bool hideShalvaniaClr = false;
	bool hideSwingClr = false;
	bool hideSwingExtClr = false;
	bool hideSwingIntClr = false;
	bool hideSwingCyl = false;
	bool hideHW4ExtraWing = false;
	bool hideSwingHwAcc = false;
	bool hideSwingHwClr = false;
	bool hideSwingHandle = false;
	bool hideSwingHandleClr = false;

    #endregion hide variables

    string NoColor = "מגולוון";
    List<string> lstColorsNum1 = new List<string>();
    List<TRSH_COLOR_Class> lstColors1 = new List<TRSH_COLOR_Class>();

    private DataTable dtTabFlds = new DataTable();
    List<DRIL4HW_Class> lstD4HW1 = new List<DRIL4HW_Class>();
    List<CYLINDER_Class> lstCylinders1 = new List<CYLINDER_Class>();
    List<CYLHW_Class> lstCylHws1 = new List<CYLHW_Class>();
    List<TRSH_HARDWARE_Class> lstHws4Cyl = new List<TRSH_HARDWARE_Class>();

    protected override async Task OnInitializedAsync()
    {

        string errMsg = string.Empty;
        doorConfig.config4 = config4;
        doorConfig.currTabName = "staticwing";
        doorConfig.dtTabFlds = UiLogic.getTabFields("staticwing", doorConfig, ref errMsg);
        //lstCylinders1 = PrApiCalls.getCylindersByModelOpenMode(doorConfig, ref errMsg, true); // get also HALF Cylinders - 
        //   Here we are the only wing, OPENMODE is not set yet. This can be done ONLY after doorConfig.OPENMODE is set 

        setHiddens(doorConfig);

        if (UiLogic.tabPageIsFilled("staticwing", doorConfig))  // we came here back from a prev tab and actually the current tabPage is filled
                                                                // so we should disable all it's fields !
        {
            string errMsg2 = string.Empty;
            UiLogic.disableTabFlds(doorConfig, "staticwing");
            // disable "manually" fields that are actually registered in "movingwing" and are Enabled  here in HalfWing
            //  because movingwing was skipped .
            UiLogic.disableTabFlds(doorConfig, "movingwing");

           // restore the LOV for SWING_DRIL4HW !
            lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();
        }
        else // like movingwing we can be here only if we came from divDoorTitle, i.e. the page is empty. 
        {
            //calcCentralColClrID(doorConfig);   - can be called after INTCOLORID (and after OPENMODE )
            UiLogic.applySwingHasLock(doorConfig);
            doorConfig.CENTRALCOLWIDTH = (doorConfig.CENTRALCOLWIDTH == 0 ? 40 : doorConfig.CENTRALCOLWIDTH) ;  //06/07/2022 
                                                                                                               // doorConfig.disabledFlds["SWING_HANDLENAME"] = (doorConfig.TRSH_WINGSNUMDES == "כנף וחצי"); // 06/07/2022 
                                                                                                               //doorConfig.thClasses["HW4EXTRAWING"] = "thGray";   // 06/07/2022 
                                                                                                               //   07/07/2022 - Eli asked to make this field Mandatory
                                                                                                               //doorConfig.SWING_OPENSIDE = (doorConfig.OPENSIDE == "ימין" ? "שמאל" : "ימין");
           //populate the LOV of Dril4Hw in case it's empty 
           if (lstD4HW1.Count == 0 && doorConfig.HW4EXTRAWING != 0 )
				lstD4HW1 = PrApiCalls.getDril4Hw1(doorConfig.HW4EXTRAWING, ref errMsg);

			if (hideHW4ExtraWing && lstD4HW1.Count == 0)
			    lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();

            doorConfig.LOGO = (doorConfig.useLOGO ? "Y" : string.Empty);  // new 11/07/2022 , in case we didn't open movingwing (WINGSNUMDES == Half Wing ) we set LOGO here.
                                                                          //  in case both WINGSNUMDES has more than one wing LOGO is always the same on both wings - see doc from 22/06/2022 !
                                                                          //  that doc also states the the LOGO field in the staticwing is always disabled !
                                                                          //  11.	"לוגו" יועתק מהכנף הנעה ולא ניתן יהיה לשינוי.
                                                                          //doorConfig.TURBOAPPARATUS = (doorConfig.useLOGO ? "Y" : string.Empty);   // new 11/07/2022 
            doorConfig.SWING_TURBO = (doorConfig.useLOGO ? "Y" : string.Empty);   // new 11/07/2022 
            doorConfig.disabledFlds["LOGO"] = true;
            doorConfig.disabledFlds["CENTRALCOLCLRID"] = true;
        }

        doorConfig.thClasses["SWING_TURBO"] = "thGray";
        lstColorsNum1 =  PrApiCalls.lstColorsNum.ToList<string>();

        // copied from movingwing ! 14/07/2022 
        lstColors1 = PrApiCalls.lstColors.ToList<TRSH_COLOR_Class>();
        if (doorConfig.TRSH_MODELNAME == "MLI")
        {
            lstColorsNum1.Remove("מגולוון");
            TRSH_COLOR_Class megulvan = lstColors1.Find(x => x.TRSH_COLORID == PrApiCalls.MEGULVAN_ID); 
            lstColors1.Remove(megulvan);
        }

        doorConfig.borderColors["DOORHEIGHT"] = (doorConfig.DOORHEIGHT != 0 ? "blueBorder" : "redBorder");
    }

    void setHiddens(DoorConfig doorConfig)
	{
        //Movingwing
        hideColorsNum = UiLogic.hideFld(doorConfig, "ColorsNum");
        hideDoorColor = UiLogic.hideFld(doorConfig, "DoorColor");
        hideExtColr = UiLogic.hideFld(doorConfig, "ExtColor");
        hideIntColor = UiLogic.hideFld(doorConfig, "IntColor");
        hideCylinder = UiLogic.hideFld(doorConfig, "Cylinder");
        hideHw = UiLogic.hideFld(doorConfig, "Hw");
        hideHwAccessory = UiLogic.hideFld(doorConfig, "HWACCESSORYID");
        hideHwColor = UiLogic.hideFld(doorConfig, "HwColor");
        hideHandle = UiLogic.hideFld(doorConfig, "Handle");
        hideHandleColor = UiLogic.hideFld(doorConfig, "HandleColorID");

        doorConfig.thClasses["COLORSNUM"] = (hideColorsNum ? "thGray" : "thBlue");
        doorConfig.thClasses["DOORCOLORID"] = (hideDoorColor ? "thGray" : "thBlue");
        doorConfig.thClasses["EXTCOLORID"] = (hideExtColr ? "thGray" : "thBlue");
        doorConfig.thClasses["INTCOLORID"] = (hideIntColor ? "thGray" : "thBlue");
        doorConfig.thClasses["TRSH_CYLINDER"] = (hideCylinder ? "thGray" : "thBlue");
        doorConfig.thClasses["TRSH_HARDWARE"] = (hideHw ? "thGray" : "thBlue");
        doorConfig.thClasses["HWACCESSORYID"] = (hideHwAccessory ? "thGray" : "thBlue");
        doorConfig.thClasses["HWCOLORID"] = (hideHwColor ? "thGray" : "thBlue");
        doorConfig.thClasses["HANDLENAME"] = (hideHandle ? "thGray" : "thBlue");
        doorConfig.thClasses["HANDLECOLORID"] = (hideHandleColor ? "thGray" : "thBlue");
                        
        doorConfig.disabledFlds["COLORSNUM"] = hideColorsNum;
        doorConfig.disabledFlds["DOORCOLORID"] = hideDoorColor;
        doorConfig.disabledFlds["EXTCOLORID"] = hideExtColr;
        doorConfig.disabledFlds["INTCOLORID"] = hideIntColor;
        doorConfig.disabledFlds["TRSH_CYLINDER"] = hideCylinder;
        doorConfig.disabledFlds["TRSH_HARDWARE"] = hideHw;
        doorConfig.disabledFlds["HWACCESSORYID"] = hideHwAccessory;
        doorConfig.disabledFlds["HWCOLORID"] = hideHwColor;
        doorConfig.disabledFlds["HANDLENAME"] = hideHandle;
        doorConfig.disabledFlds["HANDLECOLORID"] = hideHandleColor;

        //Staticwing

        hideCentralColWidth = UiLogic.hideFld(doorConfig, "thCentralColWidth");
		hideCentralColClr = UiLogic.hideFld(doorConfig,"CentralColClrID");
        hideShalvaniaClr = UiLogic.hideFld(doorConfig, "ShalvaniaClrID");
		hideSwingClr = UiLogic.hideFld(doorConfig,"SwingColorID");
		hideSwingExtClr = UiLogic.hideFld(doorConfig,"SwingExtColorID");
		hideSwingIntClr = UiLogic.hideFld(doorConfig,"SwingIntColorID");
		hideSwingCyl = UiLogic.hideFld(doorConfig,"Cylinder4HalfWing");
		hideHW4ExtraWing = UiLogic.hideFld(doorConfig,"thHW4ExtraWing");
		hideSwingHwAcc = UiLogic.hideFld(doorConfig,"SWING_HWACCESSORYID");
		hideSwingHwClr = UiLogic.hideFld(doorConfig,"SWING_HWCOLORID");
		hideSwingHandle = UiLogic.hideFld(doorConfig,"SWING_HANDLENAME");
		hideSwingHandleClr = UiLogic.hideFld(doorConfig,"SWING_HANDLECOLORID");
        
        doorConfig.thClasses["CENTRALCOLWIDTH"] = (hideCentralColWidth ? "thGray" : "thBlue");
		doorConfig.thClasses["CENTRALCOLCLRID"] = (hideCentralColClr ? "thGray" : "thBlue");
        doorConfig.thClasses["SHALVANIACLRID"] = (hideShalvaniaClr ? "thGray" : "thBlue");
		doorConfig.thClasses["DOORCOLORID"] = (hideSwingClr ? "thGray" : "thBlue");
		doorConfig.thClasses["EXTCOLORID"] = (hideSwingExtClr ? "thGray" : "thBlue");
		doorConfig.thClasses["INTCOLORID"] = (hideSwingIntClr ? "thGray" : "thBlue");
		doorConfig.thClasses["TRSH_SWING_CYLINDER"] = (hideSwingCyl ? "thGray" : "thBlue");
		doorConfig.thClasses["HW4EXTRAWING"] = (hideHW4ExtraWing ? "thGray" : "thBlue");
		doorConfig.thClasses["SWING_HWACCESSORYID"] = (hideSwingHwAcc ? "thGray" : "thBlue");
		doorConfig.thClasses["SWING_HWCOLORID"] = (hideSwingHwClr ? "thGray" : "thBlue");
		doorConfig.thClasses["SWING_HANDLENAME"] = (hideSwingHandle ? "thGray" : "thBlue");
		doorConfig.thClasses["SWING_HANDLECOLORID"] = (hideSwingHandleClr ? "thGray" : "thBlue");

		doorConfig.disabledFlds["CENTRALCOLCLRID"] = hideCentralColClr;
        doorConfig.disabledFlds["SHALVANIACLRID"] = hideShalvaniaClr;
		doorConfig.disabledFlds["DOORCOLORID"] = hideSwingClr;
		doorConfig.disabledFlds["EXTCOLORID"] = hideSwingExtClr;
		doorConfig.disabledFlds["INTCOLORID"] = hideSwingIntClr;
		doorConfig.disabledFlds["TRSH_SWING_CYLINDER"] = hideSwingCyl;
		doorConfig.disabledFlds["HW4EXTRAWING"] = hideHW4ExtraWing;
		doorConfig.disabledFlds["SWING_HWACCESSORYID"] = hideSwingHwAcc;
		doorConfig.disabledFlds["SWING_HWCOLORID"] = hideSwingHwClr;
		doorConfig.disabledFlds["SWING_HANDLENAME"] = hideSwingHandle;
		doorConfig.disabledFlds["SWING_HANDLECOLORID"] = hideSwingHandleClr;

	}


    protected override async void OnAfterRender(bool firstRender)
    {
        applyColorsNum();
    }
    protected void applyColorsNum()
    {
        if (doorConfig != null)
        {
            if (doorConfig.COLORSNUM == null)
                 doorConfig.COLORSNUM = "";

            switch ( doorConfig.COLORSNUM.Trim())
            {
                case "":
                    doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = true;
                    doorConfig.DOORCOLORID = doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                    this.StateHasChanged();
                    break;
                case "מגולוון":
                    doorConfig.DOORCOLORID = PrApiCalls.MEGULVAN_ID;   // 22/06/2022
                    //disableColor = disableExtColor = disableIntColor = true;
                    doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = true;
                    doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                    this.StateHasChanged();
                    //doorConfig.INTCOLORDES = string.Empty;
                    break;
                case "1":
                    //disableColor = false;
                    doorConfig.disabledFlds["DOORCOLORID"] = false;
                    doorConfig.borderColors["DOORCOLORID"] = (doorConfig.DOORCOLORID != 0 ? "blueBorder" : "redBorder");

                    //disableExtColor = true;
                    doorConfig.disabledFlds["EXTCOLORID"] = true;
                    //doorConfig.hideBtns["EXTCOLORID"] = true;  not used yet

                    //disableIntColor = true;
                    doorConfig.disabledFlds["INTCOLORID"] = true;
                    //doorConfig.hideBtns["INTCOLORID"] = true;  not used yet

                    doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                    //doorConfig.INTCOLORDES = string.Empty;
                    break;
                case "2":
                    //disableColor = true;
                    doorConfig.disabledFlds["DOORCOLORID"] = true;
                    //disableExtColor = disableIntColor = false;
                    doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = false;
                    doorConfig.borderColors["EXTCOLORID"] = (doorConfig.EXTCOLORID != 0 ? "blueBorder" : "redBorder");
                    doorConfig.borderColors["INTCOLORID"] = (doorConfig.INTCOLORID != 0 ? "blueBorder" : "redBorder");
                    //doorConfig.hideBtns["EXTCOLORID"] = doorConfig.hideBtns["INTCOLORID"] = false;  not used yet
                    doorConfig.DOORCOLORID = 0;
                    break;
            }
            //doorConfig.borderColors["COLORSNUM"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder"); // it's not mandatory !
            //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
        }
     }

    void calcCentralColClrID(DoorConfig doorConfig)
    {
        switch (doorConfig.COLORSNUM)
        {
            case "מגולוון" :
            case "1":
                doorConfig.CENTRALCOLCLRID = doorConfig.DOORCOLORID;
                doorConfig.SHALVANIACLRID = 0; //Eli 31/10/2022   //doorConfig.DOORCOLORID;
				doorConfig.disabledFlds["SHALVANIACLRID"] = true;  //Eli 31/10/2022
                break;
            case "2":
                doorConfig.CENTRALCOLCLRID = (doorConfig.OPENMODE == "פנימה" ? doorConfig.INTCOLORID : doorConfig.EXTCOLORID);
                doorConfig.SHALVANIACLRID  = (doorConfig.OPENMODE == "פנימה" ? doorConfig.EXTCOLORID : doorConfig.INTCOLORID);
                break;
        }
    }
    protected void clearHingesMeasures(DoorConfig doorConfig)
    {
        doorConfig.HINGESNUM = 0;
        doorConfig.BACKPINHEIGHT = 0;
        doorConfig.HINGE1HEIGHT = 0;
        doorConfig.HINGE2HEIGHT = 0;
        doorConfig.HINGE3HEIGHT = 0;
        doorConfig.HINGE4HEIGHT = 0;
        doorConfig.HINGE5HEIGHT = 0;
    }
    async void IDisposable.Dispose()
    { }

    void setLockDrilHeight()
    {
        doorConfig.LOCKDRILHEIGHT = (_LockDrilHeight != null ? (int)_LockDrilHeight : 0);
        doorConfig.BACKPINHEIGHT = (doorConfig.LOCKDRILHEIGHT > 0 ? doorConfig.LOCKDRILHEIGHT + 55 : 0);  //Eli 26/12/2022
        doorConfig.borderColors["LOCKDRILHEIGHT"] = (doorConfig.INTCOLORID != 0 ? "blueBorder" : "redBorder");
        if (UiLogic.try2UpdateBtnClass(doorConfig, "movingwing"))
            config4.RefreshState();
    }

    }
<br />
<table>
    <tr>
        <td>
            <div class="tabPageTitle">
                <h1 class="rightLeftMargin">חצי כנף קבועה</h1>
            </div>
        </td>
    </tr>
</table>
<table id="staticWingL1">
        <tr>
			<th>נעילה</th>
            <th id="thExtraWingWidth">רוחב כנף</th>
			<th>גובה כנף</th>
		     	                                                   
			<th id="thCentralColWidth" class= "@doorConfig.thClasses["CENTRALCOLWIDTH"]" >רוחב עמוד מרכזי</th>
			 
			 <th>פתיחה</th>
			<th id="thOpenDirection" >צד פתיחה</th>
			<th id="thColorsNum" class = "@doorConfig.thClasses["COLORSNUM"]">מספר גוונים</th>
		 </tr>
		 
		 <tr>
		 <td>
		 @{  int i601 = Array.IndexOf(UiLogic.propNames, "SWINGHASLOCK");
				 	<input type="checkbox" name="chkbSwingHasLock" @bind="SwingHasLock"  
				      disabled="@doorConfig.disabledFlds["SWINGHASLOCK"]"
					   	@onfocus="@( () => UiLogic.HasFocus("SWINGHASLOCK", doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i601]]"  
				/>
			}
            @code
			{
				protected bool _SwingHasLock;
				protected bool SwingHasLock
				{
					get
					{
						if (doorConfig != null)
						{
							_SwingHasLock = (doorConfig.SWINGHASLOCK == "Y");
						}
						return _SwingHasLock;
					}
					set
					{
						_SwingHasLock = value;
						if (doorConfig != null)
						{
							doorConfig.SWINGHASLOCK = (_SwingHasLock ? "Y" : string.Empty);
							UiLogic.applySwingHasLock(doorConfig);
							//UiLogic.clearFollowingTabFields(doorConfig, "staticgwing");
                        }
                    }
                }
            }
			</td>

			<td id="tdExtraWingWidth">
				 @{  int i602 = Array.IndexOf(UiLogic.propNames, "EXTRAWINGWIDTH");
					<input type="number"  name="txtExtraWingWidth" @bind="ExtraWingWidth" class= "@doorConfig.borderColors["EXTRAWINGWIDTH"]" 
				    disabled="@doorConfig.disabledFlds["EXTRAWINGWIDTH"]"
				   	@onfocus="@( () => UiLogic.HasFocus("EXTRAWINGWIDTH", doorConfig) )" 
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i602]]"  
					/>
				}
           	@code
			{
				protected int? _ExtraWingWidth = 0;
				protected int? ExtraWingWidth
				{
					get
					{
						if (doorConfig != null && doorConfig.EXTRAWINGWIDTH > 0)
						{
							_ExtraWingWidth = doorConfig.EXTRAWINGWIDTH;
						}
						else
							_ExtraWingWidth = null;

						return _ExtraWingWidth;
					}
					set
					{
						_ExtraWingWidth = value;
						if (doorConfig != null)
						{
							doorConfig.EXTRAWINGWIDTH = (_ExtraWingWidth != null ? (int)_ExtraWingWidth : 0);
							doorConfig.borderColors["EXTRAWINGWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							//UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
						}
					}
				}
			}
			</td>
			@* doorHeight copied from Movingwing.razor   *@

			<td id="tdDoorHeight" hidden="@UiLogic.hideFld(doorConfig, "DoorHeight")">
            @{
                 int i302 = Array.IndexOf(UiLogic.propNames, "DOORHEIGHT");

                           <input name="txtDoorHeight" type="number" @bind="DoorHeight" class="@doorConfig.borderColors["DOORHEIGHT"]" 
                               disabled="@doorConfig.disabledFlds["DOORHEIGHT"]"
                                  @onfocus="@( () => UiLogic.HasFocus("DOORHEIGHT", doorConfig) )" 
                                   @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                               @onkeypress="doorConfig.KeyPressHandler"
                                  @ref="doorConfig.dicRefs[UiLogic.propNames[i302]]" />  
           }
            @code
            {
                protected int? _DoorHeight;
                protected int? DoorHeight
                {
                    get
                    {
                        if (doorConfig != null && doorConfig.DOORHEIGHT > 0)
                        {
                            _DoorHeight = doorConfig.DOORHEIGHT;
                        }
                        else
                            _DoorHeight = null;

                        return _DoorHeight; //_DoorHeight.ToString();
                    }
                    set
                    {
                        _DoorHeight = value;

                        if (doorConfig != null)
                        {
                            doorConfig.DOORHEIGHT = (_DoorHeight != null ? (int)_DoorHeight : 0);
                            //[TODO] implement the following lines
                            //if (chkbComplient.Checked)
                            //     txtWindowWidth.Text = calcWindowWidth();
                            if (!string.IsNullOrEmpty(doorConfig.PARTNAME) && doorConfig.TRSH_COMPLIENT == PrApiCalls.ELIDOOR_COMPLIENT)
                            {
                                errMsg2 = string.Empty;
                                UiLogic.setHingesAndWindowsData(doorConfig, ref errMsg2);
                                if (doorConfig.WINDOWHEIGHT == 0 && !string.IsNullOrEmpty(errMsg2))
                                {
                                    value = _DoorHeight = doorConfig.DOORHEIGHT = 0;
                                    openMsgBox = true;
                                    doorConfig.borderColors["DOORHEIGHT"] = "redBorder";
                                    this.StateHasChanged(); 
                                }
                                else
                                {
                                    doorConfig.borderColors["LOCKDRILHEIGHT"] = (doorConfig.LOCKDRILHEIGHT != 0 ? "blueBorder" : "redBorder");  //update borderColor
                                                                             // of dlstLOCKDRILHEIGHT if its value was changed after DoorHeight was processsed
                                    this.StateHasChanged();
                                }
                            }
                            doorConfig.borderColors["DOORHEIGHT"] = (value != 0 ? "blueBorder" : "redBorder");
                           @*
                               The following code lines are actually inside setHingesAndWindowsData

                            errMsg2 = string.Empty;
                            doorConfig.WINDOWHEIGHT = calcWindowHeight(doorConfig, ref errMsg2);
                            if (doorConfig.WINDOWHEIGHT == 0 && !string.IsNullOrEmpty(errMsg2))
                            {
                                errMsg3 = errMsg2;
                                openMsgBox = true;
                            }
                            *@
                            if (doorConfig.DOORHEIGHT > 0)
                            {
                                UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                config4.RefreshState();
                            }
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
        </td>
		    <td id="tdCentralColWidth" >
				 @{  int i603 = Array.IndexOf(UiLogic.propNames, "CENTRALCOLWIDTH");
						<select name="dlstCentralColWidth" @bind="CentralColWidth" class= "@doorConfig.borderColors["CENTRALCOLWIDTH"]" 
					   disabled="@doorConfig.disabledFlds["CENTRALCOLWIDTH"]"
					  	@onfocus="@( () => UiLogic.HasFocus("CENTRALCOLWIDTH", doorConfig) )" 
					  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i603]]"  
						>
							<option>0</option>
							<option>30</option>
							<option>40</option>
						</select>
					}
				</td>
			
			@code
			{
				protected int? _CentralColWidth = 40;
				protected int? CentralColWidth
				{
					get
					{
						if (doorConfig != null)
						{
							_CentralColWidth = doorConfig.CENTRALCOLWIDTH;
						}
						return _CentralColWidth;
					}
					set
					{
						_CentralColWidth = value;
						if (doorConfig != null)
						{
							doorConfig.CENTRALCOLWIDTH = (_CentralColWidth != null ? (int)_CentralColWidth : 0);
							doorConfig.borderColors["CENTRALCOLWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							//UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                  config4.RefreshState();
							
						}
					}
				}
			}

            <td id="tdOpenMode">
             @{  int i304 = Array.IndexOf(UiLogic.propNames, "OPENMODE");
                            <select name="dlstOpenMode" @bind="openMode" class="@doorConfig.borderColors["OPENMODE"]"
                          disabled="@doorConfig.disabledFlds["OPENMODE"]"
                              @onfocus="@( () => UiLogic.HasFocus("OPENMODE", doorConfig) )" 
                               @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                           @onkeypress="doorConfig.KeyPressHandler" 
                                    @ref="doorConfig.dicRefs[UiLogic.propNames[i304]]" >
                                <option></option>
                                <option>פנימה</option>
                                <option>החוצה</option>
                            </select>
            }
            @code
            {
                protected string _openMode ;
                protected string openMode
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openMode = doorConfig.OPENMODE;
                        }
                        return _openMode;
                    }
                    set
                    {
                        _openMode = value;
                        if (doorConfig != null)
                        {
                            doorConfig.OPENMODE = _openMode;
                            doorConfig.borderColors["OPENMODE"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            lstCylinders1 = PrApiCalls.getCylindersByModelOpenMode(doorConfig, ref errMsg2);
                            
                            //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
        </td>

			<td id="tdOpenSide" hidden="@UiLogic.hideFld(doorConfig, "OpenSide")">
             @{  int i303 = Array.IndexOf(UiLogic.propNames, "OPENSIDE");
                            <select name="dlstOpenSide" @bind="openSide" 
                         disabled="@doorConfig.disabledFlds["OPENSIDE"]"
                    class="@doorConfig.borderColors["OPENSIDE"]"
                                     @onfocus="@( () => UiLogic.HasFocus("OPENSIDE", doorConfig) )" 
                                     @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                 @onkeypress="doorConfig.KeyPressHandler" 
                                    @ref="doorConfig.dicRefs[UiLogic.propNames[i303]]"  >
                                <option> </option>
                                <option>ימין</option>
                                <option>שמאל</option>
                            </select>
            }
            @code
            {
                protected string _openSide;
                protected string openSide
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openSide = doorConfig.OPENSIDE;
                        }
                        return _openSide;
                    }
                    set
                    {
                        _openSide = value;
                        if (doorConfig != null)
                        {
                            doorConfig.OPENSIDE = _openSide;
                            doorConfig.borderColors["OPENSIDE"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }

            }
        </td>
       
        

        <td id="tdColorsNum" >
             @{  int i305 = Array.IndexOf(UiLogic.propNames, "COLORSNUM");
                            <select name="dlstColorsNum"  @bind="ColorsNum"  class="@doorConfig.borderColors["COLORSNUM"]"
                             disabled="@doorConfig.disabledFlds["COLORSNUM"]"
                                 @onfocus="@( () => UiLogic.HasFocus("COLORSNUM", doorConfig) )" 
                                 @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                             @onkeypress="doorConfig.KeyPressHandler" 
                                 @ref="doorConfig.dicRefs[UiLogic.propNames[i305]]"  >
                                 
                                 @foreach (string cn in lstColorsNum1)
                                 {
                                    <option value="@cn">@cn</option>
                                 }
                            </select>
            }

            @code
            {
                protected string _ColorsNum ;
                protected string ColorsNum
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _ColorsNum = doorConfig.COLORSNUM;
                        }
                        return _ColorsNum;
                    }
                    set
                    {
                        _ColorsNum = value;
                        if (doorConfig != null)
                        {
                            doorConfig.COLORSNUM = _ColorsNum;
                            applyColorsNum();
                            @*    switch (_ColorsNum.Trim())
                            {
                                case "":
                                    doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = true;
                                    doorConfig.DOORCOLORID = doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                                    this.StateHasChanged();
                                    break;
                                case "מגולוון":
                                    doorConfig.DOORCOLORID = PrApiCalls.MEGULVAN_ID;   // 22/06/2022
                                    //disableColor = disableExtColor = disableIntColor = true;
                                    doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = true;
                                    doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                                    this.StateHasChanged();
                                    //doorConfig.INTCOLORDES = string.Empty;
                                    break;
                                case "1":
                                    //disableColor = false;
                                    doorConfig.disabledFlds["DOORCOLORID"] = false;
                                    doorConfig.borderColors["DOORCOLORID"] = (doorConfig.DOORCOLORID != 0 ? "blueBorder" : "redBorder");

                                    //disableExtColor = true;
                                    doorConfig.disabledFlds["EXTCOLORID"] = true;
                                    //doorConfig.hideBtns["EXTCOLORID"] = true;  not used yet

                                    //disableIntColor = true;
                                    doorConfig.disabledFlds["INTCOLORID"] = true;
                                    //doorConfig.hideBtns["INTCOLORID"] = true;  not used yet

                                    doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                                    //doorConfig.INTCOLORDES = string.Empty;
                                    break;
                                case "2":
                                    //disableColor = true;
                                    doorConfig.disabledFlds["DOORCOLORID"] = true;
                                    //disableExtColor = disableIntColor = false;
                                    doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = false;
                                    doorConfig.borderColors["EXTCOLORID"] = (doorConfig.EXTCOLORID != 0 ? "blueBorder" : "redBorder");
                                    doorConfig.borderColors["INTCOLORID"] = (doorConfig.INTCOLORID != 0 ? "blueBorder" : "redBorder");
                                    //doorConfig.hideBtns["EXTCOLORID"] = doorConfig.hideBtns["INTCOLORID"] = false;  not used yet
                                    doorConfig.DOORCOLORID = 0;
                                    break;
                            }
                            //doorConfig.borderColors["COLORSNUM"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder"); // it's not mandatory !
                            //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");*@
                        }
                    }
                }

            }
        </td>


			</tr>
             @* end of StaticwingL1 *@
			</table>

            <table id="staticWingL2">
            <tr>
		    <th class="@doorConfig.thClasses["DOORCOLORID"]" >גוון כנף קבועה</th>
			<th class="@doorConfig.thClasses["EXTCOLORID"]">גוון חוץ כנף קבועה</th>
			<th class="@doorConfig.thClasses["INTCOLORID"]">גוון פנים כנף קבועה</th>
            <th id="thCentralColClrID" class="@doorConfig.thClasses["CENTRALCOLCLRID"]">גוון עמוד מרכזי</th>
            <th class= "@doorConfig.thClasses["SHALVANIACLRID"]">גוון שלווניה</th>
            <th class="@doorConfig.thClasses["LOCKDRILHEIGHT"]" >גובה ניקוב</th>

            <th id="thCylinder4HalfWing" class= "@doorConfig.thClasses["TRSH_SWING_CYLINDER"]" >צילינדר כנף קבועה</th>
			<th id="thHW4ExtraWing" class="@doorConfig.thClasses["HW4EXTRAWING"]">פירזול כנף קבועה</th>
			
			<th class="@doorConfig.thClasses["SWING_HWACCESSORYID"]" >נילווים לפירזול כ. ק.</th>
			<th class="@doorConfig.thClasses["SWING_HWCOLORID"]">צבע פירזול</th>

            </tr>
            <tr>
              <td id="tdDoorColor">
              @{  int i306 = Array.IndexOf(UiLogic.propNames, "DOORCOLORID");
                        <select name="dlstDoorColor" @bind="DoorColorId" class="@doorConfig.borderColors["DOORCOLORID"]" 
                          disabled="@doorConfig.disabledFlds["DOORCOLORID"]"  
                              @onfocus="@( () => UiLogic.HasFocus("DOORCOLORID", doorConfig) )" 
                              @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                          @onkeypress="doorConfig.KeyPressHandler" 
                                 @ref="doorConfig.dicRefs[UiLogic.propNames[i306]]" >
                            @if (PrApiCalls.lstColors != null)
                            {
                                            @foreach (TRSH_COLOR_Class c in lstColors1)
                                {
                                                <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                                }
                            }
                        </select>
            }
        @code
        {

            protected int _DoorColorId;
            protected int DoorColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _DoorColorId = doorConfig.DOORCOLORID;
                    }
                    return _DoorColorId;
                }
                set
                {
                    _DoorColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.DOORCOLORID = _DoorColorId;
                        doorConfig.borderColors["DOORCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");
                        calcCentralColClrID(doorConfig);
                        //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                    }
                }
            }
        }
        </td>
        <td id="tdExtColor" >
             @{  int i307 = Array.IndexOf(UiLogic.propNames, "EXTCOLORID");
                    <select name="dlstExtColor" @bind="ExtColor" class="@doorConfig.borderColors["EXTCOLORID"]"
                    disabled="@doorConfig.disabledFlds["EXTCOLORID"]"  
                        @onfocus="@( () => UiLogic.HasFocus("EXTCOLORID", doorConfig) )" 
                        @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
                                 @ref="doorConfig.dicRefs[UiLogic.propNames[i307]]" >
                        @if (PrApiCalls.lstColors != null)
                        {
                            @foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
                            {
                                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                            }
                        }
                    </select>
            }
            @code
            {
                protected int _ExtColor;
                protected int ExtColor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _ExtColor = doorConfig.EXTCOLORID;
                        }
                        return _ExtColor;
                    }
                    set
                    {
                        _ExtColor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.EXTCOLORID = _ExtColor;
                            doorConfig.borderColors["EXTCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");
                            compareExtIntColors();
                            calcCentralColClrID(doorConfig);
                            //UiLogic.clearFollowingTabFields(doorConfig, "extdecor");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
                protected void compareExtIntColors()
                {
                    if (doorConfig.COLORSNUM == "2" && doorConfig.EXTCOLORID != 0 && doorConfig.INTCOLORID != 0
                         && doorConfig.EXTCOLORID == doorConfig.INTCOLORID)
                    {
                        errMsg2 = "בחרת 2 גוונים: גוון החוץ וגוון הפנים חייבים להיות שונים";
                        openMsgBox = true;
                        //txtDoorHeight.FocusAsync();
                        doorConfig.borderColors["EXTCOLORID"] = doorConfig.borderColors["INTCOLORID"] = "redBorder";
                        this.StateHasChanged();
                        switch (doorConfig.currPropName)
                        {
                            case "EXTCOLORID" :
                                doorConfig.EXTCOLORID = 0;
                                break;
                            case "INTCOLORID" :
                                doorConfig.INTCOLORID = 0;
                                break;
                        }
                    }
                    //else
                    {
                        doorConfig.borderColors["EXTCOLORID"] = (doorConfig.EXTCOLORID != 0 ? "blueBorder" : "redBorder");
                        doorConfig.borderColors["INTCOLORID"] = (doorConfig.INTCOLORID != 0 ? "blueBorder" : "redBorder");
                        this.StateHasChanged(); 
                    }
                }
            }
        </td>   
            <td id="tdIntColor" >
             @{  int i308 = Array.IndexOf(UiLogic.propNames, "INTCOLORID");
                    <select name="dlstIntColor" @bind="IntColor" class="@doorConfig.borderColors["INTCOLORID"]"
                    disabled="@doorConfig.disabledFlds["INTCOLORID"]"  
                        @onfocus="@( () => UiLogic.HasFocus("INTCOLORID", doorConfig) )" 
                        @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                    @onkeypress="doorConfig.KeyPressHandler" 
                                 @ref="doorConfig.dicRefs[UiLogic.propNames[i308]]" >
                        @if (PrApiCalls.lstColors != null)
                        {
                            @foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
                            {
                                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                            }
                        }
                    </select>
            }
            @code
            {
                protected int _IntColor;
                protected int IntColor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _IntColor = doorConfig.INTCOLORID;
                        }
                        return _IntColor;
                    }
                    set
                    {
                        _IntColor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.INTCOLORID = _IntColor;
                            doorConfig.borderColors["INTCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");
                            compareExtIntColors();
                            calcCentralColClrID(doorConfig);
                            //UiLogic.clearFollowingTabFields(doorConfig, "intdecor");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
        </td>

        <td id="tdCentralColClrID" >

                <input name="dlstCentralColClrID" @bind="CentralColClrDes" class= "@doorConfig.borderColors["CENTRALCOLCLRID"]"  
				   disabled="@doorConfig.disabledFlds["CENTRALCOLCLRID"]"
				/>
                    
                
            </td>
            @code
            {
	            protected int _CentralColClrID = 0;
				protected string _CentralColClrDes = string.Empty;
	            protected string CentralColClrDes
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _CentralColClrID = doorConfig.CENTRALCOLCLRID;
			            }
			            return PrApiCalls.getColorDes(_CentralColClrID);
		            }
		            set
		            {
			            _CentralColClrDes = value;
                        if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
		            }
	            }
            }

            @* Shalvania Color - dual to CentalCol Color*@
			<td id="tdShalvaniaClrID" >
                <input name="dlstShalvaniaClrID" @bind="ShalvaniaClrDes" class= "@doorConfig.borderColors["SHALVANIACLRID"]"  
				   disabled="@doorConfig.disabledFlds["SHALVANIACLRID"]"
				/>
                
            </td>
            @code
            {
	            protected int _ShalvaniaClrID = 0;
				protected string _ShalvaniaClrDes = string.Empty;
	            protected string ShalvaniaClrDes
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _ShalvaniaClrID = doorConfig.SHALVANIACLRID;
			            }
			            return PrApiCalls.getColorDes(_ShalvaniaClrID);
		            }
		            set
		            {
			            _ShalvaniaClrDes = value;
						if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                       config4.RefreshState();
		            }
	            }
            }

            @*  copied from Movingwing.razor *@
            <td id="tdLockDrilHeight" >
             @{  int i309 = Array.IndexOf(UiLogic.propNames, "LOCKDRILHEIGHT");
                     <input list="lstLockDrilHeight" name="txtLockDrilHeight" type="number" @bind="LockDrilHeight" class="@doorConfig.borderColors["LOCKDRILHEIGHT"]" 
                        disabled="@doorConfig.disabledFlds["LOCKDRILHEIGHT"]"
                            @onfocus="@( () => UiLogic.HasFocus("LOCKDRILHEIGHT", doorConfig) )" 
                            @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                            @onkeypress="doorConfig.KeyPressHandler" 
                            @ref="doorConfig.dicRefs[UiLogic.propNames[i309]]"
                     />  
                     <datalist id="lstLockDrilHeight" >
                       @if (PrApiCalls.lstLock_Hinge_Dril_Heights != null)
                        {
                            List<TRSH_LOCKHINGE_DRILH_Class> lstLockDH1 = PrApiCalls.getLockHingeDrilHeights1(doorConfig);
                            @foreach (TRSH_LOCKHINGE_DRILH_Class lockDH in lstLockDH1)
                            {
                                <option value="@lockDH.LOCKDRILHEIGHT" >@lockDH.LOCKDRILHEIGHT</option>
                            }
                        }
                    </datalist>
             }
       @* <InputText name="txtLockDrilHeight" type="number" @bind-Value="LockDrilHeight" class="@doorConfig.borderColors["LOCKDRILHEIGHT"]"
              style="outline:none" onkeypress="return event.keyCode!=13"/>
       *@
                    
        @code
            {
                        protected int? _LockDrilHeight;
                protected int? LockDrilHeight
                {
                    get
                    {
                        if (doorConfig != null && doorConfig.LOCKDRILHEIGHT > 0)
                        {
                            _LockDrilHeight = doorConfig.LOCKDRILHEIGHT;
                        }
                        else
                            _LockDrilHeight = null;

                        return _LockDrilHeight; //.ToString();
                    }
                    set
                    {
                        _LockDrilHeight = value;
                        newLockDrilHeight = (int)value;
                        @* if (!int.TryParse(value,out _LockDrilHeight))
                            {
                                msgCaption = string.Empty;
                                errMsg2 = "ספרות בלבד";
                                msgClass = "modal-body centeredMsg";
                                openMsgBox = true;
                            }
                            else if (doorConfig != null)
                        *@
                        if (doorConfig != null)
                        {
                            if (doorConfig.TRSH_COMPLIENT != PrApiCalls.ELIDOOR_COMPLIENT)  //07/07/2022 we clear the Hinges data only if 
                                                                                            //   the Door is not ELIDOOR_COMPLIENT
                            {
                                //newLockDrilHeight = (int)value;
                                if (newLockDrilHeight >= doorConfig.DOORHEIGHT)
                                {
                                    errMsg2 = "גובה הניקוב לא יכול להיות גבוה מהדלת";
                                    openMsgBox = true;
                                }
                                else if (doorConfig.LOCKDRILHEIGHT > 0)  // show error message only if LOCKDRILHEIGHT was populated
                                {
                                    msgBorder1Style = "border:solid;border-color:red;";
                                    //msgHeaderClass = "modal-header redBorder";
                                    msgCaption = "שים לב:";
                                    errMsg2 = "שינוי ערך בשדה גובה ניקוב מחייב להקליד את שאר המידות ידנית ,  האם להמשיך ?";
                                    MsgTitleCssClass = string.Empty;  //"centeredMsg";
                                    ErrMsgCssClass = "centeredMsg";   //msgClass = "modal-body centeredMsg";
                                    YNissue = "lockDril";
                                    openYesNo = true;
                                    this.StateHasChanged();

                                    @*if (!ansYes)  - the code that handles the YES answer to the YesNo dialogue is
                                                         at the end of this file - in the MsgBox YesNO section !
                                return;

                                if (_LockDrilHeight != doorConfig.LOCKDRILHEIGHT)
                                { 
                                    doorConfig.LOCKDRILHEIGHT = (int)_LockDrilHeight;
                                    UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                    clearHingesMeasures(doorConfig);
                                }
                                doorConfig.borderColors["LOCKDRILHEIGHT"] = (value != 0 ? "blueBorder" : "redBorder");
                            *@




                                }   // end of if (doorConfig.LOCKDRILHEIGHT > 0 )

                                else  // door is Not complient but lockDrilHeight is Zero , i.e. not set yet !
                                      //  so we do not jump to the yesNo section to assign value to doorConfig.LOCKDRILHEIGHT 
                                      //  we should do it here !
                                {
                                    setLockDrilHeight();
                                }
                            }
                            else    //the door is  Elidoor complient 
                            {
                                if (newLockDrilHeight != doorConfig.LOCKDRILHEIGHT)
                                {
                                    if (newLockDrilHeight >= doorConfig.DOORHEIGHT)
                                    {
                                        errMsg2 = "גובה הניקוב לא יכול להיות גבוה מהדלת";
                                        openMsgBox = true;

                                    }
                                    else
                                    {
                                        //doorConfig.LOCKDRILHEIGHT = (_LockDrilHeight != null ? (int)_LockDrilHeight : 0);
                                        //doorConfig.borderColors["LOCKDRILHEIGHT"] = (doorConfig.INTCOLORID != 0 ? "blueBorder" : "redBorder");
                                        //doorConfig.BACKPINHEIGHT = (doorConfig.LOCKDRILHEIGHT > 0 ? doorConfig.LOCKDRILHEIGHT + 55 : 0);  //Eli 26/12/2022
                                        doorConfig.LockDrilHChanged = true;
                                        clearHingesMeasures(doorConfig);

                                    }
                                    setLockDrilHeight();

                                    //if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                    //    config4.RefreshState();
                                }
                            }
                        }
                    }
                }
           }

        </td>

        <td id="tdCylinder4HalfWing">
				 @{  int i604 = Array.IndexOf(UiLogic.propNames, "TRSH_SWING_CYLINDER");
					<select name="dlstCylinder4HalfWing" @bind="Cylinder4HalfWing" class= "@doorConfig.borderColors["TRSH_SWING_CYLINDER"]" 
				 disabled="@doorConfig.disabledFlds["TRSH_SWING_CYLINDER"]"
				  	@onfocus="@( () => UiLogic.HasFocus("TRSH_SWING_CYLINDER", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i604]]"  >
					 	@if (lstCylinders1 != null)
					    {
							@foreach (CYLINDER_Class c in lstCylinders1)
						    {
								    <option value="@c.TRSH_CYLINDER">@c.PARTDES</option>
						    }
					}
					</select>
				}
            </td>
            @code
        {
                protected int _Cylinder4HalfWing = 0;
                protected int Cylinder4HalfWing
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Cylinder4HalfWing = doorConfig.TRSH_SWING_CYLINDER;
                        }
                        return _Cylinder4HalfWing;
                    }
                    set
                    {
                        _Cylinder4HalfWing = value;
                        if (doorConfig != null)
                        {
                            doorConfig.TRSH_SWING_CYLINDER = _Cylinder4HalfWing;
                            doorConfig.borderColors["TRSH_SWING_CYLINDER"] = (value != 0  ? "blueBorder" : "redBorder");
                            if (PrApiCalls.cylinderIsHalf(doorConfig.TRSH_SWING_CYLINDER))
                            {
                                // if the user selected 1/2 Cylinder the folowing two fields are emptied and disabled !
                                doorConfig.HW4EXTRAWING = 0;
                                doorConfig.SWING_HWCOLORID = 0;
                                doorConfig.disabledFlds["HW4EXTRAWING"] = doorConfig.disabledFlds["SWING_HWCOLORID"] = doorConfig.disabledFlds["SWING_DRIL4HW"] = true;

                                lstD4HW1 = new List<DRIL4HW_Class>();
                                DRIL4HW_Class dril4HalfCyl = PrApiCalls.getDril4HalfCylinder();
                                lstD4HW1.Add(dril4HalfCyl);
                                doorConfig.SWING_DRIL4HW = dril4HalfCyl.DRIL4HW;
                            }
                            else
                            {
                                //doorConfig.disabledFlds["HW4EXTRAWING"] =    // 06/07/2022 HW4EXTRAWING is disabled by default  !
                                doorConfig.disabledFlds["SWING_HWCOLORID"] = false;
                                doorConfig.disabledFlds["SWING_DRIL4HW"] = false;
                                //doorConfig.HW4EXTRAWING = (doorConfig.HW4EXTRAWING == 0 ? doorConfig.TRSH_HARDWARE : doorConfig.HW4EXTRAWING );
                                //doorConfig.SWING_HWCOLORID = (doorConfig.SWING_HWCOLORID == 0 ? doorConfig.HWCOLORID : doorConfig.SWING_HWCOLORID);
                                //find the SWING_DRIL4HW that is associated with HW4EXTRAWING
                                string errMsg = string.Empty;

                                //lstCylHws1 = PrApiCalls.getCYLHWs1(doorConfig.TRSH_SWING_CYLINDER, doorConfig.OPENSIDE, doorConfig.OPENMODE, ref errMsg);
                                lstHws4Cyl = PrApiCalls.getHws4Cyl(doorConfig.TRSH_SWING_CYLINDER, doorConfig, ref errMsg);

                                if (doorConfig.TRSH_MODELNAME == "MLI")   //hardcode for MLI 06/07/2022
                                {
                                    //CYLHW_Class CHw1 = lstCylHws1.Find(x => x.PARTDESHW == "ללא" );
                                    //lstCylHws1.Remove(CHw1);

                                    TRSH_HARDWARE_Class hwNone = lstHws4Cyl.Find(x => x.PARTDES == HebNouns.None);
                                    if (hwNone != null)
                                        lstHws4Cyl.Remove(hwNone);
                                }

                                setSWING_DRIL4HW();

                            }
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                config4.RefreshState();
                        }
                    }
                }
			}

            <td id="dlstHW4EXTRAWING" >  
					@* HW4EXTRAWING *@
					 @{  int i605 = Array.IndexOf(UiLogic.propNames, "HW4EXTRAWING");
						<select name="dlstHw" @bind="Hw4ExtraWing" class="@doorConfig.borderColors["HW4EXTRAWING"]" 
					        disabled="@doorConfig.disabledFlds["HW4EXTRAWING"]"
								@onfocus="@( () => UiLogic.HasFocus("HW4EXTRAWING", doorConfig) )" 
								@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
							 @onkeypress="doorConfig.KeyPressHandler" 
							 	@ref="doorConfig.dicRefs[UiLogic.propNames[i605]]" >
                    @{
                        string errMsg = string.Empty;
                        //List<TRSH_HARDWARE_Class> lstPartHWs = PrApiCalls.getDoorHWs(doorConfig.TRSH_DOOR_HWCATCODE, ref errMsg);
                        // List<CYLHW_Class> lstCylHws1 = PrApiCalls.getCYLHWs1(doorConfig.TRSH_CYLINDER, doorConfig.OPENSIDE, ref errMsg);
                        // if (doorConfig.TRSH_MODELNAME == "MLI")   //hardcode for MLI 06/07/2022
                        //{
                        //	CYLHW_Class CHw1 = lstCylHws1.Find(x => x.PARTDESHW == "ללא" );
                        //	lstCylHws1.Remove(CHw1);
                        //}
                        if (doorConfig.TRSH_SWING_CYLINDER > 0)
                        {
                            if (lstHws4Cyl != null)   //lstCylHws1 != null)
                            {
                                @foreach (TRSH_HARDWARE_Class c in lstHws4Cyl)  //  (CYLHW_Class c in lstCylHws1) 
                                {
                                    <option value="@c.TRSH_HARDWARE">@c.PARTDES</option>
                                }
                            }
                        }
                        else  // HW without Cylinder - e.g. TRSH_MODEL is E or similar,  select from all hardwares
                        {
                            if (PrApiCalls.lstHardwares != null)
                            {
                                @foreach (TRSH_HARDWARE_Class h in PrApiCalls.lstHardwares)
                                {
                                    if (h.OPENSIDE == doorConfig.OPENSIDE || string.IsNullOrEmpty(h.OPENSIDE))
                                    {
                                            <option value="@h.TRSH_HARDWARE">@h.PARTDES</option>
                                    }
                                }
                            }
                        }
                    }
					</select>
				}
				@code
			{
				protected int _Hw4ExtraWing = 0;
				protected int Hw4ExtraWing
				{
					get
					{
						if (doorConfig != null)
						{
							//_Hw4ExtraWing = PrApiCalls.getOpposite_TRSH_HARDWARE(doorConfig.HW4EXTRAWING);
							_Hw4ExtraWing = doorConfig.HW4EXTRAWING;
						}
						return _Hw4ExtraWing;
					}
					set
					{
						_Hw4ExtraWing = value;
						if (doorConfig != null)
						{
							doorConfig.HW4EXTRAWING = _Hw4ExtraWing;
							setSWING_DRIL4HW();
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();

						    @*if (doorConfig.HW4EXTRAWING == HebNouns.IdOfNone) // ללא   
                            {
                                doorConfig.disabledFlds["SWING_HWCOLORID"] = true;
                                doorConfig.SWING_HWCOLORID = 0;
                                // 18/06/2022 - when HARWARE is ללא DRIL4HW showuld be ENABLED !
                                //  therefore commented the three lines below.
                                // doorConfig.disabledFlds["DRIL4HW"] = true;
                                // doorConfig.DRIL4HW = 0;
                                // doorConfig.borderColors["DRIL4HW"] = doorConfig.borderColors["HWCOLORID"] = string.Empty;
                                lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();  // the full list of Drills for Hardwares
                                return;
                            }
                            else
                            {
                               // doorConfig.borderColors["HW4EXTRAWING"] = (value != 0 ? "blueBorder" : "redBorder");  // it's OPTIONAL 
                                //doorConfig.DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
								doorConfig.SWING_DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
                                // populate the LOV for Dril4Hw based on Hardware selected .
                                string errMsg = string.Empty;
                                lstD4HW1 = PrApiCalls.getDril4Hw1(doorConfig.HW4EXTRAWING, ref errMsg);

                                //doorConfig.borderColors["SWING_DRIL4HW"] = (doorConfig.DRIL4HW != 0 ? "blueBorder" : "redBorder");
                                UiLogic.clearFollowingTabFields(doorConfig, "staticwing");

                                doorConfig.disabledFlds["SWING_HWCOLORID"] = !PrApiCalls.isHWColored(value);
                                doorConfig.borderColors["SWING_HWCOLORID"] = (doorConfig.disabledFlds["SWING_HWCOLORID"] || doorConfig.HWCOLORID != 0 ? "blueBorder" : "redBorder");
                                if (doorConfig.disabledFlds["SWING_HWCOLORID"])
                                    doorConfig.SWING_HWCOLORID = 0;   //clear the HWCOLORID field if it's disabled.
                            }*@
                        }
                    }
                }
            }
		  </td>

     	  @code	{
			protected void setSWING_DRIL4HW()
			{
				if (doorConfig.HW4EXTRAWING == 0 || doorConfig.HW4EXTRAWING == HebNouns.IdOfNone) // ללא   
				{
					doorConfig.disabledFlds["SWING_HWACCESSORYID"] = true;
					doorConfig.SWING_HWACCESSORYID = 0;
					doorConfig.disabledFlds["SWING_HWCOLORID"] = true;
					doorConfig.SWING_HWCOLORID = 0;
					
					// 18/06/2022 - when HARWARE is ללא DRIL4HW should be ENABLED !
					//  therefore commented the three lines below.
					// doorConfig.disabledFlds["DRIL4HW"] = true;
					// doorConfig.DRIL4HW = 0;
					// doorConfig.borderColors["DRIL4HW"] = doorConfig.borderColors["HWCOLORID"] = string.Empty;
					lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();  // the full list of Drills for Hardwares
					return;
				}
				else
				{
                    doorConfig.disabledFlds["SWING_HWACCESSORYID"] = false;
                    doorConfig.borderColors["SWING_HWACCESSORYID"] = (doorConfig.SWING_HWACCESSORYID != 0 ? "blueBorder" : "redBorder"); // it's mandatory after 
                                                                                                                      // HW4EXTRAWING was set 
					// doorConfig.borderColors["HW4EXTRAWING"] = (value != 0 ? "blueBorder" : "redBorder");  // it's OPTIONAL 
					//doorConfig.DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
					doorConfig.SWING_DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
					// populate the LOV for Dril4Hw based on Hardware selected .
					string errMsg = string.Empty;
					lstD4HW1 = PrApiCalls.getDril4Hw1(doorConfig.HW4EXTRAWING, ref errMsg);
					foreach (DRIL4HW_Class d4hw in lstD4HW1)
					{
						if (d4hw.DRIL4HWDES.Contains("IDS") && d4hw.DRIL4HW != doorConfig.SWING_DRIL4HW) 
						{
							lstD4HW1.Remove(d4hw);  //07/07/2022 - Eli asked: on staticwing : if Dril4HW is IDS - the LOV should contain a single element ONE SIDE IDS Dril !
							break;  // this can be done only once Otherwise we'll get an error on the foreach statement - the collection lstD4HW1 was changed and the foreach 
							        //   crashed and cannot continue.
						}


					}

                    //doorConfig.borderColors["SWING_DRIL4HW"] = (doorConfig.DRIL4HW != 0 ? "blueBorder" : "redBorder");
                    //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");

                    doorConfig.disabledFlds["SWING_HWCOLORID"] = !PrApiCalls.isHWColored(_Hw4ExtraWing);
                    doorConfig.borderColors["SWING_HWCOLORID"] = (doorConfig.disabledFlds["SWING_HWCOLORID"] || doorConfig.SWING_HWCOLORID != 0 ? "blueBorder" : "redBorder");
                    if (doorConfig.disabledFlds["SWING_HWCOLORID"])
                        doorConfig.SWING_HWCOLORID = 0;   //clear the HWCOLORID field if it's disabled.
                }
			}
		   }
		      
		   @* SWING_HWACCESSORYID   new 12/07/2022 *@
		   <td>
		   @{  int i617 = Array.IndexOf(UiLogic.propNames, "SWING_HWACCESSORYID");
             <select name="dlstHw2" @bind="HwAccessoryId" class="@doorConfig.borderColors["SWING_HWACCESSORYID"]" 
                    disabled="@doorConfig.disabledFlds["SWING_HWACCESSORYID"]"
                        @onfocus="@( () => UiLogic.HasFocus("SWING_HWACCESSORYID", doorConfig) )" 
                        @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                    @onkeypress="doorConfig.KeyPressHandler" 
                        @ref="doorConfig.dicRefs[UiLogic.propNames[i617]]" >
                    @{
                        if (PrApiCalls.lstHwAccessories != null)
                        {
                            string HwColored = PrApiCalls.getHardware1(doorConfig.HW4EXTRAWING).COLORED;
                            @foreach (HWACCESSORY_Class hwa in PrApiCalls.lstHwAccessories)
                            {
                                if (hwa.COLORED == HwColored || hwa.HWACCESSORYID == 0 || hwa.HWACCESSORYID == HebNouns.IdOfNone)
                                {
                                    <option value="@hwa.HWACCESSORYID">@hwa.PARTDES</option>
                                }
                            }
                        }
                    }
                    </select>
                    }
					 @code
                    {
                        protected int _HwAccessoryId;
                        protected int HwAccessoryId
                        {
                            get
                            {
                                if (doorConfig != null)
                                {
                                    _HwAccessoryId = doorConfig.SWING_HWACCESSORYID;
                                }
                                return _HwAccessoryId;
                            }
                            set
                            {
                                _HwAccessoryId = value;
                                if (doorConfig != null)
                                {
                                    doorConfig.SWING_HWACCESSORYID = _HwAccessoryId;
                                    doorConfig.borderColors["SWING_HWACCESSORYID"] = (value != 0 ? "blueBorder" : "redBorder");
                                    if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                                }
                            }
                        }
                    }
        </td>
		   @* end SWING_HWACCESSORYID *@
			@{
            List<TRSH_COLOR_Class> tmpLstColors = new List<TRSH_COLOR_Class>(PrApiCalls.lstColors);
            tmpLstColors.Insert(1, new TRSH_COLOR_Class() { TRSH_COLORID = 99999, PARTDES = "ללא"  });
            //DataTable tmpDtColors = new DataTable();
            //tmpDtColors = tmpLstColors.ToDataTable<TRSH_COLOR_Class>();
        }
        <td>
            @{  int i606 = Array.IndexOf(UiLogic.propNames, "SWING_HWCOLORID");
				<select name="dlstSwing_HwColor" @bind="Swing_HwColorId" class="@doorConfig.borderColors["SWING_HWCOLORID"]"  
                 disabled="@doorConfig.disabledFlds["SWING_HWCOLORID"]"  
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HWCOLORID", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i606]]" >
					@if (PrApiCalls.lstColors != null)
                {
						@foreach (TRSH_COLOR_Class c in  tmpLstColors) //PrApiCalls.lstColors)
                    {
							<option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
				</select>
            }
			</td>
			@code
        {
            protected int _Swing_HwColorId = 0;
            protected int Swing_HwColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Swing_HwColorId = doorConfig.SWING_HWCOLORID;
                    }
                    return _Swing_HwColorId;
                }
                set
                {
                    _Swing_HwColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.SWING_HWCOLORID = _Swing_HwColorId;
                        doorConfig.borderColors["SWING_HWCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");  //05/08/2022 - I think this field is mandatory
                                                                       // if the HW is colored
                        //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                    }
                }
            }
        }
		

      </tr>
            @*  end staticWingL2 *@
     </table>
     <table id="StaticwingL3">
			<tr>
				
				<th class="@doorConfig.thClasses["SWING_DRIL4HW"]">ניקוב לפירזול</th>
				<th class= "@doorConfig.thClasses["SWING_TURBO"]" >מנגנון תגבור</th>
				<th>לוגו</th>
				<th class="@doorConfig.thClasses["SWING_LOCKNAME"]">מנעול</th>

				<th class="@doorConfig.thClasses["SWING_HANDLENAME"]"> ידית אומנותית</th>
				<th class="@doorConfig.thClasses["SWING_HANDLECOLORID"]">צבע ידית אומנותית</th>

				<th>אוורור</th>
			    <th id="thRafafaOnStaticWing" >רפפת עשן</th>
				<th>פתח לחתול</th>
		    </tr>

			<tr>

				<td id="tdSwing_Dril4Hw">
				@* SWING_DRIL4HW *@
				@{  int i607 = Array.IndexOf(UiLogic.propNames, "SWING_DRIL4HW");
				<select name="dlstSwing_Dril4Hw" @bind="Swing_Dril4Hw" class="@doorConfig.borderColors["SWING_DRIL4HW"]"
              disabled="@doorConfig.disabledFlds["SWING_DRIL4HW"]" 
			  	@onfocus="@( () => UiLogic.HasFocus("SWING_DRIL4HW", doorConfig) )" 
			  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i607]]" >

					@* @if (PrApiCalls.lstDril4Hw != null)  *@
					@if (lstD4HW1 != null)
                {
						@* @foreach (DRIL4HW_Class c in PrApiCalls.lstDril4Hw) *@
						@foreach (DRIL4HW_Class c in lstD4HW1)
                    {
							<option value="@c.DRIL4HW">@c.DRIL4HWDES</option>
                    }
                }
				</select>
            }
			</td>
			@code
			{
				protected int _Swing_Dril4Hw = 0;
				protected int Swing_Dril4Hw
				{
					get
					{
						if (doorConfig != null)
						{
							_Swing_Dril4Hw = doorConfig.SWING_DRIL4HW;
						}
						return _Swing_Dril4Hw;
					}
					set
					{
						_Swing_Dril4Hw = value;
						if (doorConfig != null)
						{
							doorConfig.SWING_DRIL4HW = _Swing_Dril4Hw;
							//doorConfig.borderColors["DRIL4HW"] = (value != 0 ? "blueBorder" : "redBorder");
							//UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
						}
					}
				}
			}

            <td id="tdSwing_Turbo" class="@doorConfig.thClasses["SWING_TURBO"]" >
			@{  int i613 = Array.IndexOf(UiLogic.propNames, "SWING_TURBO");
				<input type="checkbox" name="chkbSwing_Turbo" @bind="Swing_Turbo"  
			   disabled="@doorConfig.disabledFlds["SWING_TURBO"]"
			   	@onfocus="@( () => UiLogic.HasFocus("SWING_TURBO", doorConfig) )"
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i613]]" 
				/>
			}
            @code
            {
                protected bool _Swing_Turbo = false;
                protected bool Swing_Turbo
                {
                    get
                    {
                        if (doorConfig != null)
                        {
							//doorConfig.SWING_TURBO = (doorConfig.TRSH_ELIDOOR_LOGO == 1 ? "Y" : string.Empty);  // new 11/07/2022 
                            _Swing_Turbo = (doorConfig.SWING_TURBO == "Y");
							  
                        }
                        return _Swing_Turbo;
                    }
                    set
                    {
                        _Swing_Turbo = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_TURBO = (_Swing_Turbo ? "Y" : "");
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
        </td>

        <td id="tdLogo" class="@doorConfig.thClasses["LOGO"]">
            <input type="checkbox" name="chkbLogo" @bind="Logo" 
				disabled="@doorConfig.disabledFlds["LOGO"]"	 />
            @code
            {
                protected bool _Logo = false;
                protected bool Logo
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Logo = (doorConfig.LOGO == "Y");  //copied from movingwing !
                        }
                        return _Logo;
                    }
                    set
                    {
                        _Logo = value;
                        if (doorConfig != null)
                        {
                            doorConfig.LOGO = (_Logo ? "Y" : "");   // note: we change here also the LOGO field in movingwing !
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }

            }
        </td>
        
        <td id="tdLock"  class="@doorConfig.thClasses["SWING_LOCKNAME"]">
            @{  int i608 = Array.IndexOf(UiLogic.propNames, "SWING_LOCKNAME");
				<select name="dlstLock" @bind="Lock" class="@doorConfig.borderColors["SWING_LOCKNAME"]" 
			     disabled="@doorConfig.disabledFlds["SWING_LOCKNAME"]"
				 	@onfocus="@( () => UiLogic.HasFocus("SWING_LOCKNAME", doorConfig) )"
				 	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i608]]"  >
					@{
                    List<TRSH_LOCK_Class> lstPartLocks = PrApiCalls.getPartAndLogoLocks(doorConfig.TRSH_DOOR_HWCATCODE, doorConfig.LOGO, ref errMsg);
                    if (lstPartLocks != null)
                    {
								@foreach (TRSH_LOCK_Class c in lstPartLocks)
                        {
									<option value="@c.PARTNAME">@c.PARTDES</option>
                        }
                    }
					}
				</select>
            }
        </td>
        @code {
            protected string _Lock = string.Empty;
            protected string Lock
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Lock = doorConfig.SWING_LOCKNAME;
                    }
                    return _Lock;
                }
                set
                {
                    _Lock = value;
                    if (doorConfig != null)
                    {
                        doorConfig.SWING_LOCKNAME = _Lock;
                        //doorConfig.borderColors["SWING_LOCKNAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                        //UiLogic.clearFollowingTabFields(doorConfig, "staticgwing");
                        if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                  config4.RefreshState();
                    }
                }
            }
        }

		<td>
			@* handle 4 static wing   new *@
			 @{  int i609 = Array.IndexOf(UiLogic.propNames, "SWING_HANDLENAME");
					<select name="dlstHandle" @bind="Swing_Handle" class="@doorConfig.borderColors["SWING_HANDLENAME"]" 
				  disabled="@doorConfig.disabledFlds["SWING_HANDLENAME"]"	
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HANDLENAME", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i609]]"  >
						@if (PrApiCalls.lstHandles != null)
                    {
							@foreach (HANDLE_Class c in PrApiCalls.lstHandles)
                        {
								<option value="@c.PARTNAME">@c.PARTDES</option>
                        }
                    }
					</select>
                }
           
                @code
            {
                protected string _Swing_Handle = string.Empty;
                protected string Swing_Handle
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Swing_Handle = doorConfig.SWING_HANDLENAME;
                        }
                        return _Swing_Handle;
                    }
                    set
                    {
                        _Swing_Handle = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_HANDLENAME = _Swing_Handle;
                            // Handle is a Required field independent of the HASLOCK flag ! 07/07/2022
                            doorConfig.borderColors["SWING_HANDLENAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            doorConfig.disabledFlds["SWING_HANDLECOLORID"] = (   doorConfig.HANDLENAME == HebNouns.NameOfNone 
                                                                       || !PrApiCalls.isHandleColored(doorConfig.SWING_HANDLENAME));
                            if (doorConfig.disabledFlds["SWING_HANDLECOLORID"])
                                doorConfig.SWING_HANDLECOLORID = 0;

                            doorConfig.borderColors["SWING_HANDLECOLORID"] = (doorConfig.SWING_HANDLECOLORID != 0  ? "blueBorder" : "redBorder");

                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");

                            if (!PrApiCalls.isHandleColored(doorConfig.SWING_HANDLENAME) && UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                config4.RefreshState();
                            if (PrApiCalls.isHandleColored(doorConfig.SWING_HANDLENAME) && doorConfig.SWING_HANDLECOLORID == 0)
                            {
                                UiLogic.deactivateBtnClass(doorConfig, "staticwing");
                                config4.RefreshState();
                            }
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
		</td>
		<td>
			 @{  int i614 = Array.IndexOf(UiLogic.propNames, "SWING_HANDLECOLORID");
					<select name="dlstSwingHandleColorID"  @bind="Swing_HandleColorID"  class= "@doorConfig.borderColors["SWING_HANDLECOLORID"]"
					disabled="@doorConfig.disabledFlds["SWING_HANDLECOLORID"]"	
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HANDLECOLORID", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i614]]" 
					>
						@if (PrApiCalls.lstColors != null)
					{
							@foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
						{
								<option value="@c.TRSH_COLORID">@c.PARTDES</option>
						}
					}
					</select>
				}
		</td>
		@code
        {
	        protected int _Swing_HandleColorID = 0;
	        protected int Swing_HandleColorID
	        {
		        get
		        {
			        if (doorConfig != null)
			        {
				        _Swing_HandleColorID = doorConfig.SWING_HANDLECOLORID;
			        }
			        return _Swing_HandleColorID;
		        }
		        set
		        {
			        _Swing_HandleColorID = value;
			        if (doorConfig != null)
                    {
				        doorConfig.SWING_HANDLECOLORID = _Swing_HandleColorID;
                        doorConfig.borderColors["SWING_HANDLECOLORID"] = (value != 0  ? "blueBorder" : "redBorder");
                        //UiLogic.clearFollowingTabFields(doorConfig, "handle");
						if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                    }
		        }
	        }
        }

		<td class="@doorConfig.thClasses["SWING_VENTS"]" >
			@* Vent 4 static wing new *@
			@{  int i610 = Array.IndexOf(UiLogic.propNames, "SWING_VENTS");
				<select name="dlstVents" @bind="Vents" class="@doorConfig.borderColors["SWING_VENTS"]" 
			 disabled="@doorConfig.disabledFlds["SWING_VENTS"]"
			 	@onfocus="@( () => UiLogic.HasFocus("SWING_VENTS", doorConfig) )" 
			 	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i610]]" >
					<option></option>
                    <option>ללא</option>
                    <option>סט 1 תחתון</option>
                    <option>סט 1 עליון</option>
                    <option>שני סטים, עליון ותחתון</option>
                    <option>כל הדלת</option>
				</select>
            }
            @code
            {
                protected string _Vents = string.Empty;
                protected string Vents
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Vents = doorConfig.SWING_VENTS;
                        }
                        return _Vents;
                    }
                    set
                    {
                        _Vents = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_VENTS = _Vents;
                           // doorConfig.borderColors["VENTS"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
		</td>

		<td id="tdRafafaOnStaticWing"  class="@doorConfig.thClasses["RAFAFAONSTATICWING"]">
               @{  int i611 = Array.IndexOf(UiLogic.propNames, "RAFAFAONSTATICWING");
				<select name="dlstRafafa" @bind="Rafafa" class="@doorConfig.borderColors["RAFAFAONSTATICWING"]" 
			    disabled="@doorConfig.disabledFlds["RAFAFAONSTATICWING"]"
					@onfocus="@( () => UiLogic.HasFocus("RAFAFAONSTATICWING", doorConfig) )" 
					@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i611]]" >
					<option></option>
                    <option>ללא</option>
                    <option>סט 1 תחתון</option>
                    <option>סט 1 עליון</option>
                    <option>שני סטים, עליון ותחתון</option>
                    <option>כל הדלת</option>
				</select>
            }
			 @code
            {
                protected string _Rafafa = string.Empty;
                protected string Rafafa
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Rafafa = doorConfig.RAFAFAONSTATICWING;
                        }
                        return _Rafafa;
                    }
                    set
                    {
                        _Rafafa = value;
                        if (doorConfig != null)
                        {
                            doorConfig.RAFAFAONSTATICWING = _Rafafa;
                            //doorConfig.borderColors["RAFAFAONMOVINGWING"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                            
                            //debug
                            
                            // ref : https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
                            // the 2nd answer : Update Parent State by calling it's StateHasChanged method

                               // doorConfig.btnClasses["hinges"] = "buttonActive";
                               // config4.RefreshState();
                            // end debug 
                        }
                    }
                }
            }
        </td>
			
		<td id="tdCatDoor" class="@doorConfig.thClasses["SWING_CATDOOR"]">
			@* Cat door 4 static wing - new *@
			@{  int i612 = Array.IndexOf(UiLogic.propNames, "SWING_CATDOOR");
					<input type="checkbox" name="chkbCatDoor" @bind="CatDoor"
				   disabled="@doorConfig.disabledFlds["SWING_CATDOOR"]"
				   	@onfocus="@( () => UiLogic.HasFocus("SWING_CATDOOR", doorConfig) )"
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     @onkeypress="doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i612]]"  />
            }
            @code
            {
                protected bool _CatDoor = false;
                protected bool CatDoor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _CatDoor = (doorConfig.SWING_CATDOOR == "Y");
                        }
                        return _CatDoor;
                    }
                    set
                    {
                        _CatDoor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_CATDOOR = (_CatDoor ? "Y" : "N" );
                            //doorConfig.borderColors["CATDOOR"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
		</td>
            
        </tr>
    </table>
    <!-- end table staticWingL3 -->
 


@* copied from Movingwing.razor   *@
@if (openMsgBox)
{
    <MsgBox Caption="@msgCaption"
        Message="@errMsg2"
        OnClose="OnDialogClose"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@msgClass"
        Border1Style = "@msgBorder1Style"
    >
    </MsgBox>
    @code
    {
        private void OnDialogClose()
        {
            openMsgBox = false;
            errMsg2 = string.Empty;
        }
    }
}
@if (openYesNo)
{
  <MsgBox Caption="@msgCaption"
        Type="MsgBox.Category.YesNo"
        Message="@errMsg2"
        OnClose="OnCloseYesNo"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@ErrMsgCssClass"
        Border1Style = "@msgBorder1Style" >
  </MsgBox>
    @code
    {
    private void OnCloseYesNo(bool isYes)
    {
        if (isYes)   // yesNo here is just for btnRestart !
        {
            ansYes = true;
            switch (YNissue)
            {
                case "lockDril":
                    if (newLockDrilHeight != doorConfig.LOCKDRILHEIGHT)  //(_LockDrilHeight != doorConfig.LOCKDRILHEIGHT )
                    {
                        doorConfig.LOCKDRILHEIGHT = newLockDrilHeight;   //(int)_LockDrilHeight;
                        doorConfig.BACKPINHEIGHT = (doorConfig.LOCKDRILHEIGHT > 0 ? doorConfig.LOCKDRILHEIGHT + 55 : 0);  //Eli 26/12/2022
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        clearHingesMeasures(doorConfig);
                    }
                    doorConfig.borderColors["LOCKDRILHEIGHT"] = (doorConfig.LOCKDRILHEIGHT != 0 ? "blueBorder" : "redBorder");
                    break;
            }
        }
        openYesNo = false;
        errMsg2 = string.Empty;
    }
}
}