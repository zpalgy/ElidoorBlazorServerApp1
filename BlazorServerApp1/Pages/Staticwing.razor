@using BlazorServerApp1.Data
@using System.Data;

@page "/Staticwing"

@inject IJSRuntime Js

@implements IDisposable

@inject NavigationManager Navigator


@code
{
    [Parameter]
    public DoorConfig doorConfig { get; set; }

    //[Parameter]
    //public bool ExtdecorIsFull { get; set; }

	[Parameter]
    public Configurator4 config4 { get; set; }
}

@code {

	private DataTable dtTabFlds = new DataTable();
	List<DRIL4HW_Class> lstD4HW1 = new List<DRIL4HW_Class>();
	List<CYLINDER_Class> lstCylinders1 = new List<CYLINDER_Class>();

	protected override async Task OnInitializedAsync()
	{

		//if (!ExtdecorIsFull)
		//{
		//    // navigate back to Movingwing 
		//    //[TODO]  Navigator.NavigateTo("Movingwing");
		//}

		//if (!UiLogic.tabPageIsFilled("intdecor", doorConfig))
		//{
		//   Js.InvokeVoidAsync("alert", "יש למלא את כל השדות בלשונית 'דקורציה פנים' י");
		//}

		//var doorConfigJsonV = await ProtectedSessionStore.GetAsync<string> ("doorConfigJson");
		//if (doorConfigJsonV.Success)
		//{
		//    string doorConfigJson2 = doorConfigJsonV.Value;
		//    if (!string.IsNullOrEmpty(doorConfigJson2))
		//         doorConfig = Newtonsoft.Json.JsonConvert.DeserializeObject<DoorConfig>(doorConfigJson2);
		//UiLogic.restoreDoorConfig(ProtectedSessionStore, doorConfig);          

		//Js.InvokeVoidAsync("alert", string.Format("in Extdecor:onInitializedAsync doorConfig.EXTCOLORID = {0}", doorConfig.EXTCOLORID));  //debug

		string dbg = doorConfig.SWINGHASLOCK;
		string dbg2 = doorConfig.SWING_TURBO;

		string errMsg = string.Empty;
		doorConfig.config4 = config4;
		doorConfig.currTabName = "staticwing";
		doorConfig.dtTabFlds = UiLogic.getTabFields("staticwing", doorConfig, ref errMsg);
		lstCylinders1 = PrApiCalls.getCylindersByModelOpenMode(doorConfig, ref errMsg, true); // get also HALF Cylinders 

		//if (!UiLogic.tabPageIsFilled("staticwing", doorConfig))
		//if (!UiLogic.tabPageIsNotEmpty("staticwing", doorConfig))  // i.e. staticwing is Empty !
		//{
		//	doorConfig.disabledFlds["DOORHEIGHT"] = doorConfig.disabledFlds["CENTRALCOLCLRID"] = doorConfig.disabledFlds["OPENMODE"] =
		//	doorConfig.disabledFlds["OPENSIDE"] = doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = 
		//	doorConfig.disabledFlds["INTCOLORID"] =
		//	doorConfig.disabledFlds["LOCKDRILHEIGHT"] = doorConfig.disabledFlds["LOGO"] = 
		//	doorConfig.disabledFlds["HW4EXTRAWING"] =                   //06/07/2022 
		//	doorConfig.disabledFlds["SWING_HWACCESSORYID"] =            //12/07/2022
		//	doorConfig.disabledFlds["SWING_LOCKDRILHEIGHT"] = true;
		//	calcCentralColClrID(doorConfig);
		//	applySwingHasLock();
		//	doorConfig.CENTRALCOLWIDTH = 40;  //06/07/2022 
		//	// doorConfig.disabledFlds["SWING_HANDLENAME"] = (doorConfig.TRSH_WINGSNUMDES == "כנף וחצי"); // 06/07/2022 
		//													//doorConfig.thClasses["HW4EXTRAWING"] = "thGray";   // 06/07/2022 
		//													//   07/07/2022 - Eli asked to make this field Mandatory
		//	doorConfig.HW4EXTRAWING = doorConfig.TRSH_HARDWARE;
		//	doorConfig.disabledFlds["HW4EXTRAWING"] = true;

		//}
		if (UiLogic.tabPageIsFilled("staticwing", doorConfig))  // we came here back from a prev tab and actually the current tabPage is filled
																// so we should disable all it's fields !
		{
			string errMsg2 = string.Empty;
			UiLogic.disableTabFlds(doorConfig, "staticwing");
			// restore the LOV for SWING_DRIL4HW !
			lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();
		}
		else
		{
			doorConfig.disabledFlds["DOORHEIGHT"] = doorConfig.disabledFlds["CENTRALCOLCLRID"] = doorConfig.disabledFlds["OPENMODE"] =
			doorConfig.disabledFlds["OPENSIDE"] = doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] =
			doorConfig.disabledFlds["INTCOLORID"] =
			doorConfig.disabledFlds["LOCKDRILHEIGHT"] = true;

			// these are handled in applySwingHasLock() here below !
			//doorConfig.disabledFlds["HW4EXTRAWING"] =                   //06/07/2022 
			//doorConfig.disabledFlds["SWING_HWACCESSORYID"] =            //12/07/2022
			//doorConfig.disabledFlds["SWING_LOCKDRILHEIGHT"] = true;
			calcCentralColClrID(doorConfig);
			applySwingHasLock();
			doorConfig.CENTRALCOLWIDTH = (doorConfig.CENTRALCOLWIDTH == 0 ? 40 : doorConfig.CENTRALCOLWIDTH) ;  //06/07/2022 
																														// doorConfig.disabledFlds["SWING_HANDLENAME"] = (doorConfig.TRSH_WINGSNUMDES == "כנף וחצי"); // 06/07/2022 
																														//doorConfig.thClasses["HW4EXTRAWING"] = "thGray";   // 06/07/2022 
																														//   07/07/2022 - Eli asked to make this field Mandatory
			doorConfig.HW4EXTRAWING = doorConfig.TRSH_HARDWARE;
			doorConfig.disabledFlds["HW4EXTRAWING"] = true;

			doorConfig.LOGO = (doorConfig.useLOGO ? "Y" : string.Empty);  // new 11/07/2022 , in case we didn't open movingwing (WINGSNUMDES == Half Wing ) we set LOGO here.
																				//  in case both WINGSNUMDES has more than one wing LOGO is always the same on both wings - see doc from 22/06/2022 !
																				//  that doc also states the the LOGO field in the staticwing is always disabled !
																				//  11.	"לוגו" יועתק מהכנף הנעה ולא ניתן יהיה לשינוי.
																				//doorConfig.TURBOAPPARATUS = (doorConfig.useLOGO ? "Y" : string.Empty);   // new 11/07/2022 
			doorConfig.SWING_TURBO = (doorConfig.useLOGO ? "Y" : string.Empty);   // new 11/07/2022 
			doorConfig.disabledFlds["LOGO"] = true;


		}

		doorConfig.thClasses["SWING_TURBO"] = "thGray";
	}
	void calcCentralColClrID(DoorConfig doorConfig)
	{
		switch (doorConfig.COLORSNUM)
		{
			case "מגולוון" :
			case "1":
				doorConfig.CENTRALCOLCLRID = doorConfig.DOORCOLORID;
				break;
			case "2":
				doorConfig.CENTRALCOLCLRID = (doorConfig.OPENMODE == "פנימה" ? doorConfig.INTCOLORID : doorConfig.EXTCOLORID);
				break;
		}
	}
	protected void applySwingHasLock()
	{
		if (!_SwingHasLock)
		{
			doorConfig.HW4EXTRAWING = 0;
			doorConfig.SWING_HWCOLORID = 0;
			doorConfig.SWING_DRIL4HW = 0;
			//doorConfig.TURBOAPPARATUS = string.Empty;  //06/07/2022  TURBOAPPARATUS is N when StaticWing Doesn't have a LOCK !
																//doorConfig.LOCKDRILHEIGHT = 0;
			//doorConfig.SWING_TURBO = string.Empty;   // 11/07/2022 TURBO is affected ONLY by  Cust.TRSH_NOTECOMPLIENT
			                                           //  so we don't change it her inside applySwingHasLock() !
																            
			doorConfig.thClasses["LOCKDRILHEIGHT"] = 
			doorConfig.thClasses["HW4EXTRAWING"] = 
			doorConfig.thClasses["SWING_HWACCESSORYID"] =
			doorConfig.thClasses["SWING_HWCOLORID"] = 
			doorConfig.thClasses["SWING_DRIL4HW"] = 
			doorConfig.thClasses["TRSH_SWING_CYLINDER"] =
			doorConfig.thClasses["SWING_LOCKNAME"] = "thGray";
			doorConfig.thClasses["SWING_TURBO"] = "thGray";      //TODO - check this !
		}
		else
		{
			doorConfig.thClasses["LOCKDRILHEIGHT"] = 
			//doorConfig.thClasses["HW4EXTRAWING"] =      //HW4EXTRAWING is disabled by default 06/07/2022 
			doorConfig.thClasses["SWING_HWCOLORID"] = 
			doorConfig.thClasses["SWING_DRIL4HW"] = 
			doorConfig.thClasses["SWING_LOCKNAME"] =
			doorConfig.thClasses["TRSH_SWING_CYLINDER"] = "thBlue";
			doorConfig.thClasses["SWING_TURBO"] = "thBlue";
			doorConfig.thClasses["HW4EXTRAWING"] = "thBlue";
			doorConfig.thClasses["SWING_HWACCESSORYID"] = "thBlue";
			CYLINDER_Class noCyl = lstCylinders1.Find(x => x.PARTNAME == UiLogic.NameOfNone);  
			lstCylinders1.Remove(noCyl);

		}
		doorConfig.SWINGHASLOCK = (_SwingHasLock ? "Y" : "");
		doorConfig.disabledFlds["HW4EXTRAWING"]  = // 06/07/2022 HW4EXTRAWING is disabled by default !
		doorConfig.disabledFlds["SWING_HWACCESSORYID"] = 
		doorConfig.disabledFlds["LOCKDRILHEIGHT"] = doorConfig.disabledFlds["SWING_HWCOLORID"] = 
		doorConfig.disabledFlds["SWING_DRIL4HW"] = doorConfig.disabledFlds["TRSH_SWING_CYLINDER"] = doorConfig.disabledFlds["SWING_LOCKNAME"] = !_SwingHasLock;
		doorConfig.disabledFlds["SWING_TURBO"] = !_SwingHasLock;   //TODO - check this ?
	}

	DRIL4HW_Class getDril4HalfCylinder()
	{
		foreach (DRIL4HW_Class dril in  PrApiCalls.lstDril4Hw)
		{
			if (dril.DRIL4HWDES.Contains("חצי צילינדר"))
				return dril;
		}
        return null;
    }

    async void IDisposable.Dispose()
    {
		 //if (!UiLogic.tabPageIsFilled("intdecor", doorConfig))
         // {
         //     Js.InvokeVoidAsync("alert", "יש למלא את כל השדות בלשונית 'דקורציה פנים' י");
         // }
         //int x = 17;
         //if (x == 18)
         //{
         //    Js.InvokeVoidAsync("alert", "error !");
         //    //NavigationManager.NavigateTo("Movingwing", true);
         //}
    }
}

<br />
<table>
    <tr>
        <td>
            <div class="tabPageTitle">
                <h1 class="rightLeftMargin">כנף קבועה</h1>
            </div>
        </td>
    </tr>
</table>
<table id="staticWingL1">
        <tr>
			<th>נעילה</th>
            <th id="thExtraWingWidth" @hidden="@UiLogic.hideFld(doorConfig, "thExtraWingWidth")">רוחב כנף</th>
			<th>גובה כנף</th>

            @{
				bool ccw = UiLogic.hideFld(doorConfig, "thCentralColWidth"); 
				ccw = false;		
		    }
		    @if (!ccw) 	
			 { 	<th id="thCentralColWidth" >רוחב עמוד מרכזי</th> }

			<th id="thCentralColClrID" >גוון עמוד מרכזי</th>

			<th>פתיחה</th>
			<th id="thOpenDirection" >צד פתיחה</th>
			           
     @*
			@{	string thCyl = "thCylinder4HalfWing"; }
            <th id="thCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, thCyl)">צילינדר כנף קבועה</th>
	 *@
			@* ref : https://stackoverflow.com/questions/63693734/how-to-show-hide-an-element-in-real-time-blazor *@
	  @*
			
			@{
				bool dew = UiLogic.hideFld(doorConfig, "thDesignedExtraWing");
			}
			@if (!dew)
			{	
				<th id="thDesignedExtraWing" >כנף נוספת מעוצבת</th>
			}
			@{
				bool dww = UiLogic.hideFld(doorConfig, "thDesignedWindowedWing");
			}
			@if (!dew)
			{	
				<th id="thDesignedWindowedWing" >כנף מעוצבת עם חלון</th>
			}
	  *@
        </tr>
        <tr>
			<td>
 			  @{  int i601 = Array.IndexOf(UiLogic.propNames, "SWINGHASLOCK");
				 	<input type="checkbox" name="chkbSwingHasLock" @bind="SwingHasLock"  
				      disabled="@doorConfig.disabledFlds["SWINGHASLOCK"]"
					   	@onfocus="@( () => UiLogic.HasFocus("SWINGHASLOCK", doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i601]]"  
				/>
			}
            @code
			{
				protected bool _SwingHasLock;
				protected bool SwingHasLock
				{
					get
					{
						if (doorConfig != null)
						{
							_SwingHasLock = (doorConfig.SWINGHASLOCK == "Y");
						}
						return _SwingHasLock;
					}
					set
					{
						_SwingHasLock = value;
						if (doorConfig != null)
						{
							applySwingHasLock();
							UiLogic.clearFollowingTabFields(doorConfig, "staticgwing");
                        }
                    }
                }
            }
			</td>

			<td id="tdExtraWingWidth">
				 @{  int i602 = Array.IndexOf(UiLogic.propNames, "EXTRAWINGWIDTH");
					<input type="number"  name="txtExtraWingWidth" @bind="ExtraWingWidth" class= "@doorConfig.borderColors["EXTRAWINGWIDTH"]" 
				    disabled="@doorConfig.disabledFlds["EXTRAWINGWIDTH"]"
				   	@onfocus="@( () => UiLogic.HasFocus("EXTRAWINGWIDTH", doorConfig) )" 
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i602]]"  
					/>
				}
           	@code
			{
				protected int? _ExtraWingWidth = 0;
				protected int? ExtraWingWidth
				{
					get
					{
						if (doorConfig != null && doorConfig.EXTRAWINGWIDTH > 0)
						{
							_ExtraWingWidth = doorConfig.EXTRAWINGWIDTH;
						}
						else
							_ExtraWingWidth = null;

						return _ExtraWingWidth;
					}
					set
					{
						_ExtraWingWidth = value;
						if (doorConfig != null)
						{
							doorConfig.EXTRAWINGWIDTH = (_ExtraWingWidth != null ? (int)_ExtraWingWidth : 0);
							doorConfig.borderColors["EXTRAWINGWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						}
					}
				}
			}
			</td>

			<td id="tdDoorHeight">
     			<input name="txtDoorHeight" type="number" @bind-value="DoorHeight" class="@doorConfig.borderColors["DOORHEIGHT"]" 
				   disabled="@doorConfig.disabledFlds["DOORHEIGHT"]" />
                @code 
				{
			    protected int? _DoorHeight;
                protected int? DoorHeight
                {
                    get
                    {
                        if (doorConfig != null && doorConfig.DOORHEIGHT > 0)
                        {
                            _DoorHeight = doorConfig.DOORHEIGHT;
                        }
                        else
                            _DoorHeight = null;

                        return _DoorHeight; //_DoorHeight.ToString();
                    }
  				    set
                    {
                        _DoorHeight = value;
					}
				}
				}
			</td>

			<td id="tdCentralColWidth" @hidden="@false" >
				 @{  int i603 = Array.IndexOf(UiLogic.propNames, "CENTRALCOLWIDTH");
						<select name="dlstCentralColWidth" @bind="CentralColWidth" class= "@doorConfig.borderColors["CENTRALCOLWIDTH"]" 
					   disabled="@doorConfig.disabledFlds["CENTRALCOLWIDTH"]"
					  	@onfocus="@( () => UiLogic.HasFocus("CENTRALCOLWIDTH", doorConfig) )" 
					  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i603]]"  
						>
							<option>0</option>
							<option>30</option>
							<option>40</option>
						</select>
					}
				</td>
			
			@code
			{
				protected int? _CentralColWidth = 40;
				protected int? CentralColWidth
				{
					get
					{
						if (doorConfig != null)
						{
							_CentralColWidth = doorConfig.CENTRALCOLWIDTH;
						}
						return _CentralColWidth;
					}
					set
					{
						_CentralColWidth = value;
						if (doorConfig != null)
						{
							doorConfig.CENTRALCOLWIDTH = (_CentralColWidth != null ? (int)_CentralColWidth : 0);
							doorConfig.borderColors["CENTRALCOLWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                  config4.RefreshState();
							
						}
					}
				}
			}
			<td id="tdCentralColClrID" >
                <input name="dlstCentralColClrID" @bind="CentralColClrDes" class= "@doorConfig.borderColors["CENTRALCOLCLRID"]"  
				   disabled="@doorConfig.disabledFlds["CENTRALCOLCLRID"]"
				/>
                    
                
            </td>
            @code
            {
	            protected int _CentralColClrID = 0;
				protected string _CentralColClrDes = string.Empty;
	            protected string CentralColClrDes
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _CentralColClrID = doorConfig.CENTRALCOLCLRID;
			            }
			            return PrApiCalls.getColorDes(_CentralColClrID);
		            }
		            set
		            {
			            _CentralColClrDes = value;
		            }
	            }
            }
            
		
				<td id="tdOpenMode">
                        <input name="dlstOpenMode" @bind="openMode" class="@doorConfig.borderColors["OPENMODE"]" 
						  disabled="@doorConfig.disabledFlds["OPENMODE"]" />

            @code
            {
                protected string _openMode = string.Empty;
                protected string openMode
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openMode = doorConfig.OPENMODE;
                        }
                        return _openMode;
                    }
                    set
                    {
                        _openMode = value;
                    }
                }
            }
        
			</td>

		    <td id="tdOpenDirection" >
                <input name="txtOpenDirection"   @bind="OpenDirection"  class="@doorConfig.borderColors["OPENSIDE"]"   
				   disabled="@doorConfig.disabledFlds["OPENSIDE"]"   /> 
            </td>
            @code
            {
	            protected string _OpenDirection = string.Empty;
	            protected string OpenDirection
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _OpenDirection = (doorConfig.OPENSIDE == "ימין" ? "שמאל" : "ימין");
			            }
			            return _OpenDirection;
		            }
		            set
		            {
			            _OpenDirection = value;
		            }
	            }
            }
        </tr>

           @* end of StaticwingL1 *@
		   </table>
           <!--end table staticWingL1 -->

		   <table id="staticWingL2">
            <tr>
		    <th>גוון כנף קבועה</th>
			<th>גוון חוץ כנף קבועה</th>
			<th>גוון פנים כנף קבועה</th>
			<th class="@doorConfig.thClasses["LOCKDRILHEIGHT"]" >גובה ניקוב</th>

			@{	string thCyl = "thCylinder4HalfWing"; }
            <th id="thCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, thCyl)" class= "@doorConfig.thClasses["TRSH_SWING_CYLINDER"]" >צילינדר כנף קבועה</th>

			@{ 	bool hw4 = UiLogic.hideFld(doorConfig, "thHW4ExtraWing"); 	}
			@if (!hw4)
			{
				<th id="thHW4ExtraWing" class="@doorConfig.thClasses["HW4EXTRAWING"]">פרזול כנף קבועה</th>
			}
			<th class="@doorConfig.thClasses["SWING_HWACCESSORYID"]" >נילווים לפירזול כ. ק.</th>
			<th class="@doorConfig.thClasses["SWING_HWCOLORID"]">צבע פירזול</th>
			
			</tr>
			<tr>
				<td id="thSwingColorId">
					<input name="txtSwingColorID"  @bind="SwingColorDes"  class="@doorConfig.borderColors["DOORCOLORID"]"   
					  disabled="@doorConfig.disabledFlds["DOORCOLORID"]"  /> 

					@code 
					{
						protected int _SwingColorID = 0;
						protected string _SwingColorDes = string.Empty;
						protected string SwingColorDes
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingColorID = doorConfig.DOORCOLORID;
								}
								return PrApiCalls.getColorDes(_SwingColorID);
							}
							set
							{
								_SwingColorDes = value;
							}
						}
					}
				</td>
				<td>
					<input name="txtSwingExtColorID"   @bind="SwingExtColorDes"  class="@doorConfig.borderColors["EXTCOLORID"]"   
					   disabled="@doorConfig.disabledFlds["EXTCOLORID"]"
					/> 
					@code 
					{
						protected int _SwingExtColorID = 0;
						protected string _SwingExtColorDes = string.Empty;
						protected string SwingExtColorDes
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingExtColorID = doorConfig.EXTCOLORID;
								}
								return PrApiCalls.getColorDes(_SwingExtColorID);
							}
							set
							{
								_SwingExtColorDes = value;
							}
						}
					}
				</td>
				<td>
					<input name="txtSwingIntColorID"   @bind="SwingIntColorDes"  class="@doorConfig.borderColors["INTCOLORID"]"   
					   disabled="@doorConfig.disabledFlds["INTCOLORID"]"
					/> 
					@code 
					{
				protected int _SwingIntColorID = 0;
				protected string _SwingIntColorDes = string.Empty;
				protected string SwingIntColorDes
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingIntColorID = doorConfig.INTCOLORID;
								}
								return PrApiCalls.getColorDes(_SwingIntColorID);
							}
							set
							{
								_SwingIntColorDes = value;
							}
						}
					}
				</td>
				<td>
					@*   height of Dril4Lock  Read Only it's identical to doorConfig.LOCKDRILHEIGHT which is set in movingwing. Because Lock Drill Heights on all wings 
						              should be identical *@
					<input name="txtSwing_LockDrilHeight"   @bind="Swing_LockDrilHeight"  class="@doorConfig.borderColors["SWING_LOCKDRILHEIGHT"]"  
					   disabled="@doorConfig.disabledFlds["SWING_LOCKDRILHEIGHT"]"
					/> 
					@code 
					{
						protected int _Swing_LockDrilHeight = 0;
						protected int Swing_LockDrilHeight
						{
							get
							{
								if (doorConfig != null)
								{
									_Swing_LockDrilHeight = doorConfig.LOCKDRILHEIGHT;
								}
								return _Swing_LockDrilHeight;
							}
							set
							{
								_Swing_LockDrilHeight = value;
							}
						}
					}
				</td>
			  
				<td id="tdCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, "thCylinder4HalfWing")">
				 @{  int i604 = Array.IndexOf(UiLogic.propNames, "TRSH_SWING_CYLINDER");
					<select name="dlstCylinder4HalfWing" @bind="Cylinder4HalfWing" class= "@doorConfig.borderColors["TRSH_SWING_CYLINDER"]" 
				 disabled="@doorConfig.disabledFlds["TRSH_SWING_CYLINDER"]"
				  	@onfocus="@( () => UiLogic.HasFocus("TRSH_SWING_CYLINDER", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i604]]"  >
					 	@if (lstCylinders1 != null)
					 {
							@foreach (CYLINDER_Class c in lstCylinders1)
						{
								<option value="@c.TRSH_CYLINDER">@c.PARTDES</option>
						}
					}
					</select>
				}
            </td>
            @code
		{
			protected int _Cylinder4HalfWing = 0;
			protected int Cylinder4HalfWing
			{
				get
				{
					if (doorConfig != null)
					{
						_Cylinder4HalfWing = doorConfig.TRSH_SWING_CYLINDER;
					}
					return _Cylinder4HalfWing;
				}
				set
				{
					_Cylinder4HalfWing = value;
					if (doorConfig != null)
					{
						doorConfig.TRSH_SWING_CYLINDER = _Cylinder4HalfWing;
						doorConfig.borderColors["TRSH_SWING_CYLINDER"] = (value != 0  ? "blueBorder" : "redBorder");
						if (PrApiCalls.cylinderIsHalf(doorConfig.TRSH_SWING_CYLINDER))
						{
							// if the user selected 1/2 Cylinder the folowing two fields are emptied and disabled !
							doorConfig.HW4EXTRAWING = 0;
							doorConfig.SWING_HWCOLORID = 0;
							doorConfig.disabledFlds["HW4EXTRAWING"] = doorConfig.disabledFlds["SWING_HWCOLORID"] = doorConfig.disabledFlds["SWING_DRIL4HW"] = true;

							// as HW4EXTRAWING is ZERO (empty) , make lstD4HW1 a list with a single element and this element is 
							//  the value in SWING_DRIL4HW
							lstD4HW1 = new List<DRIL4HW_Class>();
							DRIL4HW_Class dril4HalfCyl = getDril4HalfCylinder();
							lstD4HW1.Add(dril4HalfCyl);
							doorConfig.SWING_DRIL4HW = dril4HalfCyl.DRIL4HW;
						}
						else
						{
							//doorConfig.disabledFlds["HW4EXTRAWING"] =    // 06/07/2022 HW4EXTRAWING is disabled by default  !
							doorConfig.disabledFlds["SWING_HWCOLORID"] = false;
							doorConfig.disabledFlds["SWING_DRIL4HW"] = false;
							doorConfig.HW4EXTRAWING = (doorConfig.HW4EXTRAWING == 0 ? doorConfig.TRSH_HARDWARE : doorConfig.HW4EXTRAWING );
							doorConfig.SWING_HWCOLORID = (doorConfig.SWING_HWCOLORID == 0 ? doorConfig.HWCOLORID : doorConfig.SWING_HWCOLORID);
							//find the SWING_DRIL4HW that is associated with HW4EXTRAWING
							setSWING_DRIL4HW();

							}
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
							 if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                  config4.RefreshState();
						}
					}
				}
			}
				
				<td id="dlstHW4EXTRAWING" >  
					@* HW4EXTRAWING *@
					 @{  int i605 = Array.IndexOf(UiLogic.propNames, "HW4EXTRAWING");
						<select name="dlstHw" @bind="Hw4ExtraWing" class="@doorConfig.borderColors["HW4EXTRAWING"]" 
					        disabled="@doorConfig.disabledFlds["HW4EXTRAWING"]"
								@onfocus="@( () => UiLogic.HasFocus("HW4EXTRAWING", doorConfig) )" 
								@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
							 onkeypress="@doorConfig.KeyPressHandler" 
							 	@ref="doorConfig.dicRefs[UiLogic.propNames[i605]]" >
						@{
							string errMsg = string.Empty;
							//List<TRSH_HARDWARE_Class> lstPartHWs = PrApiCalls.getDoorHWs(doorConfig.TRSH_DOOR_HWCATCODE, ref errMsg);
							 List<CYLHW_Class> lstCylHws1 = PrApiCalls.getCYLHWs1(doorConfig.TRSH_CYLINDER, doorConfig.OPENSIDE, ref errMsg);
							 if (doorConfig.TRSH_MODELNAME == "MLI")   //hardcode for MLI 06/07/2022
							{
								CYLHW_Class CHw1 = lstCylHws1.Find(x => x.PARTDESHW == "ללא" );
								lstCylHws1.Remove(CHw1);
							}
							if (lstCylHws1 != null)
							{
								@foreach (CYLHW_Class c in lstCylHws1)
								{
											<option value="@c.TRSH_HARDWARE">@c.PARTDESHW</option>
								}
							}
						}
					</select>
				}
				@code
			{
				protected int _Hw4ExtraWing = 0;
				protected int Hw4ExtraWing
				{
					get
					{
						if (doorConfig != null)
						{
							_Hw4ExtraWing = PrApiCalls.getOpposite_TRSH_HARDWARE(doorConfig.HW4EXTRAWING);
						}
						return _Hw4ExtraWing;
					}
					set
					{
						_Hw4ExtraWing = value;
						if (doorConfig != null)
						{
							doorConfig.HW4EXTRAWING = _Hw4ExtraWing;
							setSWING_DRIL4HW();
						    @*if (doorConfig.HW4EXTRAWING == UiLogic.IdOfNone) // ללא   
                            {
                                doorConfig.disabledFlds["SWING_HWCOLORID"] = true;
                                doorConfig.SWING_HWCOLORID = 0;
                                // 18/06/2022 - when HARWARE is ללא DRIL4HW showuld be ENABLED !
                                //  therefore commented the three lines below.
                                // doorConfig.disabledFlds["DRIL4HW"] = true;
                                // doorConfig.DRIL4HW = 0;
                                // doorConfig.borderColors["DRIL4HW"] = doorConfig.borderColors["HWCOLORID"] = string.Empty;
                                lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();  // the full list of Drills for Hardwares
                                return;
                            }
                            else
                            {
                               // doorConfig.borderColors["HW4EXTRAWING"] = (value != 0 ? "blueBorder" : "redBorder");  // it's OPTIONAL 
                                //doorConfig.DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
								doorConfig.SWING_DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
                                // populate the LOV for Dril4Hw based on Hardware selected .
                                string errMsg = string.Empty;
                                lstD4HW1 = PrApiCalls.getDril4Hw1(doorConfig.HW4EXTRAWING, ref errMsg);

                                //doorConfig.borderColors["SWING_DRIL4HW"] = (doorConfig.DRIL4HW != 0 ? "blueBorder" : "redBorder");
                                UiLogic.clearFollowingTabFields(doorConfig, "staticwing");

                                doorConfig.disabledFlds["SWING_HWCOLORID"] = !PrApiCalls.isHWColored(value);
                                doorConfig.borderColors["SWING_HWCOLORID"] = (doorConfig.disabledFlds["SWING_HWCOLORID"] || doorConfig.HWCOLORID != 0 ? "blueBorder" : "redBorder");
                                if (doorConfig.disabledFlds["SWING_HWCOLORID"])
                                    doorConfig.SWING_HWCOLORID = 0;   //clear the HWCOLORID field if it's disabled.
                            }*@
                        }
                    }
                }
            }
		  </td>

     	  @code	{
			protected void setSWING_DRIL4HW()
			{
				if (doorConfig.HW4EXTRAWING == UiLogic.IdOfNone) // ללא   
				{
					doorConfig.disabledFlds["SWING_HWACCESSORYID"] = true;
					doorConfig.SWING_HWACCESSORYID = 0;
					doorConfig.disabledFlds["SWING_HWCOLORID"] = true;
					doorConfig.SWING_HWCOLORID = 0;
					
					// 18/06/2022 - when HARWARE is ללא DRIL4HW should be ENABLED !
					//  therefore commented the three lines below.
					// doorConfig.disabledFlds["DRIL4HW"] = true;
					// doorConfig.DRIL4HW = 0;
					// doorConfig.borderColors["DRIL4HW"] = doorConfig.borderColors["HWCOLORID"] = string.Empty;
					lstD4HW1 = PrApiCalls.lstDril4Hw.ToList();  // the full list of Drills for Hardwares
					return;
				}
				else
				{
					// doorConfig.borderColors["HW4EXTRAWING"] = (value != 0 ? "blueBorder" : "redBorder");  // it's OPTIONAL 
					//doorConfig.DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
					doorConfig.SWING_DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
					// populate the LOV for Dril4Hw based on Hardware selected .
					string errMsg = string.Empty;
					lstD4HW1 = PrApiCalls.getDril4Hw1(doorConfig.HW4EXTRAWING, ref errMsg);
					foreach (DRIL4HW_Class d4hw in lstD4HW1)
					{
						if (d4hw.DRIL4HWDES.Contains("IDS") && d4hw.DRIL4HW != doorConfig.SWING_DRIL4HW) 
						{
							lstD4HW1.Remove(d4hw);  //07/07/2022 - Eli asked: on staticwing : if Dril4HW is IDS - the LOV should contain a single element ONE SIDE IDS Dril !
							break;  // this can be done only once Otherwise we'll get an error on the foreach statement - the collection lstD4HW1 was changed and the foreach 
							        //   crashed and cannot continue.
						}


					}

                    //doorConfig.borderColors["SWING_DRIL4HW"] = (doorConfig.DRIL4HW != 0 ? "blueBorder" : "redBorder");
                    //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");

                    doorConfig.disabledFlds["SWING_HWCOLORID"] = !PrApiCalls.isHWColored(_Hw4ExtraWing);
                    doorConfig.borderColors["SWING_HWCOLORID"] = (doorConfig.disabledFlds["SWING_HWCOLORID"] || doorConfig.HWCOLORID != 0 ? "blueBorder" : "redBorder");
                    if (doorConfig.disabledFlds["SWING_HWCOLORID"])
                        doorConfig.SWING_HWCOLORID = 0;   //clear the HWCOLORID field if it's disabled.
                }
			}
		   }
		      
		   @* SWING_HWACCESSORYID   new 12/07/2022 *@
		   <td>
		   @{  int i617 = Array.IndexOf(UiLogic.propNames, "SWING_HWACCESSORYID");
             <select name="dlstHw2" @bind="HwAccessoryId" class="@doorConfig.borderColors["SWING_HWACCESSORYID"]" 
                    disabled="@doorConfig.disabledFlds["SWING_HWACCESSORYID"]"
                        @onfocus="@( () => UiLogic.HasFocus("SWING_HWACCESSORYID", doorConfig) )" 
                        @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                    onkeypress="@doorConfig.KeyPressHandler" 
                        @ref="doorConfig.dicRefs[UiLogic.propNames[i617]]" >
                    @{
                        if (PrApiCalls.lstHwAccessories != null)
                        {
                            string HwColored = PrApiCalls.getHardware1(doorConfig.HW4EXTRAWING).COLORED;
                            @foreach (HWACCESSORY_Class hwa in PrApiCalls.lstHwAccessories)
                            {
                                if (hwa.COLORED == HwColored)
                                {
                                    <option value="@hwa.HWACCESSORYID">@hwa.HWACCESSORYDES</option>
                                }
                            }
                        }
                    }
                    </select>
                    }
					 @code
                    {
                        protected int _HwAccessoryId;
                        protected int HwAccessoryId
                        {
                            get
                            {
                                if (doorConfig != null)
                                {
                                    _HwAccessoryId = doorConfig.SWING_HWACCESSORYID;
                                }
                                return _HwAccessoryId;
                            }
                            set
                            {
                                _HwAccessoryId = value;
                                if (doorConfig != null)
                                {
                                    doorConfig.SWING_HWACCESSORYID = _HwAccessoryId;
                                    doorConfig.borderColors["SWING_HWACCESSORYID"] = (value != 0 ? "blueBorder" : "redBorder");
                                }
                            }
                        }
                    }
        </td>
		   @* end SWING_HWACCESSORYID *@
			
		@{
            List<TRSH_COLOR_Class> tmpLstColors = new List<TRSH_COLOR_Class>(PrApiCalls.lstColors);
            tmpLstColors.Insert(1, new TRSH_COLOR_Class() { TRSH_COLORID = 99999, PARTDES = "ללא"  });
            //DataTable tmpDtColors = new DataTable();
            //tmpDtColors = tmpLstColors.ToDataTable<TRSH_COLOR_Class>();
        }
        <td>
            @{  int i606 = Array.IndexOf(UiLogic.propNames, "SWING_HWCOLORID");
				<select name="dlstSwing_HwColor" @bind="Swing_HwColorId" class="@doorConfig.borderColors["SWING_HWCOLORID"]"  
                 disabled="@doorConfig.disabledFlds["SWING_HWCOLORID"]"  
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HWCOLORID", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i606]]" >
					@if (PrApiCalls.lstColors != null)
                {
						@foreach (TRSH_COLOR_Class c in  tmpLstColors) //PrApiCalls.lstColors)
                    {
							<option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
				</select>
            }
			</td>
			@code
        {
            protected int _Swing_HwColorId = 0;
            protected int Swing_HwColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Swing_HwColorId = doorConfig.SWING_HWCOLORID;
                    }
                    return _Swing_HwColorId;
                }
                set
                {
                    _Swing_HwColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.SWING_HWCOLORID = _Swing_HwColorId;
                        //doorConfig.borderColors["SWING_HWCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");
                        //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                    }
                }
            }
        }
			
			</tr>
			</table>
			<!-- end of table StaticwingL2-->
			<table id="StaticwingL3">
			<tr>
				
				<th class="@doorConfig.thClasses["SWING_DRIL4HW"]">ניקוב לפירזול</th>
				<th class= "@doorConfig.thClasses["SWING_TURBO"]" >מנגנון תגבור</th>
				<th>לוגו</th>
				<th class="@doorConfig.thClasses["SWING_LOCKNAME"]">מנעול</th>
				<th>ידית אומנותית</th>
				<th>צבע ידית אומנותית</th>
				<th>אוורור</th>

			@*	@{ bool rsw = UiLogic.hideFld(doorConfig, "thRafafaOnStaticWing"); }
				@if (!rsw) 	{ <th id="thRafafaOnStaticWing" >רפפת עשן</th> 	}
			*@
			    <th id="thRafafaOnStaticWing" >רפפת עשן</th>
				<th>פתח לחתול</th>
		    </tr>

			<tr>

				<td id="tdSwing_Dril4Hw">
				@* SWING_DRIL4HW *@
				@{  int i607 = Array.IndexOf(UiLogic.propNames, "SWING_DRIL4HW");
				<select name="dlstSwing_Dril4Hw" @bind="Swing_Dril4Hw" class="@doorConfig.borderColors["SWING_DRIL4HW"]"
              disabled="@doorConfig.disabledFlds["SWING_DRIL4HW"]" 
			  	@onfocus="@( () => UiLogic.HasFocus("SWING_DRIL4HW", doorConfig) )" 
			  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i607]]" >

					@* @if (PrApiCalls.lstDril4Hw != null)  *@
					@if (lstD4HW1 != null)
                {
						@* @foreach (DRIL4HW_Class c in PrApiCalls.lstDril4Hw) *@
						@foreach (DRIL4HW_Class c in lstD4HW1)
                    {
							<option value="@c.DRIL4HW">@c.DRIL4HWDES</option>
                    }
                }
				</select>
            }
			</td>
			@code
			{
				protected int _Swing_Dril4Hw = 0;
				protected int Swing_Dril4Hw
				{
					get
					{
						if (doorConfig != null)
						{
							_Swing_Dril4Hw = doorConfig.SWING_DRIL4HW;
						}
						return _Swing_Dril4Hw;
					}
					set
					{
						_Swing_Dril4Hw = value;
						if (doorConfig != null)
						{
							doorConfig.SWING_DRIL4HW = _Swing_Dril4Hw;
							//doorConfig.borderColors["DRIL4HW"] = (value != 0 ? "blueBorder" : "redBorder");
							//UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
						}
					}
				}
			}

            <td id="tdSwing_Turbo" class="@doorConfig.thClasses["SWING_TURBO"]" >
			@{  int i613 = Array.IndexOf(UiLogic.propNames, "SWING_TURBO");
				<input type="checkbox" name="chkbSwing_Turbo" @bind="Swing_Turbo"  
			   disabled="@doorConfig.disabledFlds["SWING_TURBO"]"
			   	@onfocus="@( () => UiLogic.HasFocus("SWING_TURBO", doorConfig) )"
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i613]]" 
				/>
			}
            @code
            {
                protected bool _Swing_Turbo = false;
                protected bool Swing_Turbo
                {
                    get
                    {
                        if (doorConfig != null)
                        {
							//doorConfig.SWING_TURBO = (doorConfig.TRSH_ELIDOOR_LOGO == 1 ? "Y" : string.Empty);  // new 11/07/2022 
                            _Swing_Turbo = (doorConfig.SWING_TURBO == "Y");
							  
                        }
                        return _Swing_Turbo;
                    }
                    set
                    {
                        _Swing_Turbo = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_TURBO = (_Swing_Turbo ? "Y" : "");
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                        }
                    }
                }
            }
        </td>

        <td id="tdLogo" class="@doorConfig.thClasses["LOGO"]">
            <input type="checkbox" name="chkbLogo" @bind="Logo" 
				disabled="@doorConfig.disabledFlds["LOGO"]"	 />
            @code
            {
                protected bool _Logo = false;
                protected bool Logo
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Logo = (doorConfig.LOGO == "Y");  //copied from movingwing !
                        }
                        return _Logo;
                    }
                    set
                    {
                        _Logo = value;
                        if (doorConfig != null)
                        {
                            doorConfig.LOGO = (_Logo ? "Y" : "");   // note: we change here also the LOGO field in movingwing !
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                        }
                    }
                }

            }
        </td>
        
        <td id="tdLock"  class="@doorConfig.thClasses["SWING_LOCKNAME"]">
            @{  int i608 = Array.IndexOf(UiLogic.propNames, "SWING_LOCKNAME");
				<select name="dlstLock" @bind="Lock" class="@doorConfig.borderColors["SWING_LOCKNAME"]" 
			     disabled="@doorConfig.disabledFlds["SWING_LOCKNAME"]"
				 	@onfocus="@( () => UiLogic.HasFocus("SWING_LOCKNAME", doorConfig) )"
				 	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i608]]"  >
					@{
                    List<TRSH_LOCK_Class> lstPartLocks = PrApiCalls.getPartAndLogoLocks(doorConfig.TRSH_DOOR_HWCATCODE, doorConfig.LOGO, ref errMsg);
                    if (lstPartLocks != null)
                    {
								@foreach (TRSH_LOCK_Class c in lstPartLocks)
                        {
									<option value="@c.PARTNAME">@c.PARTDES</option>
                        }
                    }
					}
				</select>
            }
        </td>
        @code {
            protected string _Lock = string.Empty;
            protected string Lock
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Lock = doorConfig.SWING_LOCKNAME;
                    }
                    return _Lock;
                }
                set
                {
                    _Lock = value;
                    if (doorConfig != null)
                    {
                        doorConfig.SWING_LOCKNAME = _Lock;
                        //doorConfig.borderColors["SWING_LOCKNAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                        //UiLogic.clearFollowingTabFields(doorConfig, "staticgwing");
                        if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                  config4.RefreshState();
                    }
                }
            }
        }

		<td>
			@* handle 4 static wing   new *@
			 @{  int i609 = Array.IndexOf(UiLogic.propNames, "SWING_HANDLENAME");
					<select name="dlstHandle" @bind="Swing_Handle" class="@doorConfig.borderColors["SWING_HANDLENAME"]" 
				  disabled="@doorConfig.disabledFlds["SWING_HANDLENAME"]"	
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HANDLENAME", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i609]]"  >
						@if (PrApiCalls.lstHandles != null)
                    {
							@foreach (HANDLE_Class c in PrApiCalls.lstHandles)
                        {
								<option value="@c.PARTNAME">@c.PARTDES</option>
                        }
                    }
					</select>
                }
           
                @code
                {
                protected string _Swing_Handle = string.Empty;
                protected string Swing_Handle
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Swing_Handle = doorConfig.SWING_HANDLENAME;
                        }
                        return _Swing_Handle;
                    }
                    set
                    {
                        _Swing_Handle = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_HANDLENAME = _Swing_Handle;
                            // Handle is a Required field independent of the HASLOCK flag ! 07/07/2022
                            doorConfig.borderColors["SWING_HANDLENAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
							 doorConfig.disabledFlds["SWING_HANDLECOLORID"] = (   doorConfig.HANDLENAME == UiLogic.NameOfNone 
                                                                        || !PrApiCalls.isHandleColored(doorConfig.SWING_HANDLENAME));
                            if (doorConfig.disabledFlds["SWING_HANDLECOLORID"])
                                doorConfig.SWING_HANDLECOLORID = 0;


                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                             if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                       config4.RefreshState();
                        }
                    }
                }
            }
		</td>
		<td>
			 @{  int i614 = Array.IndexOf(UiLogic.propNames, "SWING_HANDLECOLORID");
					<select name="dlstSwingHandleColorID"  @bind="Swing_HandleColorID"  class= "@doorConfig.borderColors["SWING_HANDLECOLORID"]"
					disabled="@doorConfig.disabledFlds["SWING_HANDLECOLORID"]"	
				  	@onfocus="@( () => UiLogic.HasFocus("SWING_HANDLECOLORID", doorConfig) )" 
				  	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i614]]" 
					>
						@if (PrApiCalls.lstColors != null)
					{
							@foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
						{
								<option value="@c.TRSH_COLORID">@c.PARTDES</option>
						}
					}
					</select>
				}
		</td>
		@code
        {
	        protected int _Swing_HandleColorID = 0;
	        protected int Swing_HandleColorID
	        {
		        get
		        {
			        if (doorConfig != null)
			        {
				        _Swing_HandleColorID = doorConfig.SWING_HANDLECOLORID;
			        }
			        return _Swing_HandleColorID;
		        }
		        set
		        {
			        _Swing_HandleColorID = value;
			        if (doorConfig != null)
                    {
				        doorConfig.SWING_HANDLECOLORID = _Swing_HandleColorID;
                        doorConfig.borderColors["SWING_HANDLECOLORID"] = (value != 0  ? "blueBorder" : "redBorder");
                        //UiLogic.clearFollowingTabFields(doorConfig, "handle");
						if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                    }
		        }
	        }
        }

		<td class="@doorConfig.thClasses["SWING_VENTS"]" >
			@* Vent 4 static wing new *@
			@{  int i610 = Array.IndexOf(UiLogic.propNames, "SWING_VENTS");
				<select name="dlstVents" @bind="Vents" class="@doorConfig.borderColors["SWING_VENTS"]" 
			 disabled="@doorConfig.disabledFlds["SWING_VENTS"]"
			 	@onfocus="@( () => UiLogic.HasFocus("SWING_VENTS", doorConfig) )" 
			 	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i610]]" >
					<option></option>
                    <option>ללא</option>
                    <option>סט 1 תחתון</option>
                    <option>סט 1 עליון</option>
                    <option>שני סטים, עליון ותחתון</option>
                    <option>כל הדלת</option>
				</select>
            }
            @code
            {
                protected string _Vents = string.Empty;
                protected string Vents
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Vents = doorConfig.SWING_VENTS;
                        }
                        return _Vents;
                    }
                    set
                    {
                        _Vents = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_VENTS = _Vents;
                           // doorConfig.borderColors["VENTS"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
		</td>

		<td id="tdRafafaOnStaticWing"  class="@doorConfig.thClasses["RAFAFAONSTATICWING"]">
               @{  int i611 = Array.IndexOf(UiLogic.propNames, "RAFAFAONSTATICWING");
				<select name="dlstRafafa" @bind="Rafafa" class="@doorConfig.borderColors["RAFAFAONSTATICWING"]" 
			    disabled="@doorConfig.disabledFlds["RAFAFAONSTATICWING"]"
					@onfocus="@( () => UiLogic.HasFocus("RAFAFAONSTATICWING", doorConfig) )" 
					@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i611]]" >
					<option></option>
                    <option>ללא</option>
                    <option>סט 1 תחתון</option>
                    <option>סט 1 עליון</option>
                    <option>שני סטים, עליון ותחתון</option>
                    <option>כל הדלת</option>
				</select>
            }
			 @code
            {
                protected string _Rafafa = string.Empty;
                protected string Rafafa
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Rafafa = doorConfig.RAFAFAONSTATICWING;
                        }
                        return _Rafafa;
                    }
                    set
                    {
                        _Rafafa = value;
                        if (doorConfig != null)
                        {
                            doorConfig.RAFAFAONSTATICWING = _Rafafa;
                            //doorConfig.borderColors["RAFAFAONMOVINGWING"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            //UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            
							if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                            
                            //debug
                            
                            // ref : https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
                            // the 2nd answer : Update Parent State by calling it's StateHasChanged method

                               // doorConfig.btnClasses["hinges"] = "buttonActive";
                               // config4.RefreshState();
                            // end debug 
                        }
                    }
                }
            }
        </td>
			
		<td id="tdCatDoor" class="@doorConfig.thClasses["SWING_CATDOOR"]">
			@* Cat door 4 static wing - new *@
			@{  int i612 = Array.IndexOf(UiLogic.propNames, "SWING_CATDOOR");
					<input type="checkbox" name="chkbCatDoor" @bind="CatDoor"
				   disabled="@doorConfig.disabledFlds["SWING_CATDOOR"]"
				   	@onfocus="@( () => UiLogic.HasFocus("SWING_CATDOOR", doorConfig) )"
				   	@onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
					 	@ref="doorConfig.dicRefs[UiLogic.propNames[i612]]"  />
            }
            @code
            {
                protected bool _CatDoor = false;
                protected bool CatDoor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _CatDoor = (doorConfig.SWING_CATDOOR == "Y");
                        }
                        return _CatDoor;
                    }
                    set
                    {
                        _CatDoor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.SWING_CATDOOR = (_CatDoor ? "Y" : "N" );
                            //doorConfig.borderColors["CATDOOR"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                            if (UiLogic.try2UpdateBtnClass(doorConfig, "staticwing"))
                                   config4.RefreshState();
                        }
                    }
                }
            }
		</td>
            
        </tr>
    </table>
    <!-- end table staticWingL3 -->
 