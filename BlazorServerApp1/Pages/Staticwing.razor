@using BlazorServerApp1.Data
@using System.Data;

@page "/Staticwing"

@inject IJSRuntime Js

@implements IDisposable

@inject NavigationManager Navigator


@code
{
    [Parameter]
    public DoorConfig doorConfig { get; set; }

    //[Parameter]
    //public bool ExtdecorIsFull { get; set; }

	[Parameter]
    public Configurator4 config4 { get; set; }
}

@code {

	private DataTable dtTabFlds = new DataTable();

	protected override async Task OnInitializedAsync()
	{

		//if (!ExtdecorIsFull)
		//{
		//    // navigate back to Movingwing 
		//    //[TODO]  Navigator.NavigateTo("Movingwing");
		//}

		//if (!UiLogic.tabPageIsFilled("intdecor", doorConfig))
		//{
		//   Js.InvokeVoidAsync("alert", "יש למלא את כל השדות בלשונית 'דקורציה פנים' י");
		//}

		//var doorConfigJsonV = await ProtectedSessionStore.GetAsync<string> ("doorConfigJson");
		//if (doorConfigJsonV.Success)
		//{
		//    string doorConfigJson2 = doorConfigJsonV.Value;
		//    if (!string.IsNullOrEmpty(doorConfigJson2))
		//         doorConfig = Newtonsoft.Json.JsonConvert.DeserializeObject<DoorConfig>(doorConfigJson2);
		//UiLogic.restoreDoorConfig(ProtectedSessionStore, doorConfig);          

		//Js.InvokeVoidAsync("alert", string.Format("in Extdecor:onInitializedAsync doorConfig.EXTCOLORID = {0}", doorConfig.EXTCOLORID));  //debug
		string errMsg = string.Empty;
		dtTabFlds = UiLogic.getTabFields("staticwing", doorConfig, ref errMsg);
		doorConfig.disabledFlds["DOORHEIGHT"] = doorConfig.disabledFlds["CENTRALCOLCLRID"] = doorConfig.disabledFlds["OPENMODE"] =
		doorConfig.disabledFlds["OPENSIDE"] =  doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] =
		doorConfig.disabledFlds["LOCKDRILHEIGHT"] = doorConfig.disabledFlds["TURBOAPPARATUS"] = doorConfig.disabledFlds["LOGO"] = true;
		calcCentralColClrID(doorConfig);
	}
	void calcCentralColClrID(DoorConfig doorConfig)
	{
		switch (doorConfig.COLORSNUM)
		{
			case "מגולוון" :
			case "1":
				doorConfig.CENTRALCOLCLRID = doorConfig.DOORCOLORID;
				break;
			case "2":
				doorConfig.CENTRALCOLCLRID = (doorConfig.OPENMODE == "פנימה" ? doorConfig.INTCOLORID : doorConfig.EXTCOLORID);
				break;
		}
	}
    
    
    async void IDisposable.Dispose()
    {
		 //if (!UiLogic.tabPageIsFilled("intdecor", doorConfig))
         // {
         //     Js.InvokeVoidAsync("alert", "יש למלא את כל השדות בלשונית 'דקורציה פנים' י");
         // }
         //int x = 17;
         //if (x == 18)
         //{
         //    Js.InvokeVoidAsync("alert", "error !");
         //    //NavigationManager.NavigateTo("Movingwing", true);
         //}
    }
}

<br />
<table>
    <tr>
        <td>
            <div class="tabPageTitle">
                <h1 class="rightLeftMargin">כנף קבועה</h1>
            </div>
        </td>
    </tr>
</table>
<table id="staticWingL1">
        <tr>
			<th>נעילה</th>
            <th id="thExtraWingWidth" @hidden="@UiLogic.hideFld(doorConfig, "thExtraWingWidth")">רוחב כנף</th>
			<th>גובה כנף</th>

            @{
				bool ccw = UiLogic.hideFld(doorConfig, "thCentralColWidth"); 
				ccw = false;		
		    }
		    @if (!ccw) 	
			 { 	<th id="thCentralColWidth" >רוחב עמוד מרכזי</th> }

			<th id="thCentralColClrID" >גוון עמוד מרכזי</th>

			<th>פתיחה</th>
			<th id="thOpenDirection" >צד פתיחה</th>
			           
     @*
			@{	string thCyl = "thCylinder4HalfWing"; }
            <th id="thCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, thCyl)">צילינדר כנף קבועה</th>
	 *@
			@* ref : https://stackoverflow.com/questions/63693734/how-to-show-hide-an-element-in-real-time-blazor *@
	  @*
			
			@{
				bool dew = UiLogic.hideFld(doorConfig, "thDesignedExtraWing");
			}
			@if (!dew)
			{	
				<th id="thDesignedExtraWing" >כנף נוספת מעוצבת</th>
			}
			@{
				bool dww = UiLogic.hideFld(doorConfig, "thDesignedWindowedWing");
			}
			@if (!dew)
			{	
				<th id="thDesignedWindowedWing" >כנף מעוצבת עם חלון</th>
			}
	  *@
        </tr>
        <tr>
			<td>
 			  @{  int i601 = Array.IndexOf(UiLogic.propNames, "SWINGHASLOCK");
				 <input type="checkbox" name="chkbSwingHasLock" @bind="SwingHasLock"  
                       @onfocus="@( () => UiLogic.HasFocus("SWINGHASLOCK", doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
                     @ref="doorConfig.dicRefs[UiLogic.propNames[i601]]"  
            />
			}
            @code
			{
				protected bool _SwingHasLock = false;
				protected bool SwingHasLock
				{
					get
					{
						if (doorConfig != null)
						{
							_SwingHasLock = (doorConfig.SWINGHASLOCK == "Y");
						}
						return _SwingHasLock;
					}
					set
					{
						_SwingHasLock = value;
						if (doorConfig != null)
						{
							doorConfig.SWINGHASLOCK = (_SwingHasLock ? "Y" : "");
							doorConfig.disabledFlds["HW4EXTRAWING"] = doorConfig.disabledFlds["SWING_HWCOLORID"] = doorConfig.disabledFlds["SWING_DRIL4HW"] =
										!_SwingHasLock;
							UiLogic.clearFollowingTabFields(doorConfig, "staticgwing");
                        }
                    }
                }
            }
			</td>

			<td id="tdExtraWingWidth">
				 @{  int i602 = Array.IndexOf(UiLogic.propNames, "EXTRAWINGWIDTH");
                <input type="number"  name="txtExtraWingWidth" @bind="ExtraWingWidth" class= "@doorConfig.borderColors["EXTRAWINGWIDTH"]" 
				   @onfocus="@( () => UiLogic.HasFocus("EXTRAWINGWIDTH", doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
                     @ref="doorConfig.dicRefs[UiLogic.propNames[i602]]"  
				/>
				}
           	@code
			{
				protected int? _ExtraWingWidth = 0;
				protected int? ExtraWingWidth
				{
					get
					{
						if (doorConfig != null && doorConfig.EXTRAWINGWIDTH > 0)
						{
							_ExtraWingWidth = doorConfig.EXTRAWINGWIDTH;
						}
						else
							_ExtraWingWidth = null;

						return _ExtraWingWidth;
					}
					set
					{
						_ExtraWingWidth = value;
						if (doorConfig != null)
						{
							doorConfig.EXTRAWINGWIDTH = (_ExtraWingWidth != null ? (int)_ExtraWingWidth : 0);
							doorConfig.borderColors["EXTRAWINGWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						}
					}
				}
			}
			</td>

			<td id="tdDoorHeight">
     			<input name="txtDoorHeight" type="number" @bind-value="DoorHeight" class="@doorConfig.borderColors["DOORHEIGHT"]" 
				  disabled="true" />
                @code 
				{
			    protected int? _DoorHeight;
                protected int? DoorHeight
                {
                    get
                    {
                        if (doorConfig != null && doorConfig.DOORHEIGHT > 0)
                        {
                            _DoorHeight = doorConfig.DOORHEIGHT;
                        }
                        else
                            _DoorHeight = null;

                        return _DoorHeight; //_DoorHeight.ToString();
                    }
  				    set
                    {
                        _DoorHeight = value;
					}
				}
				}
			</td>

	
			@if (!ccw)
			{
				<td id="tdCentralColWidth" @hidden="@false" >
					<select name="dlstCentralColWidth" @bind="CentralColWidth" class= "@doorConfig.borderColors["CENTRALCOLWIDTH"]" >
						<option>40</option>
						<option>30</option>
					</select>
				</td>
			}
			@code
			{
				protected int _CentralColWidth = 0;
				protected int CentralColWidth
				{
					get
					{
						if (doorConfig != null)
						{
							_CentralColWidth = doorConfig.CENTRALCOLWIDTH;
						}
						return _CentralColWidth;
					}
					set
					{
						_CentralColWidth = value;
						if (doorConfig != null)
						{
							doorConfig.CENTRALCOLWIDTH = _CentralColWidth;
							doorConfig.borderColors["CENTRALCOLWIDTH"] = (value != 0 ? "blueBorder" : "redBorder");
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						}
					}
				}
			}
			<td id="tdCentralColClrID" >
                <input name="dlstCentralColClrID" @bind="CentralColClrID" class= "@doorConfig.borderColors["CENTRALCOLCLRID"]"  
				   disabled="@doorConfig.disabledFlds["CENTRALCOLCLRID"]"
				/>
                    
                
            </td>
            @code
            {
	            protected int _CentralColClrID = 0;
	            protected int CentralColClrID
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _CentralColClrID = doorConfig.CENTRALCOLCLRID;
			            }
			            return _CentralColClrID;
		            }
		            set
		            {
			            _CentralColClrID = value;
		            }
	            }
            }
            
		
				<td id="tdOpenMode">
                        <input name="dlstOpenMode" @bind="openMode" class="@doorConfig.borderColors["OPENMODE"]" 
						  disabled = "true" />

            @code
            {
                protected string _openMode = string.Empty;
                protected string openMode
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openMode = doorConfig.OPENMODE;
                        }
                        return _openMode;
                    }
                    set
                    {
                        _openMode = value;
                    }
                }
            }
        
			</td>

		    <td id="tdOpenDirection" >
                <input name="txtOpenDirection" disabled="true"  @bind="OpenDirection"  class="@doorConfig.borderColors["OPENSIDE"]"   /> 
            </td>
            @code
            {
	            protected string _OpenDirection = string.Empty;
	            protected string OpenDirection
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _OpenDirection = (doorConfig.OPENSIDE == "ימין" ? "שמאל" : "ימין");
			            }
			            return _OpenDirection;
		            }
		            set
		            {
			            _OpenDirection = value;
		            }
	            }
            }
        </tr>

           @* end of StaticwingL1 *@
		   </table>
           <!--end table staticWingL1 -->

		   <table id="staticWingL2">
            <tr>
		    <th>גוון כנף קבועה</th>
			<th>גוון חוץ כנף קבועה</th>
			<th>גוון פנים כנף קבועה</th>
			<th>גובה ניקוב</th>
			@{
				bool hw4 = UiLogic.hideFld(doorConfig, "thHW4ExtraWing");
			}
			@if (!hw4)
			{
				<th id="thHW4ExtraWing" >פרזול כנף קבועה</th>
			}
			<th>צבע פירזול</th>
			<th>ניקוב לפירזול</th>
			</tr>
			<tr>
				<td id="thSwingColorId">
					<input name="txtSwingColorID" disabled="true"  @bind="SwingColorID"  class="@doorConfig.borderColors["DOORCOLORID"]"   /> 
					@code 
					{
						protected int _SwingColorID = 0;
						protected int SwingColorID
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingColorID = doorConfig.DOORCOLORID;
								}
								return _SwingColorID;
							}
							set
							{
								_SwingColorID = value;
							}
						}
					}
				</td>
				<td>
					<input name="txtSwingExtColorID" disabled="true"  @bind="SwingExtColorID"  class="@doorConfig.borderColors["EXTCOLORID"]"   /> 
					@code 
					{
						protected int _SwingExtColorID = 0;
						protected int SwingExtColorID
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingExtColorID = doorConfig.EXTCOLORID;
								}
								return _SwingExtColorID;
							}
							set
							{
								_SwingExtColorID = value;
							}
						}
					}
				</td>
				<td>
					<input name="txtSwingIntColorID" disabled="true"  @bind="SwingIntColorID"  class="@doorConfig.borderColors["INTCOLORID"]"   /> 
					@code 
					{
						protected int _SwingIntColorID = 0;
						protected int SwingIntColorID
						{
							get
							{
								if (doorConfig != null)
								{
									_SwingIntColorID = doorConfig.INTCOLORID;
								}
								return _SwingIntColorID;
							}
							set
							{
								_SwingIntColorID = value;
							}
						}
					}
				</td>
				<td>
					@*   height of Dril4Lock  RO from movingwing *@
					<input name="txtSwing_LockDrilHeight" disabled="true"  @bind="Swing_LockDrilHeight"  class="@doorConfig.borderColors["LOCKDRILHEIGHT"]"   /> 
					@code 
					{
						protected int _Swing_LockDrilHeight = 0;
						protected int Swing_LockDrilHeight
						{
							get
							{
								if (doorConfig != null)
								{
									_Swing_LockDrilHeight = doorConfig.LOCKDRILHEIGHT;
								}
								return _Swing_LockDrilHeight;
							}
							set
							{
								_Swing_LockDrilHeight = value;
							}
						}
					}
				</td>
				<td>  
					@* HW4EXTRAWING *@
				</td>

     		

			<td>
				 @{
            List<TRSH_COLOR_Class> tmpLstColors = new List<TRSH_COLOR_Class>(PrApiCalls.lstColors);
            tmpLstColors.Insert(1, new TRSH_COLOR_Class() { TRSH_COLORID = 99999, PARTDES = "ללא"  });
            //DataTable tmpDtColors = new DataTable();
            //tmpDtColors = tmpLstColors.ToDataTable<TRSH_COLOR_Class>();
        }
        
            @{  int i605 = Array.IndexOf(UiLogic.propNames, "SWING_HWCOLORID");
            <select name="dlstSwing_HwColor" @bind="Swing_HwColorId" class="@doorConfig.borderColors["SWING_HWCOLORID"]"  
                 disabled="@doorConfig.disabledFlds["SWING_HWCOLORID"]"  
                  @onfocus="@( () => UiLogic.HasFocus("SWING_HWCOLORID", doorConfig) )" 
                     onkeypress="@doorConfig.KeyPressHandler" 
                     @ref="doorConfig.dicRefs[UiLogic.propNames[i605]]" >
                @if (PrApiCalls.lstColors != null)
                {
                    @foreach (TRSH_COLOR_Class c in  tmpLstColors) //PrApiCalls.lstColors)
                    {
                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
            </select>
            }
			</td>
			@code
        {
            protected int _Swing_HwColorId = 0;
            protected int Swing_HwColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Swing_HwColorId = doorConfig.SWING_HWCOLORID;
                    }
                    return _Swing_HwColorId;
                }
                set
                {
                    _Swing_HwColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.HWCOLORID = _Swing_HwColorId;
                        doorConfig.borderColors["SWING_HWCOLORID"] = (value != 0 ? "blueBorder" : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
                    }
                }
            }
        }
			<td>
				@* Dril4HW *@
			</td>
			</tr>
			</table>
			<!-- end of table StaticwingL2-->
			<table id="StaticwingL3">
			<tr>
				@{	string thCyl = "thCylinder4HalfWing"; }
                <th id="thCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, thCyl)">צילינדר כנף קבועה</th>
				<th>מנגנון תגבור</th>
				<th>לוגו</th>
				<th>מנעול</th>
				<th>ידית אומנותית</th>
				<th>אוורור</th>

				@{ bool rsw = UiLogic.hideFld(doorConfig, "thRafafaOnStaticWing"); }
				@if (!rsw) 	{ <th id="thRafafaOnStaticWing" >רפפת עשן</th> 	}

				<th>פתח לחתול</th>
		    </tr>

			<tr>
            <td id="tdCylinder4HalfWing" @hidden="@UiLogic.hideFld(doorConfig, "thCylinder4HalfWing")">
                <select name="dlstCylinder4HalfWing" @bind="Cylinder4HalfWing" class= "@doorConfig.borderColors["CYLINDER4HALFWING"]" >
				@*
                    <option>לא</option>
                    <option>כן</option>
                    <option>חצי</option>
					replace this by code from movingwing and add Half Cylinder to the LOV 
				*@
                </select>
            </td>
            @code
            {
	            protected string _Cylinder4HalfWing = string.Empty;
	            protected string Cylinder4HalfWing
	            {
		            get
		            {
			            if (doorConfig != null)
			            {
				            _Cylinder4HalfWing = doorConfig.CYLINDER4HALFWING;
			            }
			            return _Cylinder4HalfWing;
		            }
		            set
		            {
			            _Cylinder4HalfWing = value;
			            if (doorConfig != null)
						{
				            doorConfig.CYLINDER4HALFWING = _Cylinder4HalfWing;
							doorConfig.borderColors["CYLINDER4HALFWING"] = (!string.IsNullOrEmpty(value)  ? "blueBorder" : "redBorder");
							UiLogic.clearFollowingTabFields(doorConfig, "staticwing");
						}
		            }
	            }
            }
		
           <td>
			      @* Turbo apparatus - RO - copy from movingwing*@
		   </td>
		   <td>
			   @* Logo - RO - copy from movingwing* *@
		   </td>
		   <td>
			   @*  lock 4 static wing - new *@
		   </td>
		<td>
			@* handle 4 static wing   new *@
		</td>
		<td>
			@* Vent 4 static wing new *@
		</td>
		
			@if (!rsw)
			{
			<td id="tdRafafaOnStaticWing" >
                <input type="checkbox" name="chkbRafafaOnStaticWing" @bind="RafafaOnStaticWing" />
            </td>
			}
			@code
			{
				protected bool _RafafaOnStaticWing = false;
				protected bool RafafaOnStaticWing
				{
					get
					{
						if (doorConfig != null)
						{
							_RafafaOnStaticWing = (doorConfig.RAFAFAONSTATICWING == "Y");
						}
						return _RafafaOnStaticWing;
					}
					set
					{
						_RafafaOnStaticWing = value;
						if (doorConfig != null)
							doorConfig.RAFAFAONSTATICWING = (_RafafaOnStaticWing ? "Y" : "");
					}
				}
			}
		
		<td>
			@* Cat door 4 static wing - new *@
		</td>
            
        </tr>
    </table>
    <!-- end table staticWingL3 -->
 