@using BlazorServerApp1.Data
@using System.Data;

@page "/Movingwing"

@inherits MovingwingBase

@inject IJSRuntime Js

@implements IDisposable

@code
{
    [Parameter]
    public DoorConfig doorConfig { get; set; }

    [Parameter]
    public bool disableLogo { get; set; }

    [Parameter]
    public Configurator4 config4 { get; set; }

}

@code {
    @inject NavigationManager NavigationManager;


    private bool openMsgBox = false;
    string errMsg2 = string.Empty;
    string errMsg3 = "xxxxxxxxxxxxxxxxxx";
    private string msgCaption = "שגיאה";
    string msgClass = "modal-body centeredMsg";
    private string MsgTitleCssClass = string.Empty;
    string msgHeaderClass = "modal-header";
    string msgBorder1Style = string.Empty;

    private bool disableColor = true;
    private bool disableExtColor = true;
    private bool disableIntColor = true;
      
    async void IDisposable.Dispose()
    {
        //string doorConfigJson = PrApiCalls.JsonSerializer<DoorConfig>(doorConfig);
        //await ProtectedSessionStore.SetAsync("doorConfigJson", doorConfigJson);
        //string doorConfigJson2 = ProtectedSessionStore.GetAsync<string>("doorConfigJson").ToString();
        //UiLogic.saveDoorConfig(doorConfig, ProtectedSessionStore);

        //Js.InvokeVoidAsync("alert", string.Format("in Movingwing Dispose : doorConfig.EXTCOLORID= ", doorConfig.EXTCOLORID));  //debug

        //if (!UiLogic.tabPageIsFilled("movingwing", doorConfig))
        //{
        //    Js.InvokeVoidAsync("alert", "יש למלא את כל השדות בלשונית 'כנף נעה' י");
        //}
        //Js.InvokeVoidAsync("alert", string.Format("in Movingwing:Dispose doorConfig.DRIL4TWOSIDESIDS = {0}", doorConfig.DRIL4TWOSIDESIDS)); //debug
    }

    protected override async Task OnInitializedAsync()
    {
        //string doorConfigJson = PrApiCalls.JsonSerializer<DoorConfig>(doorConfig);

        //Js.InvokeVoidAsync("alert", string.Format("in Movingwing OnInitializedAsync : doorConfig.EXTCOLORID= ", doorConfig.EXTCOLORID));  // debug

        //await ProtectedSessionStore.SetAsync("doorConfigJson", doorConfigJson);
        //var doorConfigJsonV = await ProtectedSessionStore.GetAsync<string> ("doorConfigJson");
        //if (doorConfigJsonV.Success)
        //{
        //    string doorConfigJson2 = doorConfigJsonV.Value;
        //    if (!string.IsNullOrEmpty(doorConfigJson2))
        //         doorConfig = Newtonsoft.Json.JsonConvert.DeserializeObject<DoorConfig>(doorConfigJson2);
        //}
        doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = false;
        
        // hardcoded ELECTRICAPPARATUS style ! 28/05/2022 
        if (doorConfig.ELECTRICAPPARATUS == null)
            doorConfig.ELECTRICAPPARATUS = string.Empty;
        doorConfig.borderColors["ELECTRICAPPARATUS"] = (!string.IsNullOrEmpty(doorConfig.ELECTRICAPPARATUS) ? string.Empty : "redBorder");
    }


  }
<br />
<table>
    <tr>
        <td>
            <div class="tabPageTitle">
                <h1 class="rightLeftMargin">כנף נעה</h1>
            </div>
        </td>
    </tr>
</table>


<table id="MovingWingL1">
    <tr>
        <th id="thDoorWidth" hidden="@UiLogic.hideFld(doorConfig, "DoorWidth")">רוחב כנף</th>
        <th id="thDoorHeight" hidden="@UiLogic.hideFld(doorConfig, "DoorHeight")">גובה כנף</th>
        <th id="thOpenSide" hidden="@UiLogic.hideFld(doorConfig, "OpenSide")">צד פתיחה</th>   @* ימין\שמאל*@
        <th id="thOpenMode">פתיחה</th>   @* פנימה\החוצה *@
        @*  <th id="thDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">עיצוב דקורציה (חוץ,פנים,דו צדדי)</th>  moved to Configurator4.razor divDoorTitle*@
        <th id="thColorsNum" hidden="@UiLogic.hideFld(doorConfig, "ColorsNum")">מספר גוונים</th>
        <th id="thWingColor" hidden="@UiLogic.hideFld(doorConfig, "thDoorColor")">גוון</th>
    </tr>
    <tr>
        <td id="tdDoorWidth" hidden="@UiLogic.hideFld(doorConfig, "DoorWidth")">
             <input name="txtWingWidth" type="number" @bind="DoorWidth" class="@doorConfig.borderColors["DOORWIDTH"]" onkeypress="return event.keyCode!=13" /> 
             @*<InputText name="txtWingWidth" type="number"  @bind-Value="DoorWidth"  class="@doorConfig.borderColors["DOORWIDTH"]" 
              style="outline:none" onkeypress="return event.keyCode!=13"/>
             *@

        @code
        {
                private ElementReference txtWingWidth;
                protected int _DoorWidth = 0;
                protected int DoorWidth
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _DoorWidth = doorConfig.DOORWIDTH;
                        }
                        // return _DoorWidth.ToString();
                        return _DoorWidth;
                    }
                    set
                    {
                        _DoorWidth = value;
                    //if (!int.TryParse(value,out _DoorWidth))
                        //{
                        //    msgCaption = string.Empty;
                        //    errMsg2 = "ספרות בלבד";
                        //    msgClass = "modal-body centeredMsg";
                        //    openMsgBox = true;
                        //}
                        //else if (!wingWidthIsOk(_DoorWidth, ref errMsg2))

                        if (!wingWidthIsOk(value, ref errMsg2))
                        {
                            msgCaption = string.Empty;
                            msgClass = "modal-body centeredMsg";
                            openMsgBox = true;
                            value = _DoorWidth = 0;
                            txtWingWidth.FocusAsync();
                            doorConfig.borderColors["DOORWIDTH"] = (value == 0 ? "redBorder" : string.Empty );
                            this.StateHasChanged();
                        }
                        else
                        {
                            if (doorConfig != null)
                            {
                                doorConfig.DOORWIDTH = _DoorWidth;
                                doorConfig.borderColors["DOORWIDTH"] = (value == 0 ? "redBorder" : string.Empty );

                                if (!string.IsNullOrEmpty(doorConfig.PARTNAME) && doorConfig.COMPLIENTDOOR == "Y")
                                {
                                    string errMsg = string.Empty;
                                    doorConfig.WINDOWWIDTH = calcWindowWidth(doorConfig, ref errMsg);
                                    if (doorConfig.WINDOWWIDTH == 0 && !string.IsNullOrEmpty(errMsg))
                                    {
                                        //Js.InvokeVoidAsync("alert", errMsg);
                                        errMsg3 = errMsg;
                                        openMsgBox = true;
                                        value = _DoorWidth = 0;
                                        txtWingWidth.FocusAsync();
                                        this.StateHasChanged();
                                    }
                                }
                                doorConfig.borderColors["DOORWIDTH"] = (value == 0 ? "redBorder" : string.Empty );
                                UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                            }
                        }
                    }
                }
}
        </td>
        <td id="tdDoorHeight" hidden="@UiLogic.hideFld(doorConfig, "DoorHeight")">
           <input name="txtDoorHeight" type="number" @bind="DoorHeight" class="@doorConfig.borderColors["DOORHEIGHT"]" 
           onkeypress="return event.keyCode!=13"   />  
            @* <InputText name="txtDoorHeight" type="number" @bind-Value="DoorHeight" class="@doorConfig.borderColors["DOORHEIGHT"]"
             style="outline:none" onkeypress="return event.keyCode!=13"/>
             *@

            @code
            {
                private ElementReference txtDoorHeight;
                protected int _DoorHeight = 0;
                protected int DoorHeight
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _DoorHeight = doorConfig.DOORHEIGHT;
                        }
                        return _DoorHeight; //_DoorHeight.ToString();
                    }
                    set
                    {
                        _DoorHeight = value;
                    //if (!int.TryParse(value,out _DoorHeight))
                        //{
                        //    msgCaption = string.Empty;
                        //    errMsg2 = "ספרות בלבד";
                        //    msgClass = "modal-body centeredMsg";
                        //    openMsgBox = true;
                        // }
                        //else if (doorConfig != null)
                        if (doorConfig != null)
                        {
                            doorConfig.DOORHEIGHT = _DoorHeight;
                            //[TODO] implement the following lines
                            //if (chkbComplient.Checked)
                            //     txtWindowWidth.Text = calcWindowWidth();
                            if (!string.IsNullOrEmpty(doorConfig.PARTNAME) && doorConfig.COMPLIENTDOOR == "Y")
                            {
                                errMsg2 = string.Empty;
                                setHingesAndWindowsData(doorConfig, ref errMsg2);
                                if (doorConfig.WINDOWHEIGHT == 0 && !string.IsNullOrEmpty(errMsg2))
                                {
                                    //Js.InvokeVoidAsync("alert", errMsg2);
                                    //msgClass = "modal-body redMessage";
                                    errMsg3 = errMsg2;
                                    openMsgBox = true;
                                    value = _DoorHeight = 0;
                                    //txtDoorHeight.FocusAsync();
                                    this.StateHasChanged(); 
                                }
                                else
                                {
                                    doorConfig.borderColors["LOCKDRILHEIGHT"] = (doorConfig.LOCKDRILHEIGHT != 0 ? string.Empty : "redBorder");  //update borderColor
                                                                         // of dlstLOCKDRILHEIGHT if its value was changed after DoorHeight was processsed
                                    this.StateHasChanged();
                                }
                            }
                            doorConfig.borderColors["DOORHEIGHT"] = (value != 0 ? string.Empty : "redBorder");
                            @*
                               The following code lines are actually inside setHingesAndWindowsData

                            errMsg2 = string.Empty;
                            doorConfig.WINDOWHEIGHT = calcWindowHeight(doorConfig, ref errMsg2);
                            if (doorConfig.WINDOWHEIGHT == 0 && !string.IsNullOrEmpty(errMsg2))
                            {
                                //Js.InvokeVoidAsync("alert", errMsg2);
                                errMsg3 = errMsg2;
                                openMsgBox = true;
                            }
                            *@
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>

        <td id="tdOpenSide" hidden="@UiLogic.hideFld(doorConfig, "OpenSide")">
            <select name="dlstOpenSide" @bind="openSide" disabled="@UiLogic.disableFld(doorConfig, "dlstOpenSide")"
                    class="@doorConfig.borderColors["OPENSIDE"]">
                <option> </option>
                <option>ימין</option>
                <option>שמאל</option>
            </select>
            @code
            {
                protected string _openSide = string.Empty;
                protected string openSide
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openSide = doorConfig.OPENSIDE;
                        }
                        return _openSide;
                    }
                    set
                    {
                        _openSide = value;
                        if (doorConfig != null)
                        {
                            doorConfig.OPENSIDE = _openSide;
                            doorConfig.borderColors["OPENSIDE"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }

            }
        </td>
        @*
            <td id="tdDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">
            <select name="dlstDecorFormat" @bind="DecorFormat" class= "@doorConfig.borderColors["DECORFORMAT"]" >
            <option></option>
            <option>ללא</option>
            <option>חוץ</option>
            <option>פנים</option>
            <option disabled="@UiLogic.disableOption(doorConfig,"dlstDecorFormat","דו צדדי")">דו צדדי</option>
            <!-- see Helper.DecorFormat2Code(...) method -->
            </select>
            </td>
        *@
        @*
            @code {
            protected string _DecorFormat = string.Empty;
            protected string DecorFormat
            {
            get
            {
            if (doorConfig != null)
            {
            // UiLogic.applyFldDefault(doorConfig, "dlstDecorFormat");
            _DecorFormat = doorConfig.DECORFORMAT;
            }
            return _DecorFormat;
            }
            set
            {
            _DecorFormat = value;
            if (doorConfig != null)
            {
            doorConfig.DECORFORMAT = _DecorFormat;
            doorConfig.borderColors["DECORFORMAT"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
            }
            }
            }
            }
        *@
        <td id="tdOpenMode">
            <select name="dlstOpenMode" @bind="openMode" class="@doorConfig.borderColors["OPENMODE"]">
                <option></option>
                <option>פנימה</option>
                <option>החוצה</option>
            </select>
            @code
            {
                protected string _openMode = string.Empty;
                protected string openMode
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _openMode = doorConfig.OPENMODE;
                        }
                        return _openMode;
                    }
                    set
                    {
                        _openMode = value;
                        if (doorConfig != null)
                        {
                            doorConfig.OPENMODE = _openMode;
                            doorConfig.borderColors["OPENMODE"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>

        <td id="tdColorsNum" hidden="@UiLogic.hideFld(doorConfig, "ColorsNum")">
            <select name="dlstColorsNum"  @bind="ColorsNum"  class="@doorConfig.borderColors["COLORSNUM"]">
                <option></option>
                <option>ללא</option>
                <option>1</option>
                <option>2</option>
            </select>

            @code
            {
                protected string _ColorsNum = string.Empty;
                protected string ColorsNum
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _ColorsNum = doorConfig.COLORSNUM;
                        }
                        return _ColorsNum;
                    }
                    set
                    {
                        _ColorsNum = value;
                        if (doorConfig != null)
                        {
                            doorConfig.COLORSNUM = _ColorsNum;
                            switch (_ColorsNum.Trim())
                            {
                                case "":
                                case "ללא":
                                    disableColor = disableExtColor = disableIntColor = true;
                                    doorConfig.disabledFlds["DOORCOLORID"] = doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = true;
                                    doorConfig.DOORCOLORID = doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                                    //doorConfig.INTCOLORDES = string.Empty;
                                    break;
                                case "1":
                                    disableColor = false;
                                    doorConfig.disabledFlds["DOORCOLORID"] = false;
                                    disableExtColor = true;
                                    doorConfig.disabledFlds["EXTCOLORID"] = true;
                                    disableIntColor = true;
                                    doorConfig.disabledFlds["INTCOLORID"] = true;

                                    doorConfig.EXTCOLORID = doorConfig.INTCOLORID = 0;
                                    //doorConfig.INTCOLORDES = string.Empty;
                                    break;
                                case "2":
                                    disableColor = true;
                                    doorConfig.disabledFlds["DOORCOLORID"] = true;
                                    disableExtColor = disableIntColor = false;
                                    doorConfig.disabledFlds["EXTCOLORID"] = doorConfig.disabledFlds["INTCOLORID"] = false;
                                    doorConfig.DOORCOLORID = 0;
                                    break;
                            }
                            doorConfig.borderColors["COLORSNUM"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }

            }
        </td>



        <td id="tdDoorColor" hidden="@UiLogic.hideFld(doorConfig, "DoorColor")">
            <select name="dlstDoorColor" @bind="DoorColorId" class="@doorConfig.borderColors["DOORCOLORID"]" 
                          disabled="@doorConfig.disabledFlds["DOORCOLORID"]">
                @if (PrApiCalls.lstColors != null)
                {
                    @foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
                    {
                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
            </select>
        @code
        {

            protected int _DoorColorId = 0;
            protected int DoorColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _DoorColorId = doorConfig.DOORCOLORID;
                    }
                    return _DoorColorId;
                }
                set
                {
                    _DoorColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.DOORCOLORID = _DoorColorId;
                        doorConfig.borderColors["DOORCOLORID"] = (value != 0 ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }
        </td>
    </tr>
</table>
<!-- end table MovingWingL1 -->
<br />
<table id="MovingWingL2">
    <tr>
        @* <th id="thTurboApparatus" hidden="@UiLogic.hideFld(doorConfig, "TurboApparatus")">מנגנון תגבור</th> *@
        <th id="thExtColor" hidden="@UiLogic.hideFld(doorConfig, "ExtColor")">גוון חוץ</th>  @* was in Extdecor.razor *@
        <th id="thIntColor" hidden="@UiLogic.hideFld(doorConfig, "thIntColor")">גוון פנים</th>  @* was in Intdecor.razor L1  *@
        <th id="thLockDrilHeight" hidden="@UiLogic.hideFld(doorConfig, "LockDrilHeight")">גובה ניקוב</th>

        @* <th id="thLogo" hidden="@UiLogic.hideFld(doorConfig, "Logo")">לוגו</th> *@

        <th id="thHw" hidden="@UiLogic.hideFld(doorConfig, "Hw")">פירזול</th>
        <th id="thHwColor" hidden="@UiLogic.hideFld(doorConfig, "HwColor")">צבע פירזול</th>
        <th id="thDril4Hw" hidden="@UiLogic.hideFld(doorConfig, "Dril4Hw")">ניקוב לפירזול</th>
    </tr>
    <tr>
        <td id="tdExtColor" hidden="@UiLogic.hideFld(doorConfig, "ExtColor")">
            <select name="dlstExtColor" @bind="ExtColor" class="@doorConfig.borderColors["EXTCOLORID"]"
                    disabled="@doorConfig.disabledFlds["EXTCOLORID"]" >
                @if (PrApiCalls.lstColors != null)
                {
                    @foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
                    {
                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
            </select>
            @code
            {
                protected int _ExtColor = 0;
                protected int ExtColor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _ExtColor = doorConfig.EXTCOLORID;
                        }
                        return _ExtColor;
                    }
                    set
                    {
                        _ExtColor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.EXTCOLORID = _ExtColor;
                            doorConfig.borderColors["EXTCOLORID"] = (value != 0 ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "extdecor");
                        }
                    }
                }
            }
        </td>

        <td id="tdIntColor" hidden="@UiLogic.hideFld(doorConfig, "thIntColor")">
            <select name="dlstIntColor" @bind="IntColor" class="@doorConfig.borderColors["INTCOLORID"]"
                    disabled="@doorConfig.disabledFlds["INTCOLORID"]">
                @if (PrApiCalls.lstColors != null)
                {
                    @foreach (TRSH_COLOR_Class c in PrApiCalls.lstColors)
                    {
                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
            </select>
            @code
            {
                protected int _IntColor = 0;
                protected int IntColor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _IntColor = doorConfig.INTCOLORID;
                        }
                        return _IntColor;
                    }
                    set
                    {
                        _IntColor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.INTCOLORID = _IntColor;
                            doorConfig.borderColors["INTCOLORID"] = (value != 0 ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "intdecor");
                        }
                    }
                }
            }
        </td>


        <td id="tdLockDrilHeight" hidden="@UiLogic.hideFld(doorConfig, "LockDrilHeight")">
             <input name="txtLockDrilHeight" type="number" @bind="LockDrilHeight" class="@doorConfig.borderColors["LOCKDRILHEIGHT"]" 
             onkeypress="return event.keyCode!=13"
             />  
       @* <InputText name="txtLockDrilHeight" type="number" @bind-Value="LockDrilHeight" class="@doorConfig.borderColors["LOCKDRILHEIGHT"]"
              style="outline:none" onkeypress="return event.keyCode!=13"/>
       *@
                    
        @code
        {
                protected int _LockDrilHeight = 0;
                protected int LockDrilHeight
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _LockDrilHeight = doorConfig.LOCKDRILHEIGHT;
                        }
                        return _LockDrilHeight; //.ToString();
                    }
                    set
                    {
                        _LockDrilHeight = value;
                        @* if (!int.TryParse(value,out _LockDrilHeight))
                    {
                        msgCaption = string.Empty;
                        errMsg2 = "ספרות בלבד";
                        msgClass = "modal-body centeredMsg";
                        openMsgBox = true;
                    }
                        else if (doorConfig != null)
                    *@
                        if (doorConfig != null)
                        {
                            msgBorder1Style = "border:solid;border-color:red;";
                            //msgHeaderClass = "modal-header redBorder";
                            msgCaption = "שים לב:";
                            MsgTitleCssClass = "centeredMsg";
                            msgClass = "modal-body centeredMsg";
                            errMsg2 = "שינוי ערך בשדה גובה ניקוב מחייב להקליד את שאר המידות ידנית";
                            openMsgBox = true;
                            this.StateHasChanged();
                            if (_LockDrilHeight != doorConfig.LOCKDRILHEIGHT)
                            { 
                                doorConfig.LOCKDRILHEIGHT = _LockDrilHeight;
                                UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                clearHingesMeasures(doorConfig);
                            }
                            doorConfig.borderColors["LOCKDRILHEIGHT"] = (value != 0 ? string.Empty : "redBorder");
                        }
                }
            }
        }
        </td>
        <td id="tdHw" hidden="@UiLogic.hideFld(doorConfig, "Hw")">
            <select name="dlstHw" @bind="Hw" class="@doorConfig.borderColors["TRSH_HARDWARE"]">
                @{
                    string errMsg = string.Empty;
                    List<TRSH_HARDWARE_Class> lstPartHWs = PrApiCalls.getPartHWs(doorConfig.TRSH_DOOR_HWCATCODE, ref errMsg);

                    if (lstPartHWs != null)
                    {
                        @foreach (TRSH_HARDWARE_Class c in lstPartHWs)
                        {
                            <option value="@c.TRSH_HARDWARE">@c.HARDWAREDES</option>
                        }
                    }
                }
            </select>
            @code
            {
                protected int _Hw = 0;
                protected int Hw
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Hw = doorConfig.TRSH_HARDWARE;
                        }
                        return _Hw;
                    }
                    set
                    {
                        _Hw = value;
                        if (doorConfig != null)
                        {
                            doorConfig.TRSH_HARDWARE = _Hw;
                            doorConfig.borderColors["TRSH_HARDWARE"] = (value != 0 ? string.Empty : "redBorder");
                            doorConfig.DRIL4HW = PrApiCalls.getDril4HwOfHw(doorConfig);
                            doorConfig.borderColors["DRIL4HW"] = (doorConfig.DRIL4HW != 0 ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>
        @{
            List<TRSH_COLOR_Class> tmpLstColors = new List<TRSH_COLOR_Class>(PrApiCalls.lstColors);
            tmpLstColors.Insert(1, new TRSH_COLOR_Class() { TRSH_COLORID = 99999, TRSH_COLORDES = "ללא"  });
            //DataTable tmpDtColors = new DataTable();
            //tmpDtColors = tmpLstColors.ToDataTable<TRSH_COLOR_Class>();
        }
        <td id="tdHwColor" hidden="@UiLogic.hideFld(doorConfig, "HwColor")">
            <select name="dlstHwColor" @bind="HwColorId" class="@doorConfig.borderColors["HWCOLORID"]">
                @if (PrApiCalls.lstColors != null)
                {
                    @foreach (TRSH_COLOR_Class c in  tmpLstColors) //PrApiCalls.lstColors)
                    {
                        <option value="@c.TRSH_COLORID">@UiLogic.colorTypeAndDes(c)</option>
                    }
                }
            </select>
        </td>
        @code
        {
            protected int _HwColorId = 0;
            protected int HwColorId
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _HwColorId = doorConfig.HWCOLORID;
                    }
                    return _HwColorId;
                }
                set
                {
                    _HwColorId = value;
                    if (doorConfig != null)
                    {
                        doorConfig.HWCOLORID = _HwColorId;
                        doorConfig.borderColors["HWCOLORID"] = (value != 0 ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }

        <td id="tdDril4Hw" hidden="@UiLogic.hideFld(doorConfig, "Dril4Hw")">
            <select name="dlstDril4Hw" @bind="Dril4Hw" class="@doorConfig.borderColors["DRIL4HW"]">
                @if (PrApiCalls.lstDril4Hw != null)
                {
                    @foreach (DRIL4HW_Class c in PrApiCalls.lstDril4Hw)
                    {
                        <option value="@c.DRIL4HW">@c.DRIL4HWDES</option>
                    }
                }
            </select>
        </td>
        @code
        {
            protected int _Dril4Hw = 0;
            protected int Dril4Hw
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Dril4Hw = doorConfig.DRIL4HW;
                    }
                    return _Dril4Hw;
                }
                set
                {
                    _Dril4Hw = value;
                    if (doorConfig != null)
                    {
                        doorConfig.DRIL4HW = _Dril4Hw;
                        doorConfig.borderColors["DRIL4HW"] = (value != 0 ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }
    </tr>
</table>
<!-- end MovingWingL2 -->
<br />
<table id="MovingWingL3">
    <tr>
        <th id="thCylinder" hidden="@UiLogic.hideFld(doorConfig, "Cylinder")">צילינדר</th>
        <th id="thElectricApparatus" hidden="@UiLogic.hideFld(doorConfig, "ElectricApparatus")">מנגנון חשמלי</th>
        <th id="thTurboApparatus" hidden="@UiLogic.hideFld(doorConfig, "TurboApparatus")">מנגנון תגבור</th>
        <th id="thLogo" hidden="@UiLogic.hideFld(doorConfig, "Logo")">לוגו</th>
        <th id="thHasLock" hidden="@UiLogic.hideFld(doorConfig, "HasLock")">מנעול</th>
        @* <th id="thTwoSidesIDSDril" hidden="@UiLogic.hideFld(doorConfig, "TwoSidesIDSDril")">ניקוב שני צדדים IDS</th> *@
        @{
            bool h = UiLogic.hideFld(doorConfig, "thHandle");
        }

        @if (!h)
        {
            <th id="thHandle">ידית אומנויות</th>
        }

        <th id="thVents" hidden="@UiLogic.hideFld(doorConfig, "Ventilation")">פתחי אוורור</th>
        <th id="thRafafa" hidden="@UiLogic.hideFld(doorConfig, "Rafafa")">רפפת עשן</th>
        <th id="thCatDoor" hidden="@UiLogic.hideFld(doorConfig, "CatDoor")">פתח לחתול</th>
        @* <th id="thLCDEye" hidden="@UiLogic.hideFld(doorConfig, "LCDEyer")">LCD עינית</th> *@
    </tr>
    <tr>
        <td id="tdCylinder" hidden="@UiLogic.hideFld(doorConfig, "Cylinder")">
            <select name="dlstCylinder" @bind="CylinderName" class="@doorConfig.borderColors["CYLINDERNAME"]">
                @if (PrApiCalls.lstCylinders != null)
                {
                    @foreach (CYLINDER_Class c in PrApiCalls.lstCylinders)
                    {
                        <option value="@c.CYLINDERNAME">@c.CYLINDERDES</option>
                    }
                }
            </select>
        </td>
        @code
        {
            protected string _CylinderName = string.Empty;
            protected string CylinderName
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _CylinderName = doorConfig.CYLINDERNAME;
                    }
                    return _CylinderName;
                }
                set
                {
                    _CylinderName = value;
                    if (doorConfig != null)
                    {
                        doorConfig.CYLINDERNAME = _CylinderName;
                        doorConfig.borderColors["CYLINDERNAME"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }

        <td id="tdElectricApparatus" hidden="@UiLogic.hideFld(doorConfig, "ElectricApparatus")">
            <select name="dlstElectricApparatus" @bind="ElectricApparatus" class="@doorConfig.borderColors["ELECTRICAPPARATUS"]">
                <option></option>
                <option>ללא</option>
                <option>R</option>
                <option>L</option>
            </select>
        </td>
        @code
        {
            protected string _ElectricApparatus = string.Empty;
            protected string ElectricApparatus
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _ElectricApparatus = doorConfig.ELECTRICAPPARATUS;
                    }
                    return _ElectricApparatus;
                }
                set
                {
                    _ElectricApparatus = value;
                    if (doorConfig != null)
                    {
                        doorConfig.ELECTRICAPPARATUS = _ElectricApparatus;
                        doorConfig.borderColors["ELECTRICAPPARATUS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }
        <td id="tdTurboApparatus" hidden="@UiLogic.hideFld(doorConfig, "TurboApparatus")">
            <input type="checkbox" name="chkbTurboApparatus" @bind="TurboApparatus" />
            @code
            {
                protected bool _TurboApparatus = false;
                protected bool TurboApparatus
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _TurboApparatus = (doorConfig.TURBOAPPARATUS == "Y");
                        }
                        return _TurboApparatus;
                    }
                    set
                    {
                        _TurboApparatus = value;
                        if (doorConfig != null)
                        {
                            doorConfig.TURBOAPPARATUS = (_TurboApparatus ? "Y" : "");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>

        <td id="tdLogo" hidden="@UiLogic.hideFld(doorConfig, "Logo")">
            <input type="checkbox" name="chkbLogo" @bind="Logo" disabled="@disableLogo" />
            @code
            {
                protected bool _Logo = false;
                protected bool Logo
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Logo = (doorConfig.LOGO == "Y");
                        }
                        return _Logo;
                    }
                    set
                    {
                        _Logo = value;
                        if (doorConfig != null)
                        {
                            doorConfig.LOGO = (_Logo ? "Y" : "");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }

            }
        </td>
        @*
        <td id="tdLock" hidden="@UiLogic.hideFld(doorConfig, "Lock")">
            <select name="dlstLock" @bind="Lock" class="@doorConfig.borderColors["LOCKNAME"]">
                @{
                    List<TRSH_LOCK_Class> lstPartLocks = PrApiCalls.getPartLocks(doorConfig.TRSH_DOOR_HWCATCODE, ref errMsg);
                    if (lstPartLocks != null)
                    {
                        @foreach (TRSH_LOCK_Class c in lstPartLocks)
                        {
                            <option value="@c.TRSH_LOCKNAME">@c.TRSH_LOCKDES</option>
                        }
                    }
                }
            </select>
        </td>
        @code {
            protected string _Lock = string.Empty;
            protected string Lock
            {
                get
                {
                    if (doorConfig != null)
                    {
                        _Lock = doorConfig.LOCKNAME;
                    }
                    return _Lock;
                }
                set
                {
                    _Lock = value;
                    if (doorConfig != null)
                    {
                        doorConfig.LOCKNAME = _Lock;
                        doorConfig.borderColors["LOCKNAME"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                        UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                    }
                }
            }
        }
        *@
        
                <td id="tdHasLock" hidden="@UiLogic.hideFld(doorConfig, "HasLock")">
                    <input type="checkbox" name="chkbHasLock" @bind="HasLock" />
                
                
                @code
                {
	                protected bool _HasLock = false;
	                protected bool HasLock
	                {
		                get
		                {
			                if (doorConfig != null)
			                {
				                _HasLock = (doorConfig.HASLOCK == "Y");
			                }
			                return _HasLock;
		                }
		                set
		                {
			                _HasLock = value;
			                if (doorConfig != null)
				                doorConfig.HASLOCK = (_HasLock ? "Y" : "");
		                }
	                }
                }
                    </td>
        

        @* if the user choose Dril4Hw == "IDS" then we enable  chkbTwoSidesIDSDril   *@
        @*
            <td id="tdTwoSidesIDSDril" hidden="@UiLogic.hideFld(doorConfig, "TwoSidesIDSDril")">
            <input type="checkbox" name="chkbTwoSidesIDSDril" @bind="TwoSidesIDSDril" disabled="@Dril4HwIsNotIDS(doorConfig)" />
            @code
            {
            protected bool _TwoSidesIDSDril = false;
            protected bool TwoSidesIDSDril
            {
            get
            {
            if (doorConfig != null)
            {
            _TwoSidesIDSDril = (doorConfig.DRIL4TWOSIDESIDS == "Y");
            }
            return _TwoSidesIDSDril;
            }
            set
            {
            _TwoSidesIDSDril = value;
            if (doorConfig != null)
            doorConfig.DRIL4TWOSIDESIDS = (_TwoSidesIDSDril ? "Y" : "");
            }
            }
            }
            </td>
        *@
        @if (!h)
        {
            <td id="tdHandle">
                <select name="dlstHandle" @bind="Handle1" class="@doorConfig.borderColors["HANDLENAME"]">
                    @if (PrApiCalls.lstHandles != null)
                    {
                        @foreach (HANDLE_Class c in PrApiCalls.lstHandles)
                        {
                            <option value="@c.HANDLENAME">@c.HANDLEDES</option>
                        }
                    }
                </select>
           
                @code
                {
                protected string _Handle1 = string.Empty;
                protected string Handle1
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Handle1 = doorConfig.HANDLENAME;
                        }
                        return _Handle1;
                    }
                    set
                    {
                        _Handle1 = value;
                        if (doorConfig != null)
                        {
                            doorConfig.HANDLENAME = _Handle1;
                            // Handle is Optional
                            //doorConfig.borderColors["HANDLENAME"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
            </td>
        }
            @* end  tdHandle *@

        <td id="tdVents" hidden="@UiLogic.hideFld(doorConfig, "Vents")">
            <select name="dlstVents" @bind="Vents" class="@doorConfig.borderColors["VENTS"]">
                <option></option>
                <option>ללא</option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
            </select>
            @code
            {
                protected string _Vents = string.Empty;
                protected string Vents
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Rafafa = doorConfig.VENTS;
                        }
                        return _Rafafa;
                    }
                    set
                    {
                        _Vents = value;
                        if (doorConfig != null)
                        {
                            doorConfig.VENTS = _Vents;
                            doorConfig.borderColors["VENTS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>
        <td id="tdRafafa" hidden="@UiLogic.hideFld(doorConfig, "Rafafa")">
            <select name="dlstRafafa" @bind="Rafafa" class="@doorConfig.borderColors["RAFAFAONMOVINGWING"]">
                <option></option>
                <option>ללא</option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
            </select>
            @code
            {
                protected string _Rafafa = string.Empty;
                protected string Rafafa
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Rafafa = doorConfig.RAFAFAONMOVINGWING;
                        }
                        return _Rafafa;
                    }
                    set
                    {
                        _Rafafa = value;
                        if (doorConfig != null)
                        {
                            doorConfig.RAFAFAONMOVINGWING = _Rafafa;
                            doorConfig.borderColors["RAFAFAONMOVINGWING"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                            UiLogic.try2UpdateBtnClass(doorConfig, "movingwing");
                            
                            //debug
                            
                            // ref : https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
                            // the 2nd answer : Update Parent State by calling it's StateHasChanged method

                               // doorConfig.btnClasses["hinges"] = "buttonActive";
                                config4.RefreshState();
                            // end debug 
                        }
                    }
                }
            }
        </td>
        <td id="tdCatDoor" hidden="@UiLogic.hideFld(doorConfig, "CatDoor")">
            <input type="checkbox" name="chkbCatDoor" @bind="CatDoor" />
            @code
            {
                protected bool _CatDoor = false;
                protected bool CatDoor
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _CatDoor = (doorConfig.CATDOOR == "Y");
                        }
                        return _CatDoor;
                    }
                    set
                    {
                        _CatDoor = value;
                        if (doorConfig != null)
                        {
                            doorConfig.CATDOOR = (_CatDoor ? "Y" : "N" );
                            //doorConfig.borderColors["CATDOOR"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                            UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                        }
                    }
                }
            }
        </td>
        @*
            <td id="tdLCDEye" hidden="@UiLogic.hideFld(doorConfig, "LCDEye")">
            <input type="checkbox" name="chkbLCDEye" @bind="LCDEye" />
            @code
            {
            protected bool _LCDEye = false;
            protected bool LCDEye
            {
            get
            {
            if (doorConfig != null)
            {
            _LCDEye = (doorConfig.LCDEYE == "Y");
            }
            return _LCDEye;
            }
            set
            {
            _LCDEye = value;
            if (doorConfig != null)
            doorConfig.LCDEYE = (_LCDEye ? "Y" : "");
            }
            }
            }
            </td>
        *@
    </tr>
</table>
<!-- end table MovingWingL3 -->
@if (openMsgBox)
{
    <MsgBox Caption="@msgCaption"
        Message="@errMsg2"
        OnClose="OnDialogClose"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@msgClass"
        Border1Style = "@msgBorder1Style"
    >
    </MsgBox>
    @code
    {
    private void OnDialogClose()
    {
        openMsgBox = false;
        errMsg2 = string.Empty;
    }
}
}