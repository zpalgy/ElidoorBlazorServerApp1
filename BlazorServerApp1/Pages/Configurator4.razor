@page "/"

@using BlazorServerApp1.Pages
@using BlazorServerApp1.Data
@using System.Globalization;
@using System.Data;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


@* @page "/Configurator4" *@

@inherits Configurator4Base

@inject IJSRuntime Js

<EditForm Model=@doorConfig  OnSubmit="submitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*  <h3>Configurator4</h3> *@

    @code {
        //protected bool hideCustDes { get; set; } = false;
        protected static string errMsg = string.Empty;

        private bool openMsgBox = false;
        private string errMsg2 = string.Empty;
        private string msgCaption = "שגיאה";
        private string ErrMsgCssClass = "modal-body";    //"modal-body redMessage";
        private string MsgTitleCssClass = "modal-title";  //"modal-title redTitle";
        private bool openYesNo = false;

        protected List<CUSTOMER_Class>? lstCustomers = PrApiCalls.getCustomers(ref errMsg);
        protected List<AGENT_Class>? lstAgents = PrApiCalls.getAgents(ref errMsg);

        protected bool hideDivDoor = true;

        public DoorConfig? doorConfig;
        CultureInfo hebrew;
        CultureInfo english;

        Type dyncompType = typeof(Movingwing);   //typeof(Index);

        Type dyncompType2 = typeof(Decor); 
        
        Dictionary<string, object> pageParams = new Dictionary<string, object>();
        Dictionary<string, object> pageParams2 = new Dictionary<string, object>();
        bool showDynComp = false;
        bool showDyn2 = false;
        bool showProducts = false;

        string YNissue = string.Empty;
        private bool ansYes = false;

        // protected string fieldName;
        protected string currPropName = string.Empty;
        //protected int currPropInd;

        protected bool useELOGO = true;

        DataTable dtDivHeader;
        DataTable dtDivDoorTitle;
        DataTable dtDivHeaderDoorTitle;

        //protected ElementReference dlstWingsNum;
        //InputSelect dlstWingsNum;

        private string authMessage;
        private string surnameMessage;
        private string dbgstr = string.Empty;
        private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
        ElementReference refBtnDoor;

        protected override async Task OnInitializedAsync()
        {
        if (doorConfig != null)
            return;

        doorConfig = new DoorConfig();

        UiLogic.initPropNames(doorConfig);
        UiLogic.AppAllDefaults(doorConfig, ref errMsg);

        //initFormStuffInDoorConfig(doorConfig);
        doorConfig.initBorderColors();
        doorConfig.btnClasses["general"] = "buttonActive";
        doorConfig.divClasses["divHeader"] = "divActive";

        //await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);
        pageParams.Add("doorConfig", doorConfig);  //common to all tab pages !
                                                   //                                           // dyncompType = typeof(Extdecor);
        pageParams2.Add("doorConfig", doorConfig);
        //// ref : https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
        //// the 2nd answer : Update Parent State by calling it's StateHasChanged method
        pageParams.Add("config4", this);
        pageParams2.Add("config4", this);
        hebrew = new CultureInfo("he-IL", false);
        english = new CultureInfo("en-US", false);

        showProducts = false;
        hideDoorTitle = true;

        doorConfig.currTabName = "divHeader";
        doorConfig.dtTabFlds = UiLogic.getTabFields("divHeader", doorConfig, ref errMsg);
        //myService.RefreshRequested += RefreshMe;

        //Js.InvokeVoidAsync("SayHelloJS");
        formDate = DateTime.Now; // <<<
        UiLogic.tabPageIsFilled("divHeader", doorConfig);

        doorConfig.disabledFlds["proddes"] = true;  // added 28/07/2022

        //string UserName = httpContextAccessor.HttpContext.User.Identity.Name;  // httpContextAccessor.HttpContext is null !    

        //var authState = await authenticationStateTask;
        //var user = authState.User;

        //if (user.Identity.IsAuthenticated)
        //{
        //    string userIdentity = user.Identity.Name;
        //}
        }
        protected void initFormStuffInDoorConfig(DoorConfig doorConfig)
        {
        doorConfig.initBorderColors();
        doorConfig.btnClasses["general"] = "buttonActive";
        doorConfig.divClasses["divHeader"] = "divActive";

        //UiLogic.initPropNames(doorConfig);
        UiLogic.AppAllDefaults(doorConfig, ref errMsg);

        //await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);

        doorConfig.currTabName = "divHeader";
        doorConfig.dtTabFlds = UiLogic.getTabFields("divHeader", doorConfig, ref errMsg);
        doorConfig.disabledFlds["proddes"] = true;     // added: 28/07/2022
        }

        protected override async void OnAfterRender(bool firstRender)
        {
        string errMsg = string.Empty;
        string UserName = string.Empty;

        if (firstRender && doorConfig != null)
        {
            dtDivHeader = UiLogic.getTabFields("divHeader", doorConfig, ref errMsg);

            if (doorConfig != null && doorConfig.dicRefs.ContainsKey("FORMFILLER"))
            {
                doorConfig.dicRefs["FORMFILLER"].FocusAsync();
                StateHasChanged();
            }

            //---- try to get the Username on the client  - at present 09/06/2022 it does not work 
            //GetClaimsPrincipalData();
            //if (!string.IsNullOrEmpty(surnameMessage))
            //        doorConfig.FORMFILLER = surnameMessage; 
            //
            //if (httpContextAccessor.HttpContext != null)               // it's null 
            //      UserName = httpContextAccessor.HttpContext.User.Identity.Name;
            //--------- end trial to get the client's userName 
        }

        }  // end onAfterRender 
        protected DataTable uniteHeaderDoorTitleFlds()
        {
        dtDivDoorTitle = UiLogic.getTabFields("divDoorTitle", doorConfig, ref errMsg2);
        var result = dtDivHeader.AsEnumerable().Union(dtDivDoorTitle.AsEnumerable()).OrderBy(d => d.Field<int>("TABINDEX"));
        return result.CopyToDataTable();
        }

        private void RefreshMe()
        {
        StateHasChanged();
        }

        void showDivProducts()
		{
        showProducts = true;
        doorConfig.divClasses["divHeader"] = "divNotActive";
        doorConfig.divClasses["divProducts"] = "divActive";
		}

         async Task showDoorTitle()
         {
        if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
        {
            msgCaption = string.Empty;
            errMsg2 = HebNouns.requiredFieldsAreEmpty;  //"שדות חובה לא מולאו, על מנת להמשיך נדרש למלא את כל שדות החובה";
                                                       // Js.InvokeVoidAsync("alert", errMsg);
            ErrMsgCssClass = "modal-body centeredMsg";
            openMsgBox = true;
            return;
        }
        hideDoorTitle = false;
        UiLogic.tabPageIsFilled("divDoorTitle", doorConfig);  //set redBorder on empty controls
        dtDivHeaderDoorTitle = uniteHeaderDoorTitleFlds();
        doorConfig.currTabName = "divDoorTitle";
        doorConfig.dtTabFlds = dtDivDoorTitle.Copy();
        doorConfig.divClasses["divDoorTitle"] = "divActive";
        doorConfig.divClasses["divProducts"] = "divNotActive";
        //int j = Array.IndexOf(UiLogic.propNames, "TRSH_WINGSNUMDES");
        //doorConfig.dicRefs[UiLogic.propNames[j]].FocusAsync();

        //ref: https://stackoverflow.com/questions/67360450/how-to-focus-an-element-when-making-it-visible-in-the-same-method-call
        //  thw 1st answer !
        doorConfig.disabledFlds["btnDoor"] = true;
        doorConfig.disabledFlds["general"] = doorConfig.disabledFlds["selectprod"] = true;  //disable prev buttons
        StateHasChanged();
        await Task.Delay(1);
        //await dlstWingsNum.FocusAsync();  // harcoded ElementReference !
        await doorConfig.dicRefs["TRSH_WINGSNUMDES"].FocusAsync();

       }

        bool showTabPage(Type pageType, string tabName)
        {
        errMsg2 = string.Empty;
        if (ActivatePage(tabName, doorConfig, ref errMsg2))
        {
            pageParams["doorConfig"] = doorConfig;
            if (pageParams.ContainsKey("disableLogo") && tabName != "movingwing")
                pageParams.Remove("disableLogo");
            showDynComp = true;
            pageParams2["doorConfig"] = doorConfig;
            showDyn2 = true;
            dyncompType = pageType;
            //doorConfig.btnClasses[tabName] = "buttonActive";
            doorConfig.markButton(tabName);

            // commented on 18/09/2022
            //if (!string.IsNullOrEmpty(doorConfig.prevTabName))
            //{
            //    if (doorConfig.prevTabName != doorConfig.currTabName)   // a bug or hinges issue : e.g. staticwing jumps over hinges directly to handle
            //                                                            //  because COMPLIENT is ELIDOOR and hinges is already filled !
            //    {
            //        myLogger.log.Error(string.Format("BUG: doorConfig.prevTabName  ({0}) != doorConfig.currTabName ({1}) - we fix that here",
            //                         doorConfig.prevTabName, doorConfig.currTabName));
            //        doorConfig.prevTabName = doorConfig.currTabName;
            //        //doorConfig.currTabName = tabName;
            //    }
            //}
            //else
            //{
            //    //string dbg = doorConfig.currTabName;
            //    doorConfig.prevTabName = doorConfig.currTabName;
            //    doorConfig.currTabName = tabName;
            //    doorConfig.btnClasses[doorConfig.prevTabName] = "buttonFilled";
            //}

            if (tabName != doorConfig.prevTabName)
            {
                int curr = Array.IndexOf(UiLogic.tabNames, tabName);
                int prev = Array.IndexOf(UiLogic.tabNames, doorConfig.prevTabName);
                if (prev < curr)
                    UiLogic.disableTabFlds(doorConfig, doorConfig.prevTabName);
                // 18/09/2022 : hardcoded setting the movingwing button to "buttonfilled" color
                //  because when we're at "hinges" and prec is "staticwing" 
                //  it sets teh color of "staticwing" OK but then clears teh color of "movingwing" !! a bug to invetigate 
                if (curr > Array.IndexOf(UiLogic.tabNames, "movingwing"))
                    doorConfig.btnClasses["movingwing"] = "buttonFilled";
            }

            doorConfig.btnClasses[doorConfig.prevTabName] = "buttonFilled";

            UiLogic.tabPageIsFilled(tabName, doorConfig);  //set redBorder on empty controls
            return true;
        }
        else
        {
            ErrMsgCssClass = "modal-body centeredMsg";
            openMsgBox = true;
            return false;
        }
        }
        //protected void showMw()
        async Task showMw()
        {
        doorConfig.divClasses["divHeader"] =
        doorConfig.divClasses["divProducts"] =
        doorConfig.divClasses["divDoorTitle"] = "divNotActive";
        @* doorConfig.divClasses["dynCompStyle"] = (doorConfig.showDecor ? "noBorder" : "divActive"); *@ 
        doorConfig.divClasses["dynCompStyle"] = "divActive";
        pageParams["disableLogo"] = disableLogo;
        UiLogic.tabPageIsFilled("movingwing", doorConfig);  //set redBorder on empty controls
        doorConfig.disabledFlds["btnDoor"] = true;  //
        if (showTabPage(typeof(Movingwing), "movingwing"))
        {
            if (!UiLogic.tabPageIsNotEmpty("movingwing", doorConfig))
            {
                StateHasChanged();
                await Task.Delay(1);
                await doorConfig.dicRefs["DOORWIDTH"].FocusAsync();
            }
            doorConfig.btnClasses["general"] =
            doorConfig.btnClasses["selectprod"] =
            doorConfig.btnClasses["proddes"] = "buttonFilled";  //"buttonDisabled";
            doorConfig.btnClasses["movingwing"] = "buttonActive";

            // disable prev navigation buttons 
            doorConfig.disabledFlds["general"] = doorConfig.disabledFlds["selectprod"] = doorConfig.disabledFlds["proddes"] = true;
            UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
        }
        }

        async Task  showStaticwing()
        {
        //showTabPage(typeof(Staticwing), "staticwing");
        UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
        Type staticwingType = (doorConfig.TRSH_WINGSNUMDES != "חצי כנף" ? typeof(Staticwing) : typeof(Halfwing));

        //if (showTabPage(typeof(Staticwing), "staticwing"))
        if (showTabPage(staticwingType, "staticwing"))
        {
            if (staticwingType == typeof(Staticwing))
                doorConfig.btnClasses["movingwing"] = "buttonFilled";

            if (!UiLogic.tabPageIsNotEmpty("staticwing", doorConfig))
            {
                StateHasChanged();
                await Task.Delay(1);
                await doorConfig.dicRefs["SWINGHASLOCK"].FocusAsync();
            }
            // debug 
            if (doorConfig.staticwingChanged)
            {
                int dbg = 17;
            }
            else
            {
                int dbg2 = 18;
            }
        }
        }
        async Task showMoving_Static_Wing()
        {
            UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
            if (doorConfig.TRSH_WINGSNUMDES != "חצי כנף")
            {
                UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                showMw();
            }
            else
            {
                        UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                        showStaticwing();
            }
        }

        //ref :https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
        //  the 2nd answer
        public void RefreshState()
        {
                this.StateHasChanged();
        }
        //private void doRestart()
        async Task doRestart()
        {
            UiLogic.clearDoorConfig(doorConfig);

            //does also in OnInitializedAsync() of the current page
            formDate = DateTime.Now;
            UiLogic.AppAllDefaults(doorConfig, ref errMsg);

            showProducts = false;
            hideDoorTitle = true;
            showDynComp = false;
            hideDivDoor = true;


            //doorConfig.btnClasses["restart"] = "buttonRed";
            //doorConfig.btnClasses["general"] = "buttonActive";
            //doorConfig.btnClasses["selectprod"] =
            //doorConfig.btnClasses["btnDoor"] =
            //doorConfig.btnClasses["proddes"] = "button";

            //doorConfig.divClasses["divHeader"] = "divActive";
            //doorConfig.divClasses["divProducts"] = 
            //doorConfig.divClasses["divDoorTitle"] = "divNotActive"; 

            //doorConfig.currTabName = "divHeader";
            //doorConfig.dtTabFlds = UiLogic.getTabFields("divHeader", doorConfig, ref errMsg);
            initFormStuffInDoorConfig(doorConfig);
            UiLogic.tabPageIsFilled("divHeader", doorConfig);

            // done also in OnAfterRender firstRenter==true  of the current page
            if (doorConfig != null && doorConfig.dicRefs.ContainsKey("FORMFILLER"))
            {
                StateHasChanged();
                await Task.Delay(1);
                await doorConfig.dicRefs["FORMFILLER"].FocusAsync();
            }
        }
        void submitForm()  //called when Enter is hit and not caught by onKeypressed event 
        {
        int x = 17;
        }

        //private async Task GetClaimsPrincipalData()
        //{
        //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //    var user = authState.User;

        //    if (user.Identity.IsAuthenticated)
        //    {
        //        authMessage = $"{user.Identity.Name} is authenticated.";
        //        claims = user.Claims;
        //        surnameMessage = 
        //            $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        //    }
        //    else
        //    {
        //        authMessage = "The user is NOT authenticated.";
        //    }
        //}
    }


    <table id="tblMainContainer">
        <tr>
            <td>
                <div id="divMainMenuButtons" dir="rtl" class="menuButtonsDiv">
                    <table id="tblmenuButtons">
                        <tr>
                            <td>
                                <button name="btnRestart" class="@doorConfig.btnClasses["restart"]"
                                        onclick="@restart"   @onfocus="@( () => enableRestart())"  >
                                    התחל מחדש
                                </button>
                            </td>
                            @{
                                void enableRestart()
                                {
                                    doorConfig.RestartClicked = true;  //RestartClicked = true;
                                }
                                void restart()
                                {
                                    if (!doorConfig.RestartClicked)  //(!RestartClicked)  // test 3/06/2022  - works fine !!!
                                        return;              // test

                                    msgCaption = string.Empty;
                                    errMsg2 = "תחילת שאלון חדש ?";
                                    MsgTitleCssClass = string.Empty;
                                    ErrMsgCssClass = "centeredMsg"; //string.Empty;
                                                                    // the actual restart is done in the YesNo section of MsgBox control
                                    YNissue = "restart";
                                    openYesNo = true;
                                }
                            }
                        </tr>
                        <tr>
                            <td>
                                <button name="btnGeneral" class="@doorConfig.btnClasses["general"]">פרטים כלליים</button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button name="btnSelectProd" class="@doorConfig.btnClasses["selectprod"]" disabled="@doorConfig.disabledFlds["selectprod"]"
                                        onclick="@try2ShowProdButtons">
                                    בחירת מוצר
                                </button>
                            </td>
                            @{
                                void try2ShowProdButtons()
                                {
                                    if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                    {
                                        msgCaption = string.Empty;  // just for debug
                                                                    //MsgTitleCssClass =
                                        errMsg2 = string.Format("שדות חובה לא מולאו, על מנת להמשיך נדרש למלא את כל שדות החובה");
                                        // Js.InvokeVoidAsync("alert", errMsg);
                                        ErrMsgCssClass = "modal-body centeredMsg";
                                        openMsgBox = true;
                                        return;
                                    }
                                    else
                                    {
                                    //showProducts = true;
                                        //doorConfig.divClasses["divHeader"] = "divNotActive";
                                        //doorConfig.divClasses["divProducts"] = "divActive";
                                        showDivProducts();
                                        doorConfig.disabledFlds["proddes"] = true;
                                        UiLogic.disableTabFlds(doorConfig, "divHeader");
                                    }
                                }
                            }
                        </tr>
                        <tr>
                            <td>
                                <button name="btnProdDes" class="@doorConfig.btnClasses["proddes"]" disabled="@doorConfig.disabledFlds["proddes"]"
                                        onclick="@showDoorTitle">
                                    תאור מוצר
                                </button>
                            </td>
                            @{
                                //void showDoorTitle()
                               
                            }
                        </tr>


                        @{
                            bool showTabs = false;
                        }
                        @if (!hideDivDoor)
                        {
                            <tr>
                                <td>
                                    <table id="tblTabButtons">
                                        <tr>
                                            <td>
                                                @{
                                                    bool disableMW = (doorConfig.TRSH_WINGSNUMDES == "חצי כנף");
                                                }
                                                    <button name="btnmovingwing" class="@doorConfig.btnClasses["movingwing"]"
                                                            disabled="@disableMW" @onclick=@( () => @showMw())>
                                                        כנף נעה
                                                    </button>
                                            </td>
                                            @{
                                                //void showMw()
                                                //{
                                                //    pageParams["disableLogo"] = disableLogo;
                                                //    UiLogic.tabPageIsFilled("movingwing", doorConfig);  //set redBorder on empty controls
                                                //    showTabPage(typeof(Movingwing), "movinwing");
                                                //    doorConfig.btnClasses["general"] =
                                                //    doorConfig.btnClasses["selectprod"] =
                                                //    doorConfig.btnClasses["proddes"] = "buttonFilled";  //"buttonDisabled";
                                                //    doorConfig.btnClasses["movingwing"] = "buttonActive";
                                                //}
                                            }
                                                            </tr>
                                                            <tr hidden="@hideBtnExtDecor">
                                            @{
                                                bool disableBtnExtDecor = false;
                                                //disableBtnExtDecor = !ActivatePage("extdecor", doorConfig, ref errMsg2);
                                                // 12/05/2022 : at present btnextdecor is always ENABLED
                                                //[TODO] when leaving Movingwing check whether it is filled.
                                                //  if it's not filled DISABLE btnextdecor

                                            }

                                                                <td>
                                                                    @*  class="@doorConfig.btnClasses["extdecor"]" *@
                                                                    <button name="btnextdecor"  @onclick="showExtdecor"
                                                    disabled="@disableBtnExtDecor" hidden="@hideBtnExtDecor" >
                                                                        פרטי דקורציה חוץ
                                                                    </button>
                                                                </td>
                                            @{
                                                void showExtdecor()
                                                {
                                                    showTabPage(typeof(Extdecor), "extdecor");
                                                }
                                            }

                                                            </tr>
                                                            <tr hidden="@hideBtnIntDecor">
                                                                <td>
                                                                    @* class="@doorConfig.btnClasses["intdecor"]" *@
                                                                    <button name="btnintdecor" 
                                                    @onclick="showIntdecor" hidden="@hideBtnIntDecor">
                                                                        פרטי דקורציה פנים
                                                                    </button>
                                                                </td>
                                            @{
                                                void showIntdecor()
                                                {
                                                    showTabPage(typeof(Intdecor), "intdecor");
                                                }
                                            }
                                                            </tr>
                                                            <tr>
                                            @{
                                                bool disableSw = false;
                                                disableSw = (doorConfig.TRSH_WINGSNUMDES == "כנף");
                                            }
                                                                <td>
                                                                    <button name="btnstaticwing" class="@doorConfig.btnClasses["staticwing"]" disabled="@disableSw"
                                                                             @onclick="showStaticwing">
                                                                        כנף קבועה
                                                                    </button>
                                                                </td>
                                            @{
                                                //void showStaticwing()
                                                //{
                                                //    showTabPage(typeof(Staticwing), "staticwing");
                                                //}
                                            }
                                                            </tr>
                                                            <tr>
                                                                <td>
                                                                    <button name="btnhinges" class="@doorConfig.btnClasses["hinges"]"
                                                    @onclick="showHinges">
                                                                        פרטי צירים
                                                                    </button>
                                                                </td>
                                            @{
                                                void showHinges()
                                                {
                                                    showTabPage(typeof(Hinges), "hinges");
                                                }
                                            }
                                                            </tr>
                                                            <tr hidden="true">   @* 07/07/2022 - tabPage is actually empty now  deleted: class="@doorConfig.btnClasses["handle"]" *@
                                                                <td>
                                                                    <button name="btnhandle" 
                                                                         @onclick="showHandle">
                                                                        ידיות אומנותיות
                                                                    </button>
                                                                </td>
                                            @{
                                                void showHandle()
                                                {
                                                    showTabPage(typeof(Handle), "handle");
                                                }
                                            }
                                                            </tr>
                                                            <tr>
                                                                <td>
                                                                    <button name="btnaccessories" class="@doorConfig.btnClasses["accessories"]"
                                                                       @onclick="showAccessories">
                                                                        נילווים
                                                                    </button>
                                                                </td>
                                            @{
                                                async Task showAccessories()
                                                {
                                                    if (showTabPage(typeof(Accessories), "accessories"))
                                                    {
                                                        StateHasChanged();
                                                        await Task.Delay(1);
                                                        await doorConfig.dicRefs["WETCOLORBOXID"].FocusAsync();
                                                    }
                                                }
                                              }
                                </tr>
                                    <tr>
                                    <td>
                                        <button name="btnManagerApproval" class="@doorConfig.btnClasses["managerapproval"]"
                                            @onclick="showManagerApproval">
                                            אישור מנהל
                                        </button>
                                    </td>
                                    @{
                                        void showManagerApproval() {}
                                    }
                                </tr>
                                <tr>
                                    <td>
                                        <button name="btnSave" class="@doorConfig.btnClasses["save"]"
                                            @onclick="btnSave_Click">
                                            שמירה בפריוריטי
                                        </button>
                                    </td>
                                    @{
                                                                    
                                    }
                                </tr>
                            </table>
                            <!-- end tblTabButtons -->
                                                </td>
                                                </tr>
                        }

                    </table>
                    <!-- end tblmenuButtons -->
                </div>
                <!-- end of divMainMenuButtons -->
            </td>
            <td id="tdMainForm">
                <div id="divMainForm" dir="rtl" class="mainFormDiv">
                    @* class="@doorConfig.divClasses["divHeader"]"   was "divNotActive" *@
                    <div id="divHeader" dir="rtl" class="@doorConfig.divClasses["divHeader"]"  >
                        <table>
                            <tr>
                                <td>
                                    <div class="tabPageTitle">
                                        <h1 class="rightLeftMargin">פרטים כלליים</h1>
                                    </div>
                                </td>
                            </tr>
                        </table>
                        <table id="tblLine1">
                            <tr>
                                <th>תאריך</th>
                                <th>ממלא ההזמנה</th>
                                <th>מס' הזמנת לקוח'</th>
                                <th>אסמכתא</th>
                                <th>תאריך אספקה משוער</th>
                            </tr>
                            <tr id="trHeaderL1Controls">
                                <td id="tdDate">
                                    <input type="date" name="txtDate" @bind="formDate" disabled="@doorConfig.disabledFlds["FORMDATE"]" />
                                    @code {
        // public DoorConfig? doorConfig; // = new DoorConfig();

        private DateTime _formDate = DateTime.Now;
        protected DateTime formDate
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _formDate = Convert.ToDateTime(doorConfig.FORMDATE);

                                            return _formDate;
                                        }
                                        set
                                        {
                                            _formDate = value;
                                            if (doorConfig == null)
                                            {
                                                doorConfig = new DoorConfig();
                                                doorConfig.initBorderColors();
                                            }
                                            doorConfig.FORMDATE = Helper.formatDate4Rest(_formDate);
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                        }
        }
}
                                </td>
                                <!-- end tdDate-->

                                <td id="tdFormFiller">
                                    @{
                                        int i1 = Array.IndexOf(UiLogic.propNames, "FORMFILLER");

                                            <input name="txtFormFiller" @bind="formFiller" dir="rtl" class="@doorConfig.borderColors["FORMFILLER"]"
                                           disabled="@doorConfig.disabledFlds["FORMFILLER"]"  @ref="doorConfig.dicRefs[UiLogic.propNames[i1]]"
                                                   @onfocus="@( () => UiLogic.HasFocus("FORMFILLER", doorConfig) )"
                                                   @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                   @onkeypress="doorConfig.KeyPressHandler" >
                                                  </input >
                                    }
                                    @* onkeypress="return event.keyCode!=13" *@
                                    @* onkeypress="@KeyPressHandler" *@


                                    @{
                                        // doorConfig.borderColors["FORMFILLER"] = "form-control " + doorConfig.borderColors["FORMFILLER"];
                                    }

                                    @code {

                                        //ElementReference txtFormFiller;
        protected string _formFiller;
        protected string formFiller
        {
                                        get
                                        {
                                        //currPropName = "FORMFILLER";
                                            if (doorConfig != null)
                                                _formFiller = doorConfig.FORMFILLER;

                                            return _formFiller;
                                        }
                                        set
                                        {
                                        // currPropName = "FORMFILLER";
                                            _formFiller = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.FORMFILLER = _formFiller;
                                                doorConfig.borderColors["FORMFILLER"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                                StateHasChanged();
                                            }
                                        }
        }
        //string[] Elements = {"txtFormFiller", "dlstCustDes", "txtEndCustDes", "txtInstallAddress", "ShipAddress"  };
        //ElementReference txtShipAddress;

        bool RestartClicked = true;  // initialize 

        //async Task KeyPressHandler(KeyboardEventArgs e)
        //{
        //                                doorConfig.RestartClicked = false;  // we're in a field not btnRestart !
        //                                //DataTable dtTabFlds = new DataTable();
        //                                if (e.Key.ToLowerInvariant() == "enter")
        //                                {
        //                                    //RestartClicked = false;
        //                                    int j = 0;
        //                                    DataTable dtTabFlds = new DataTable();
        //                                    string currTabName = UiLogic.getTabOfField(currPropName);
        //                                    switch (currTabName)
        //                                    {
        //                                        case "divHeader":
        //                                            dtTabFlds = dtDivHeader;
        //                                            break;
        //                                        case "divDoorTitle":
        //                                            dtTabFlds = dtDivHeaderDoorTitle;
        //                                            break;
        //                                    }
        //                                    string nextfld = UiLogic.getNextTabFld(doorConfig, dtTabFlds, currPropName);
        //                                    if (!string.IsNullOrEmpty(nextfld))
        //                                    {
        //                                            // if (nextfld == "SHIPADDRESS")
        //                                    // {
        //                                    //     //int x = 17;
        //                                    //     txtShipAddress.FocusAsync();  // Hardcoded the ElementReference of SHIPADDRESS
        //                                        //                                   //  as it does not set focus to by  doorConfig.dicRefs[UiLogic.propNames[j]].FocusAsync();
        //                                        //                                   //  when UiLogic.propNames[j] == "SHIPADDRESS" !!!
        //                                        //
        //                                        //}
        //                                        // else
        //                                        // {
        //                                        j = Array.IndexOf(UiLogic.propNames, nextfld);
        //                                        if (doorConfig.dicRefs.ContainsKey(UiLogic.propNames[j]))
        //                                            doorConfig.dicRefs[UiLogic.propNames[j]].FocusAsync();
        //                                        return;
        //                                        //}
        //                                    }
        //                                    else
        //                                    {
        //                                        if (UiLogic.try2UpdateBtnClass(doorConfig, currTabName))
        //                                        {
        //                                            if (currTabName == "divHeader")
        //                                            {
        //                                                showProducts = true;
        //                                                await refBtnDoor.FocusAsync();
        //                                                this.StateHasChanged();
        //                                            }
        //                                            else if (currTabName == "divDoorTitle")
        //                                                showMw();
        //                                        }
        //                                    }
        //                                }
        //                                else if (e.Key.ToLowerInvariant() == "down")
        //                                {
        //                                    int x = 17;
        //                                }
        //}    // end keyPressHandler() 

        //-------------------
        void HasFocus(string currFldName)
        {
                                        currPropName = currFldName;       // System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
                                        doorConfig.borderColors[currFldName] = "focusBorder";
        }
        void LostFocus()
        {
            doorConfig.borderColors["FORMFILLER"] = (!string.IsNullOrEmpty(_formFiller) ? "blueBorder" : "redBorder");
            //System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
        }
                                    }
                                </td>
                                <!-- end tdFormFiller -->
                                <td id=tdCustOrdName>
                                    @{
                                        int i15 = Array.IndexOf(UiLogic.propNames, "CUSTORDNAME");

                                            <input name="txtCustOrdName" @bind="custOrdName" dir="rtl" class="@doorConfig.borderColors["CUSTORDNAME"]"
                                           disabled="@doorConfig.disabledFlds["CUSTORDNAME"]"  @ref="doorConfig.dicRefs[UiLogic.propNames[i15]]"
                                                   @onfocus="@( () => UiLogic.HasFocus("CUSTORDNAME", doorConfig) )"
                                                    @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                               @onkeypress="doorConfig.KeyPressHandler" >
                                            </input >
                                    }

                                    @code {

        protected string _custOrdName;
        protected string custOrdName
        {
                                        get
                                        {
                                            //currPropName = "FORMFILLER";
                                            if (doorConfig != null)
                                                _custOrdName = doorConfig.CUSTORDNAME;

                                            return _custOrdName;
                                        }
                                        set
                                        {
                                            _custOrdName = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.CUSTORDNAME = _custOrdName;
                                                doorConfig.borderColors["CUSTORDNAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }
        }
                                        }
                                </td>
                                <td id="tdReference">
                                    <input name="txtReference" @bind="reference" @ref="txtReference" disabled=@true />   
                                        @* 01/06/2022 at preset always disabled *@

                                    @* <InputText name="txtReference" @bind-Value="reference" style="outline:none"
                                    onkeypress="return event.keyCode!=13" />
                                    *@

                                    @code {
        private ElementReference txtReference;
        protected string _reference;
        protected string reference
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _reference = doorConfig.REFERENCE;

                                            return _reference;
                                        }
                                        set
                                        {
                                            _reference = value;

                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(PrApiCalls.getReference(_reference, ref errMsg)))
                                                {
                                                    ErrMsgCssClass = "modal-body centeredMsg";
                                                    errMsg2 = "אסמכתא עם מספר זה כבר קיימת במערכת";
                                                    openMsgBox = true;
                                                    txtReference.FocusAsync();
                                                }
                                                else
                                                    doorConfig.REFERENCE = _reference;

                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }
        }
                                    }
                                </td>
                                <!-- end tdReference -->
                                <td id="tdEstShipDate">
                                    <input type="date" name="txtEstShipDate" @bind="estShipDate" disabled="@doorConfig.disabledFlds["ESTSHIPDATE"]" />
                                    @code {
                                        private DateTime _estShipDate = DateTime.Now;
        protected DateTime estShipDate
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(doorConfig.ESTSHIPDATE))
                                                    _estShipDate = Convert.ToDateTime(doorConfig.ESTSHIPDATE);
                                                else
                                                {
                                                    _estShipDate = _formDate.AddDays(21);
                                                    doorConfig.ESTSHIPDATE = Helper.formatDate4Rest(_estShipDate);
                                                }
                                            }

                                            return _estShipDate;
                                        }
                                        set
                                        {
                                            _estShipDate = value;
                                            doorConfig.ESTSHIPDATE = Helper.formatDate4Rest(_estShipDate);
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                        }
        }
}
                                </td>
                                <!-- end tdEstShipDate -->
                                <td>
                                    <label id="lblMsgL1" />
                                </td>
                            </tr>
                            <!-- end trHeaderL1Controls -->
                        </table>
                        <!-- end tblLine1 -->

                        <table id="tblLine2">
                            <tr>
                                <th>שם משווק</th>
                                <th>שם לקוח קצה</th>
                                <th>כתובת לאספקה</th>
                                <th>כתובת זמנית לאספקה</th>
                            </tr>
                            <tr id="trLine2Controls">
                                <td>
                                    @*
                                        <select name="dlstAgent" @bind="AGENT" class="@doorConfig.borderColors["AGENT"]">
                                        @if (lstAgents != null)
                                        {
                                            @foreach (AGENT_Class a in lstAgents)
                                            {
                                                <option value="@a.AGENT">@a.AGENTNAME</option>
                                            }
                                        }
                                        </select>
                                    *@
                                    
                                    @{
                                        int i2 = Array.IndexOf(UiLogic.propNames, "CUST");
                                            <select name="dlstCustDes" @bind="CUST" class="@doorConfig.borderColors["CUST"]"  disabled="@doorConfig.disabledFlds["CUST"]" 
                                                    @ref="doorConfig.dicRefs[UiLogic.propNames[i2]]"    
                                                    @onfocus="@( () => UiLogic.HasFocus("CUST", doorConfig) )" 
                                                     @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                     @onkeypress="doorConfig.KeyPressHandler"  > 
                                                     
                                                      @*     onkeydown="@KeyPressHandler"  > *@
                                           
                                            @if (lstCustomers != null)
                                            {
                                                @foreach (CUSTOMER_Class c in lstCustomers)
                                                {
                                                     <option value="@c.CUST">@c.CUSTDES</option>
                                                }
                                            }
                                            </select>
                                    }
                                </td>
                                @code {
                                    public bool disableLogo = false;
        private int _CUST = 0;
        protected int CUST
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                            _CUST = doorConfig.CUST;

                                        return _CUST;
                                    }
                                    set
                                    {
                                        _CUST = value;
                                        if (doorConfig != null)
                                        {
                                            if (_CUST != doorConfig.CUST)
                                                doorConfig.TMPSHIPADDRESS = string.Empty;

                                            doorConfig.CUST = _CUST;
                                            doorConfig.borderColors["CUST"] = (value != 0 ? "blueBorder" : "redBorder");
                                            //
                                            if (_CUST != 0)
                                            {
                                                // set Address and Logo based on _CUST 
                                                CUSTOMER_Class Cust = PrApiCalls.getCustomer((int)doorConfig.CUST, ref errMsg);
                                                if (Cust != null)
                                                {
                                                    ShipAddress = string.Format("{0} {1} {2}", Cust.ADDRESS, Cust.ADDRESS2, Cust.ADDRESS3);
                                                    //if (!string.IsNullOrEmpty(Cust.TRSH_LOGO) && Cust.TRSH_LOGO == "Y")
                                                    //{
                                                    //    disableLogo = true;
                                                    //    doorConfig.LOGO = string.Empty;   //chkbLogo.Checked = false;
                                                    //}
                                                    //
                                                    doorConfig.TRSH_COMPLIENT = PrApiCalls.ELIDOOR_COMPLIENT; // new 11/07/2022 - the default for COMPLIENT is always ELIDOOR
                                                    doorConfig.useLOGO =  (Cust.TRSH_NOTECOMPLIENT != "Y");
                                                    //doorConfig.TURBOAPPARATUS = Cust.TRSH_TURBO;
                                                    doorConfig.useTurbo = (Cust.TRSH_TURBO == "Y");  //no serialized just to persist cust info
                                                    // all the following logic moved to movingwing and staticwing - because we can't set these fields here 
                                                    //  before the MODEL and WINGSNUM were selected and we know that the relevant wings will be filled .
                                                    //if (useELOGO) 
                                                    //{
                                                    //    doorConfig.useLOGO = PrApiCalls.ELIDOOR_COMPLIENT;  // 1 !
                                                    //    doorConfig.TURBOAPPARATUS = "Y";
                                                    //}
                                                    //else
                                                    //{
                                                    //    doorConfig.useLOGO = 0;
                                                    //    doorConfig.TURBOAPPARATUS = string.Empty;
                                                    //}
                                                    //// set relevant defaults 11/07/2022
                                                    //doorConfig.LOGO = (doorConfig.useLOGO == 1 ? "Y" : string.Empty);  // new 11/07/2022 
                                                    //doorConfig.TURBOAPPARATUS = (doorConfig.useLOGO == 1 ? "Y" : string.Empty);  // new 11/07/2022 
                                                    //doorConfig.SWING_TURBO = (doorConfig.useLOGO == 1 ? "Y" : string.Empty);  // new 11/07/2022 
                                                    //
                                                    //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "selectprod");
                                                    if (UiLogic.try2UpdateBtnClass(doorConfig, "divHeader"))
                                                    {
                                                      //showDivProducts();
                                                    }

                                                    //if (doorConfig.dicRefs.ContainsKey("SHIPADDRESS"))
                                                    //    doorConfig.dicRefs["SHIPADDRESS"].FocusAsync();
                                                }
                                            }
                                        }
                                    }
        }
}
                                <td>
                                   @* <select name="dlstCustDes" @bind="CUST" class="@doorConfig.borderColors["CUST"]">
                                        @if (lstCustomers != null)
                                        {
                                            @foreach (CUSTOMER_Class c in lstCustomers)
                                            {
                                                        <option value="@c.CUST">@c.CUSTDES</option>
                                            }
                                        }
                                    </select>
                                    *@
                                    @{
                                        int i3 = Array.IndexOf(UiLogic.propNames, "ENDCUSTDES");
                                        //currPropInd = i3;
                                            <input name="txtEndCustDes" @bind="ENDCUSTDES" dir="rtl" class="@doorConfig.borderColors["ENDCUSTDES"]" 
                                       disabled="@doorConfig.disabledFlds["ENDCUSTDES"]"
                                            @onfocus="@( () => UiLogic.HasFocus("ENDCUSTDES",doorConfig) )" 
                                             @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                               @onkeypress="doorConfig.KeyPressHandler"
                                               @ref="doorConfig.dicRefs[UiLogic.propNames[i3]]" />
                                    }
                                    @code {
        // public bool disableLogo = false;
        //ElementReference txtEndCustDes;
        private string _ENDCUSTDES = string.Empty;
        protected string ENDCUSTDES
        {
                                        get
                                        {
                                            //currPropName = "ENDCUSTDES";
                                            if (doorConfig != null)
                                                _ENDCUSTDES = doorConfig.ENDCUSTDES;

                                            return _ENDCUSTDES;
                                        }
                                        set
                                        {
                                            _ENDCUSTDES = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.ENDCUSTDES = _ENDCUSTDES;
                                                //doorConfig.borderColors["ENDCUSTDES"] = (!string.IsNullOrEmpty(value)  ? "blueBorder" : "redBorder");  // it's an optional field 01/06/2022
                                                                                                                                                       // 18/06/2022 it's required !
                                                                                                                                                       // 06/07/2022 it's Optional
                                                if (UiLogic.try2UpdateBtnClass(doorConfig, "divHeader"))
                                                {
                                                       // showDivProducts();
                                                }
                                            }
                                        }

        }
}

                                @* end ENDCUSTDES *@
                                 </td>
                                 @*      shipAddress*@
                                 <td>
                                     @{
                                        int i4 = Array.IndexOf(UiLogic.propNames, "SHIPADDRESS");
                                            <input name="txtShipAddress" dir="rtl" @bind="ShipAddress" size="50" class="@doorConfig.borderColors["SHIPADDRESS"]" 
                                        disabled="@doorConfig.disabledFlds["SHIPADDRESS"]"  
                                        @onfocus="@( () => UiLogic.HasFocus("SHIPADDRESS",doorConfig) )"
                                        @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                        @onkeypress="doorConfig.KeyPressHandler"
                                        @ref="doorConfig.dicRefs[UiLogic.propNames[i4]]" />

                                        @*  was  @ref="txtShipAddress"  *@  
                                    }
                                    @* this does not work !! @ref="doorConfig.dicRefs[UiLogic.propNames[i4]]"  *@
                                    @* <InputText dir="rtl"  @bind-Value="ShipAddress" size="80" class="@doorConfig.borderColors["SHIPADDRESS"]"  style="outline:none"
                                    onkeypress="return event.keyCode!=13"   />
                                    *@
                                </td>
                                @code {
        //ElementReference txtShipAddress;
        protected string _ShipAddress;  // = string.Empty;
        protected string ShipAddress
        {
                                    get
                                    {
                                        //currPropName = "SHIPADDRESS";
                                        if (doorConfig != null)
                                        {
                                            _ShipAddress = doorConfig.SHIPADDRESS;
                                        }
                                        return _ShipAddress;
                                    }
                                    set
                                    {
                                        _ShipAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.SHIPADDRESS = _ShipAddress;
                                            doorConfig.borderColors["SHIPADDRESS"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            if (UiLogic.try2UpdateBtnClass(doorConfig, "divHeader"))
                                            {
                                                        //showDivProducts();
                                            }
                                        }
                                    }
        }
                                }
                                @* end ShipAddress *@

                                <td>
                                     @{
                                        int i5 = Array.IndexOf(UiLogic.propNames, "TMPSHIPADDRESS");
                                            <input name="txtTmpShipAddress" dir="rtl" @bind="TmpShipAddress" size="40" class="@doorConfig.borderColors["TMPSHIPADDRESS"]" 
                                               disabled="@doorConfig.disabledFlds["TMPSHIPADDRESS"]"   
                                               @onfocus="@( () => UiLogic.HasFocus("TMPSHIPADDRESS", doorConfig) )"
                                                @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                               @onkeypress="doorConfig.KeyPressHandler"
                                               @ref="doorConfig.dicRefs[UiLogic.propNames[i5]]"/> 
                                    }
                                    @* <InputText dir="rtl" @bind-Value="InstallAddress" class="@doorConfig.borderColors["INSTALLADDRESS"]"  style="outline:none"
                                      onkeypress="return event.keyCode!=13"/>
                                      *@
                                </td>
                                @code {
        protected string _TmpShipAddress; // = string.Empty;
        protected string TmpShipAddress
        {
                                    get
                                    {
                                        //currPropName = "TMPSHIPADDRESS";
                                        if (doorConfig != null)
                                        {
                                            _TmpShipAddress = doorConfig.TMPSHIPADDRESS;
                                        }
                                        return _TmpShipAddress;
                                    }
                                    set
                                    {
                                        _TmpShipAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.TMPSHIPADDRESS = _TmpShipAddress;
                                            //
                                            //doorConfig.borderColors["TMPSHIPADDRESS"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder"); // optional field 01/06/2022
                                                                                                                                    // 18/06/2022 - required
                                                                                                                                    // 06/07/2022 - optional
                                            // per CU request:  if TMPSHIPADDRESS got a non empty value SHIPADDRESS should be cleared and disabled 
                                            if (!string.IsNullOrEmpty(value))
                                            {
                                                doorConfig.SHIPADDRESS = string.Empty;
                                                doorConfig.disabledFlds["SHIPADDRESS"] = true;
                                                this.StateHasChanged();
                                            }
                                            else
                                            {
                                                doorConfig.borderColors["SHIPADDRESS"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                            }
                                           if (UiLogic.try2UpdateBtnClass(doorConfig, "divHeader"))
                                           {
                                                      //  showDivProducts();
                                           }
                                        }
                                    }
        }
                                }
                                @* end TmpShipAddress  *@
                                                            </tr>
                            <!-- end trLine2Controls -->
                        </table>
                        <!-- end tblLine2 -->
                    </div>
                    <!--end of divHeader -->
                    @if (showProducts)
                    {                       @* class="@doorConfig.divClasses["divProducts"]"    was class="divNotActive"*@
                                            <div id="divProducts" class="@doorConfig.divClasses["divProducts"]" >
                                                <table>
                                                    <tr>
                                                        <td>
                                                            <div class="tabPageTitle">
                                                                <h1 class="rightLeftMargin">בחירת מוצר</h1>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </table>
                                                <table id="tblProducts">
                                                    <tr>
                                                        <td id="tdBtnDoor">
                                                            <button name="btnDoor" @onclick="btnDoorClicked" class="@doorConfig.btnClasses["btnDoor"]"
                                                        disabled="@doorConfig.disabledFlds["btnDoor"]"
                                                        @ref="@refBtnDoor"
                                                        >דלת</button>
                                        @code
                                        {
                                        private void btnDoorClicked()
                                            {
                                        if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                        {
                                            errMsg2 = string.Format("יש למלא את כל השדות בכותרת");
                                            // Js.InvokeVoidAsync("alert", errMsg);
                                            openMsgBox = true;
                                            return;
                                        }
                                        else
                                        {
                                            pageParams["doorConfig"] = doorConfig;
                                            pageParams["disableLogo"] = disableLogo;
                                            //dyncompType = typeof(Movingwing);
                                            hideDivDoor = false;
                                            doorConfig.btnClasses["general"] =   //"buttonLostFocus";
                                            doorConfig.btnClasses["selectprod"] = "buttonFilled";
                                            doorConfig.divClasses["divHeader"] = "divNotActive";

                                            doorConfig.btnClasses["proddes"] = "buttonActive";
                                            doorConfig.disabledFlds["proddes"] = false;
                                            //showDoorTitle();
                                                    //doorConfig.divClasses["divProducts"] = "divNotActive";
                                                    doorConfig.divClasses["divDoorTitle"] = "divActive";

                                                    doorConfig.btnClasses["btnDoor"] = "buttonActive";
                                                    UiLogic.disableTabFlds(doorConfig, "divHeader");
                                                    this.StateHasChanged();
                                                }
                                            }
                                            @*  end btnDoorClicked *@
                                        }
                                </td>
                                <!-- end tdBtnDoor -->
                                <td>
                                    <button name="btnLintel" class="@doorConfig.btnClasses["btnLintel"]"  disabled="@doorConfig.disabledFlds["btnLintel"]" >משקוף</button>
                                </td>
                                <td>
                                    <button name="btnCover" class="@doorConfig.btnClasses["btnCover"]"  disabled="@doorConfig.disabledFlds["btnCover"]" >חיפוי</button>
                                </td>
                                <td>
                                    <button name="btnSideUnit" class="@doorConfig.btnClasses["btnSideUnit"]" disabled="@doorConfig.disabledFlds["btnSideUnit"]" >יחידת צד</button>
                                </td>
                                <td>
                                    <button name="btnECabinet" class="@doorConfig.btnClasses["btnECabinet"]"  disabled="@doorConfig.disabledFlds["btnECabinet"]" >ארון חשמל</button>
                                </td>
                                <td>
                                    <button name="btnShelves" class="@doorConfig.btnClasses["btnShelves"]"  disabled="@doorConfig.disabledFlds["btnShelves"]" >מדפים</button>
                                </td>
                            </tr>
                        </table>
                        <!--end tblProducts -->
                    </div>

                    // refBtnDoor.FocusAsync();             // didn't get a value yet , it null - invalidOperationException
                                            <!-- end divProducts -->
                    }  @* end if (showProducts) *@

                    <div id="divDoor" dir="rtl" hidden="@hideDivDoor">

                        @*  style="border: solid; border-color: black; border-radius: 10px" 
                            class="@doorConfig.divClasses["divDoorTitle"]"  was class="divNotActive"
                        *@
                        <div id="divDoorTitle" dir="rtl"  class="@doorConfig.divClasses["divDoorTitle"]"  hidden="@hideDoorTitle">
                            <table>
                            <tr>
                                <td>
                                    <div class="tabPageTitle">
                                        <h1 class="rightLeftMargin">תיאור מוצר</h1>
                                    </div>
                                </td>
                            </tr>
                        </table>
                            <table id="tblDoorTitle">
                                <tr>
                                    <th id="thWingsNum">מיפתח</th>
                                    <th id="thTRSH_MODELNAME">דגם</th>

                                    @* <th id="thOpenMode">צורת פתיחה</th>  moved to Movingwing.razor  *@

                                    <th id="thDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">עיצוב דקורציה (חוץ,פנים,דו צדדי)</th>
                                    <th id="thComplient">תואם</th>
                                    <th id="thMeasuresDoc">מצורף נספח מדידה</th>

                                    @* <th id="thFamily">סידרה</th> *@
                                </tr>
                                <tr>
                                    <td>
                                        @{
                                            int i6 = Array.IndexOf(UiLogic.propNames, "TRSH_WINGSNUMDES");
                                            <select name="dlstWingsNum" @bind="WingsNum" class="@doorConfig.borderColors["TRSH_WINGSNUMDES"]" 
                                              disabled="@doorConfig.disabledFlds["TRSH_WINGSNUMDES"]"  
                                              @ref="doorConfig.dicRefs[UiLogic.propNames[i6]]"
                                                   @onfocus="@( () => UiLogic.HasFocus("TRSH_WINGSNUMDES", doorConfig) )" 
                                                   @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                   @onkeypress="doorConfig.KeyPressHandler" >

                                                @*
                                                     @ref="doorConfig.dicRefs[UiLogic.propNames[i6]]"
                                                      @ref="dlstWingsNum" 

                                                <option>בחר סוג מיפתח</option>
                                                <option>כנף</option>
                                                <option>כנף וחצי</option>
                                                <option>דו כנפי</option>
                                            *@
                                                @if (PrApiCalls.lstWingsNum != null)
                                                {
                                                    @foreach (WingsNum_Class wn in PrApiCalls.lstWingsNum)
                                                    {
                                                                 <option value="@wn.TRSH_WINGSNUMDES">@wn.TRSH_WINGSNUMDES</option>
                                                    }
                                                }
                                            </select>
                                        }
                                    </td>
                                    @code
                                    {
                                        //protected bool disableStaticWing = false;

        protected string _WingsNum = string.Empty;
        protected string WingsNum
        {
                                        get
                                        {
                                        //currPropName = "TRSH_WINGSNUMDES";
                                            if (doorConfig != null)
                                            {
                                                _WingsNum = doorConfig.TRSH_WINGSNUMDES;
                                            }
                                            return _WingsNum;
                                        }
                                        set
                                        {
                                            _WingsNum = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.TRSH_WINGSNUMDES = _WingsNum;
                                                if (!string.IsNullOrEmpty(value) && (!string.IsNullOrEmpty(doorConfig.TRSH_MODELNAME)))
                                                {
                                                    doorConfig.PARTNAME = PrApiCalls.getPARTNAMEbyModelWings(doorConfig, ref errMsg);
                                                    if (string.IsNullOrEmpty(doorConfig.PARTNAME))
                                                    {
                                                        errMsg2 = "לא קיים פריט  עם הדגם והמיפתח שציינת";
                                                        openMsgBox = true;
                                                        doorConfig.dicRefs["TRSH_MODELNAME"].FocusAsync();
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        // get PART FAMILY
                                                        FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                                        doorConfig.FAMILYNAME = familyOfPart.FAMILYNAME;
                                                        doorConfig.borderColors["TRSH_WINGSNUMDES"] = "blueBorder";
                                                        if (UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle"))
                                                        {
                                                            // doorConfig.disabledFlds["btnDoor"] = true;
                                                            // StateHasChanged();
                                                            //if (doorConfig.TRSH_WINGSNUMDES != "חצי כנף")
                                                            //{
                                                            //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                            //    showMw();
                                                            //}
                                                            //else
                                                            //{
                                                            //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                            //    showStaticwing();
                                                            //}
                                                            //showMoving_Static_Wing();
                                                            return;
                                                        }
                                                    }
                                                }
                                                doorConfig.borderColors["TRSH_WINGSNUMDES"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                            }

                                            //disableStaticWing =  (_WingsNum == "כנף");
                                        }
        }

                                    }

                                    <td>
                                         @{
                                            int i7 = Array.IndexOf(UiLogic.propNames, "TRSH_MODELNAME");
                                            //currPropInd = i7;
                                            @*
                                            <select name="dlstModelName" @bind="TRSH_MODELNAME" class="@doorConfig.borderColors["TRSH_MODELNAME"]" 
                                              disabled="@doorConfig.disabledFlds["TRSH_MODELNAME"]" 
                                              @ref="doorConfig.dicRefs[UiLogic.propNames[i7]]"  
                                                   @onfocus="@( () => UiLogic.HasFocus("TRSH_MODELNAME", doorConfig) )"  
                                                   @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                   @onkeypress="doorConfig.KeyPressHandler" >

                                                @if (PrApiCalls.lstModels != null)
                                                {
                                                    @foreach (Model_Class m in PrApiCalls.lstModels)
                                                    {
                                                          <option value="@m.TRSH_MODELNAME">@m.TRSH_MODELDES</option>
                                                    }
                                                }
                                            </select>
                                            replaced html <select> by html <datalist> .
                                            ref: https://jscurious.com/html-datalist-tag-for-filter-search/
                                            *@
                                            
                                            <input list="lstModels1" @bind="TRSH_MODELNAME" class="@doorConfig.borderColors["TRSH_MODELNAME"]" 
                                             disabled="@doorConfig.disabledFlds["TRSH_MODELNAME"]" 
                                              @ref="doorConfig.dicRefs[UiLogic.propNames[i7]]"  
                                              @onfocus="@( () => UiLogic.HasFocus("TRSH_MODELNAME", doorConfig) )"  
                                              @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                              @onkeypress="doorConfig.KeyPressHandler"
                                            />
                                            <datalist id="lstModels1" >
                                            @if (PrApiCalls.lstModels != null)
                                                {
                                                    @foreach (Model_Class m in PrApiCalls.lstModels)
                                                    {
                                                          <option value="@m.TRSH_MODELNAME">@m.TRSH_MODELNAME</option>
                                                    }
                                                }
                                            </datalist>
                                        }
                                    </td>
                                    @code {
                                        // private ElementReference dlstModelName;
        protected string _TRSH_MODELNAME = string.Empty;
        protected string TRSH_MODELNAME
        {
                                        get
                                        {
                                        //currPropName = "TRSH_MODELNAME";
                                            if (doorConfig != null)
                                            {
                                                _TRSH_MODELNAME = doorConfig.TRSH_MODELNAME;
                                            }
                                            return _TRSH_MODELNAME;
                                        }
                                        set
                                        {
                                            int dbg = 0;
                                            //currPropName = "TRSH_MODELNAME";
                                            _TRSH_MODELNAME = value;
                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(doorConfig.TRSH_MODELNAME) && UiLogic.tabPageIsNotEmpty("movingwing", doorConfig))
                                                {
                                                    msgCaption = string.Empty;
                                                    errMsg2 = "שינוי הנתונים ימחק את כל הנתונים שמולאו בלשוניות הבאות ?";
                                                    MsgTitleCssClass = string.Empty;
                                                    ErrMsgCssClass = "centeredMsg"; //string.Empty;
                                                                                    // the actual restart is done in the YesNo section of MsgBox control
                                                    YNissue = "clear";
                                                    openYesNo = true;
                                                    if (!ansYes)
                                                    {
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        UiLogic.clearFollowingTabFields(doorConfig, "divDoorTitle");
                                                    }
                                                }
                                                doorConfig.TRSH_MODELNAME = value;
                                                Model_Class model = PrApiCalls.getModel(doorConfig.TRSH_MODELNAME, ref errMsg);
                                                doorConfig.meaged = model.TRSH_MEAGEDNAME;
                                                doorConfig.TRSH_DOOR_HWCATCODE = model.TRSH_DOOR_HWCATCODE;
                                                doorConfig.borderColors["TRSH_MODELNAME"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                                if (!string.IsNullOrEmpty(value) && (string.IsNullOrEmpty(doorConfig.TRSH_WINGSNUMDES)))
                                                {
                                                    if (!PrApiCalls.existsPartOfModel(doorConfig, ref errMsg))
                                                    {
                                                        errMsg2 = "לא קיים פריט  עם הדגם שציינת";
                                                        openMsgBox = true;
                                                        doorConfig.dicRefs["TRSH_MODELNAME"].FocusAsync();
                                                        return;
                                                    }
                                                }
                                                else if (!string.IsNullOrEmpty(value) && (!string.IsNullOrEmpty(doorConfig.TRSH_WINGSNUMDES)))
                                                {
                                                    doorConfig.PARTNAME = PrApiCalls.getPARTNAMEbyModelWings(doorConfig, ref errMsg);
                                                    if (string.IsNullOrEmpty(doorConfig.PARTNAME))
                                                    {
                                                        errMsg2 = "לא קיים פריט  עם הדגם והמיפתח שציינת";
                                                        openMsgBox = true;
                                                        doorConfig.dicRefs["TRSH_MODELNAME"].FocusAsync();
                                                        return;
                                                    }
                                                    // get PART FAMILY
                                                    FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                                    doorConfig.FAMILYNAME = familyOfPart.FAMILYNAME;
                                                }
                                                UiLogic.applyModelDefaults(doorConfig);
                                                applyDecorFormat2Btns();
                                                dbg = doorConfig.TRSH_HARDWARE;
                                                if (UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle"))
                                                {
                                                    //if (doorConfig.TRSH_WINGSNUMDES != "חצי כנף")
                                                    //{
                                                    //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                    //    showMw();
                                                    //}
                                                    //else
                                                    //{
                                                    //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                    //    showStaticwing();
                                                    //}
                                                    //showMoving_Static_Wing();
                                                    return;
                                                }

                                            }
                                        }
        }
}

                                    @code
                                    {
                                        protected void applyDecorFormat2Btns()
        {
                                        switch (doorConfig.DECORFORMAT)
                                        {
                                            case "ללא":
                                                hideBtnExtDecor = hideBtnIntDecor = true;
                                                break;
                                            case "חוץ":
                                                //hideBtnExtDecor = false;  //show
                                                //hideBtnIntDecor = true;
                                                doorConfig.showDecor = true;
                                                break;
                                            case "פנים":
                                                //hideBtnExtDecor = true;
                                                //hideBtnIntDecor = false;  //show
                                                 doorConfig.showDecor = true;
                                                break;
                                            case "דו צדדי":
                                                //hideBtnExtDecor = false;
                                                //hideBtnIntDecor = false;  //show
                                                 doorConfig.showDecor = true;
                                                break;
                                        }
        }
                                    }
                                    <td id="tdDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">
                                         @{
                                            int i8 = Array.IndexOf(UiLogic.propNames, "DECORFORMAT");
                                            <select name="dlstDecorFormat" @bind="DecorFormat" class="@doorConfig.borderColors["DECORFORMAT"]"
                                         disabled="@doorConfig.disabledFlds["DECORFORMAT"]"  
                                         @ref="doorConfig.dicRefs[UiLogic.propNames[i8]]" 
                                              @onfocus="@( () => UiLogic.HasFocus("DECORFORMAT", doorConfig) )" 
                                              @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                   @onkeypress="doorConfig.KeyPressHandler" >
                                                <option></option>
                                                <option>@HebNouns.None</option>
                                                <option>@HebNouns.External</option>
                                                <option>@HebNouns.Internal</option>
                                                <option disabled="@UiLogic.disableOption(doorConfig,"dlstDecorFormat","דו צדדי")">דו צדדי</option>
                                                @* see Helper.DecorFormat2Code(...) method *@
                                            </select>
                                        }
                                    </td>
                                    @code {
                                        protected string _DecorFormat = string.Empty;
        protected string DecorFormat
        {
                                        get
                                        {
                                        //currPropName = "DECORFORMAT";
                                            if (doorConfig != null)
                                            {
                                            // UiLogic.applyFldDefault(doorConfig, "dlstDecorFormat");
                                                _DecorFormat = doorConfig.DECORFORMAT;
                                            }
                                            return _DecorFormat;
                                        }
                                        set
                                        {
                                            _DecorFormat = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.DECORFORMAT = _DecorFormat;
                                                doorConfig.borderColors["DECORFORMAT"] = (!string.IsNullOrEmpty(value) ? "blueBorder" : "redBorder");
                                                //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle", "proddes", "movingwing");

                                                applyDecorFormat2Btns();
                                                if (UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle"))
                                                {
                                                    //if (doorConfig.TRSH_WINGSNUMDES != "חצי כנף")
                                                    //{
                                                    //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                    //    showMw();
                                                    //}
                                                    //else
                                                    //{
                                                    //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                    //    showStaticwing();
                                                    //}
                                                    //showMoving_Static_Wing();
                                                    return;
                                                }
                                            }
                                        }
                                      }
                                    }

                                    <td>
                                         @{
                                            int i9 = Array.IndexOf(UiLogic.propNames, "TRSH_COMPLIENT");
                                                 @* <input type="checkbox" name="chkbComplient" @bind="Complient" disabled="@doorConfig.disabledFlds["COMPLIENTDOOR"]" *@
                                                     <select name="dlstComplient" @bind="TRSH_COMPLIENT" class="@doorConfig.borderColors["TRSH_COMPLIENT"]" 
                                              disabled="@doorConfig.disabledFlds["TRSH_COMPLIENT"]" 
                                              @ref="doorConfig.dicRefs[UiLogic.propNames[i9]]"  
                                                   @onfocus="@( () => UiLogic.HasFocus("TRSH_COMPLIENT", doorConfig) )"  
                                                   @onblur="@( () => UiLogic.LostFocus(doorConfig) )" 
                                                   @onkeypress="doorConfig.KeyPressHandler" >

                                                    @if (PrApiCalls.lstComplients != null)
                                                    {
                                                        @foreach (Complient_Class m in PrApiCalls.lstComplients)
                                                        {
                                                          <option value="@m.TRSH_COMPLIENT">@m.COMPLIENTDES</option>
                                                          if (m.COMPLIENTDES == "אלידור")
                                                            PrApiCalls.ELIDOOR_COMPLIENT = m.TRSH_COMPLIENT;
                                                        }
                                                    }
                                            </select>

                                        }
                                  
                                    @code
                                        {
                                            protected int _TRSH_COMPLIENT = 0;
        protected int TRSH_COMPLIENT
        {
                                            get
                                            {
                                                if (doorConfig != null)
                                                {
                                                    _TRSH_COMPLIENT = doorConfig.TRSH_COMPLIENT;
                                                }
                                                return _TRSH_COMPLIENT;
                                            }
                                            set
                                            {
                                                _TRSH_COMPLIENT = value;
                                                if (doorConfig != null)
                                                {
                                                    doorConfig.TRSH_COMPLIENT = _TRSH_COMPLIENT;
                                                    doorConfig.borderColors["TRSH_COMPLIENT"] = (value != 0 ? "blueBorder" : "redBorder");
                                                    if (UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle"))
                                                    {
                                                        //if (doorConfig.TRSH_WINGSNUMDES != "חצי כנף")
                                                        //{
                                                        //    UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                        //    showMw();
                                                        //}
                                                        //else
                                                        //{
                                                        //     UiLogic.disableTabFlds(doorConfig, "divDoorTitle");
                                                        //     showStaticwing();
                                                        //}
                                                        //showMoving_Static_Wing();
                                                        return;
                                                    }
                                                }
                                        }
        }
                                    }
                                    </td>
                                    <td>
                                           @* deleted line: class="@doorConfig.borderColors["MEASURESDOC"]" *@
                                          @{
                                            int i10 = Array.IndexOf(UiLogic.propNames, "MEASURESDOC");
                                            <input type="checkbox" name="chkbMeasuresDoc" @bind="MeasuresDoc" 
                                                 disabled="@doorConfig.disabledFlds["MEASURESDOC"]" 
                                                 @ref="doorConfig.dicRefs[UiLogic.propNames[i10]]"  
                                                 @onfocus="@( () => UiLogic.HasFocus("MEASURESDOC", doorConfig) )"
                                                   @onkeypress="doorConfig.KeyPressHandler"
                                                  />
                                        }
                                    </td>
                                    @code
                                    {
                                        protected bool _MeasuresDoc = false;
        protected bool MeasuresDoc
        {
                                        get
                                        {
                                        //currPropName = "MEASURESDOC";
                                            if (doorConfig != null)
                                            {
                                                _MeasuresDoc = (doorConfig.MEASURESDOC == "Y");
                                            }
                                            return _MeasuresDoc;
                                        }
                                        set
                                        {
                                            _MeasuresDoc = value;
                                            if (doorConfig != null)
                                                doorConfig.MEASURESDOC = (_MeasuresDoc ? "Y" : "");
                                        }
        }
                                    }
                                    @*
                                        At present the position of FAMILY was not specified.

                                        <td>
                                        <input name="txtFAMILY" disabled=@true @bind="FAMILYDES" />
                                        </td>
                                    *@
                                    @code
                                    {
                                        protected string _FAMILYDES;
        protected string FAMILYDES
        {
                                        get
                                        {
                                            return _FAMILYDES;
                                        }
                                        set
                                        {
                                            _FAMILYDES = value;
                                        }
        }

                                    }

                                </tr>
                            </table>
                            <!-- end tblDoorTitle-->
                        </div>
                        <!-- end divDoorTitle -->



                        <br />
                        <br />
                        <br />

                        @if (showDynComp)
                        {
                            @*    was class="divNotActive" *@
                            dbgstr = doorConfig.divClasses["dynCompStyle"];

                            if (dyncompType == typeof(Movingwing))
                                doorConfig.divClasses["dynCompStyle"] = "noBorder";     // hide external border for movingwing 
                                                                                        //   TODO apply that also to staticwing and Halfwing 
                                                                                        //doorConfig.divClasses["dynCompStyle"] = (doorConfig.showDecor ? "noBorder" : "divActive");
                            else
                                doorConfig.divClasses["dynCompStyle"] = "divActive";

                            doorConfig.divClasses["dynCompStyle"] = "divActive";

                            <div dir="rtl" class="@doorConfig.divClasses["dynCompStyle"]" >
                                <DynamicComponent Type="@dyncompType" Parameters="@pageParams"  />
                                @* <Movingwing onDoneButtonClicked="DoRefresh"></Movingwing> *@
                            </div>
                            //}
                            @if (doorConfig.showDecor && dyncompType == typeof(Movingwing))
                            {
                                <div dir="rtl" class="@doorConfig.divClasses["dynCompStyle"]" >
                                    <DynamicComponent Type="@dyncompType2" Parameters="@pageParams2"  />
                                    @* <Movingwing onDoneButtonClicked="DoRefresh"></Movingwing> *@
                                </div>
                            }
                        }
                        @code {
        protected void DoRefresh()
        {
                            this.StateHasChanged();
        }
                        }

                    </div>
                    <!-- end divDoor -->

                    <div id="divCommentsAndSave" dir="rtl" style="padding-top: 30px;">
                        <table id="tblComments">
                            <tr>
                                <th id="thComments" style="text-align: right">הערות</th>
                            </tr>
                            <tr>
                                <td id="tdComments">
                                     <input name="txtComments" size="120" @bind="Comments" AutoCompleteType="Disabled" onkeypress="return event.keyCode!=13" /> 
                                   @*<InputText name="txtComments"  size="120" @bind-Value="Comments" AutoCompleteType="Disabled" style="outline:none"
                                    dir="rtl"  onkeypress="return event.keyCode!=13"
                                    />*@
                                </td>
                                @code
                                {
        protected string _Comments = string.Empty;
        protected string Comments
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _Comments = doorConfig.COMMENTS;
                                        }
                                        return _Comments;
                                    }
                                    set
                                    {
                                        _Comments = value;
                                        if (doorConfig != null)
                                            doorConfig.COMMENTS = _Comments;
                                    }
        }
                                }
                            </tr>
                        </table>
                        <p />
                        <br />
                        <br />
                        <table id="tblSaveClear">
                            <tr>
                                <td>
                                    @* <button name="btnSave" @onclick="btnSave_Click">שמירה בפריוריטי</button> *@
                                </td>
                                @code {
        private void btnSave_Click()
        {
                                    string prevTab = "accessories";
                                    string prevText = "נילווים";
                                    if (!UiLogic.tabPageIsFilled(prevTab, doorConfig))
                                    {
                                        errMsg2 = HebNouns.requiredFieldsAreEmpty; //string.Format("יש למלא את כל השדות בלשונית '{0}'  י", prevText);
                                                                                  // Js.InvokeVoidAsync("alert", errMsg);
                                        openMsgBox = true;
                                        //return;
                                    }

                                    //if (!string.IsNullOrEmpty(doorConfig.FAMILYNAME))
                                    //    doorConfig.FAMILY = PrApiCalls.getFAMILY(doorConfig.FAMILYNAME, ref errMsg);

                                    clear9999Fields();
                                    var response = (PrApiCalls.SendToPriority("TRSH_DOORCONFIG", doorConfig, ref errMsg)).StatusCode;

                                    if (response != System.Net.HttpStatusCode.Created)
                                    {
                                        //myMessageBox.Show(Page, errMsg);
                                        //UiLogic.displayErrMsg(lblMsg, "Api call failed : " + errMsg);
                                        //Js.InvokeVoidAsync("alert", errMsg);
                                        msgCaption = "שגיאה";
                                        errMsg2 = errMsg;
                                        ErrMsgCssClass = "modal-body redMessage";
                                        openMsgBox = true;

                                        myLogger.log.Info("Api call failed : " + errMsg);
                                    }
                                    else
                                    {
                                        string lastREFERENCE = PrApiCalls.getLastREFERENCE(ref errMsg);
                                        errMsg2 = string.Format("השאלון {0} נשמר בהצלחה, השאלון האחרון במערכת הוא {1}   י", doorConfig.REFERENCE, lastREFERENCE);
                                        //Js.InvokeVoidAsync("alert", errMsg2);
                                        msgCaption = "הודעה";
                                        MsgTitleCssClass = "modal-title greenTitle";
                                        ErrMsgCssClass = "modal-body greenMessage";
                                        openMsgBox = true;

                                        //UiLogic.ClearAllControls();
                                        //doorConfig = new DoorConfig();
                                    }
        }
        void clear9999Fields()
        {
                                    if (doorConfig.REFERENCE == null)
                                    {
                                        doorConfig.REFERENCE = string.Empty;
                                    }
                                    if (doorConfig.TRSH_HARDWARE == HebNouns.IdOfNone)
                                        doorConfig.TRSH_HARDWARE = 0;
                                    if (doorConfig.HWCOLORID == HebNouns.IdOfNone)
                                        doorConfig.HWCOLORID = 0;
                                    if (doorConfig.TRSH_CYLINDER == HebNouns.IdOfNone)
                                        doorConfig.TRSH_CYLINDER = 0;
        }
     }
                     </tr>
                        </table>
                        <!-- end tblSaveClear -->

                    </div>
                    <!-- end divCommentsAndSave -->
                </div>
                <!-- end divMainForm -->
            </td>
            <!-- end tdMainForm -->
        </tr>
    </table>
    <!-- end tblMainContainer -->
    <div id="divBuildTime">
        <p style="float:left">@buildTime</p>
        @code {
        protected string buildTime = string.Format("Build Date : {0}", Helper.formatDateTime(Helper.getBuildTime()));
        }
    </div>
    <!-- end divBuildTime -->
</EditForm>

@if (openMsgBox)
{
    <MsgBox Caption="@msgCaption"
        Message="@errMsg2"
        OnClose="OnDialogClose"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@ErrMsgCssClass">
                        </MsgBox>
    @code
    {
    private void OnDialogClose()
    {
        openMsgBox = false;
        errMsg2 = string.Empty;
    }
}
}
@if (openYesNo)
{
  <MsgBox Caption="@msgCaption"
        Type="MsgBox.Category.YesNo"
        Message="@errMsg2"
        OnClose="OnCloseYesNo"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@ErrMsgCssClass">
                        </MsgBox>
    @code
    {
    private void OnCloseYesNo(bool isYes)
    {
        if (isYes)   // yesNo here is just for btnRestart !
        {
            ansYes = true;
            switch (YNissue)
            {
                case "restart":
                    doRestart();
                    break;
                case "clear":

                    break;

            }
        }
        else
        {
            doorConfig.RestartClicked = false;  //RestartClicked = false;
        }
        openYesNo = false;
        errMsg2 = string.Empty;
    }
}
}