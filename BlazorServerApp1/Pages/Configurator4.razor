@page "/"

@using BlazorServerApp1.Pages
@using BlazorServerApp1.Data
@using System.Globalization;

@* @page "/Configurator4" *@

@inherits Configurator4Base

@inject IJSRuntime Js

<EditForm Model=@doorConfig  OnSubmit="submitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*  <h3>Configurator4</h3> *@

    @code {
        //protected bool hideCustDes { get; set; } = false;
        protected static string errMsg = string.Empty;

        private bool openMsgBox = false;
        private string errMsg2 = string.Empty;
        private string msgCaption = "שגיאה";
        private string ErrMsgCssClass = "modal-body";    //"modal-body redMessage";
        private string MsgTitleCssClass = "modal-title";  //"modal-title redTitle";
        private bool openYesNo = false;

        protected List<CUSTOMER_Class>? lstCustomers = PrApiCalls.getCustomers(ref errMsg);
        protected List<AGENT_Class>? lstAgents = PrApiCalls.getAgents(ref errMsg);

        //BlazorServerApp1.Pages.Configurator3
        protected bool hideDivDoor = true;

        //public bool MovinwingIsFull = false;
        //public bool ExtdecorIsFull = false;
        //public bool IntdecorIsFull = false;

        public DoorConfig? doorConfig;
        CultureInfo hebrew;
        CultureInfo english;

        Type dyncompType = typeof(Movingwing);   //typeof(Index);
        Dictionary<string, object> pageParams = new Dictionary<string, object>();
        bool showDynComp = false;
        bool showProducts = false;

        string YNissue = string.Empty;
        private bool ansYes = false;

        //bool showDivDoorTitle = false;
        //bool hideDoorTitle = true;
        //bool hideBtnExtDecor = false;
        //bool hideBtnIntDecor = false;

        protected override async Task OnInitializedAsync()
        {
            if (doorConfig != null)
                return;

            doorConfig = new DoorConfig();
            doorConfig.initBorderColors();
            doorConfig.btnClasses["general"] = "buttonActive";

            formDate = DateTime.Now;
            UiLogic.initPropNames(doorConfig);
            UiLogic.AppAllDefaults(doorConfig, ref errMsg);

            //await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);
            pageParams.Add("doorConfig", doorConfig);  //common to all tab pages !
                                                       // dyncompType = typeof(Extdecor);

            // ref : https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
            // the 2nd answer : Update Parent State by calling it's StateHasChanged method
            pageParams.Add("config4", this);

            hebrew = new CultureInfo("he-IL", false);
            english = new CultureInfo("en-US", false);

            showProducts = false;
            hideDoorTitle = true;

            //myService.RefreshRequested += RefreshMe;

            //Js.InvokeVoidAsync("SayHelloJS");
            UiLogic.tabPageIsFilled("divHeader", doorConfig);
        }
        private void RefreshMe()
        {
        StateHasChanged();
        }

        void showTabPage(Type pageType, string tabName)
        {
        errMsg2 = string.Empty;
        if (ActivatePage(tabName, doorConfig, ref errMsg2))
        {
            pageParams["doorConfig"] = doorConfig;
            if (pageParams.ContainsKey("disableLogo") && tabName != "movingwing")
                pageParams.Remove("disableLogo");
            showDynComp = true;
            dyncompType = pageType;
            //doorConfig.btnClasses[tabName] = "buttonActive";
            doorConfig.markButton(tabName);
        }
        else
        {
            ErrMsgCssClass = "modal-body centeredMsg";
            openMsgBox = true;
        }
        }
        //ref :https://stackoverflow.com/questions/55775060/blazor-component-refresh-parent-when-model-is-updated-from-child-component
        //  the 2nd answer
        public void RefreshState()
        {
            this.StateHasChanged();
        }
        private void doRestart()
        {
        UiLogic.clearDoorConfig(doorConfig);
        showProducts = false;
        hideDoorTitle = true;
        showDynComp = false;
        hideDivDoor = true;


        doorConfig.btnClasses["restart"] = "buttonRed";
        doorConfig.btnClasses["general"] = "buttonActive";
        doorConfig.btnClasses["selectprod"] =
        doorConfig.btnClasses["btnDoor"] =
        doorConfig.btnClasses["proddes"] = "button";
        }
        void submitForm()
        {
        int x = 17;
        }
    }


    <table id="tblMainContainer">
        <tr>
            <td>
                <div id="divMainMenuButtons" dir="rtl" class="menuButtonsDiv">
                    <table id="tblmenuButtons">
                        <tr>
                            <td>
                                <button name="btnRestart" class="@doorConfig.btnClasses["restart"]"
                                        onclick="@restart">
                                    התחל מחדש
                                </button>
                            </td>
                            @{
                                void restart()
                                {
                                    msgCaption = string.Empty;
                                    errMsg2 = "תחילת שאלון חדש ?";
                                    MsgTitleCssClass = string.Empty;
                                    ErrMsgCssClass = "centeredMsg"; //string.Empty;
                                                                    // the actual restart is done in the YesNo section of MsgBox control
                                    YNissue = "restart";
                                    openYesNo = true;
                                }
                            }
                        </tr>
                        <tr>
                            <td>
                                <button name="btnGeneral" class="@doorConfig.btnClasses["general"]">פרטים כלליים</button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button name="btnSelectProd" class="@doorConfig.btnClasses["selectprod"]"
                                        onclick="@showProdButtons">
                                    בחירת מוצר
                                </button>
                            </td>
                            @{
                                void showProdButtons()
                                {
                                    if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                    {
                                        msgCaption = string.Empty;  // just for debug
                                                                    //MsgTitleCssClass =
                                        errMsg2 = string.Format("שדות חובה לא מולאו, על מנת להמשיך נדרש למלא את כל שדות החובה");
                                        // Js.InvokeVoidAsync("alert", errMsg);
                                        ErrMsgCssClass = "modal-body centeredMsg";
                                        openMsgBox = true;
                                        return;
                                    }
                                    showProducts = true;
                                }
                            }
                        </tr>
                        <tr>
                            <td>
                                <button name="btnProdDes" class="@doorConfig.btnClasses["proddes"]"
                                        onclick="@showDoorTitle">
                                    תאור מוצר
                                </button>
                            </td>
                            @{
                                void showDoorTitle()
                                {
                                    if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                    {
                                        msgCaption = string.Empty;
                                        errMsg2 = UiLogic.requiredFieldsAreEmpty;  //"שדות חובה לא מולאו, על מנת להמשיך נדרש למלא את כל שדות החובה";
                                                                                   // Js.InvokeVoidAsync("alert", errMsg);
                                        ErrMsgCssClass = "modal-body centeredMsg";
                                        openMsgBox = true;
                                        return;
                                    }
                                    hideDoorTitle = false;
                                    UiLogic.tabPageIsFilled("divDoorTitle", doorConfig);  //set redBorder on empty controls
                                }
                            }
                        </tr>


                        @{
                            bool showTabs = false;
                        }
                        @if (!hideDivDoor)
                        {
                                            <tr>
                                                <td>
                                                    <table id="tblTabButtons">
                                                        <tr>
                                                            <td>
                                                                <button name="btnmovingwing" class="@doorConfig.btnClasses["movingwing"]"
                                                    @onclick=@( () => @showMw())>
                                                                    כנף נעה
                                                                </button>
                                                            </td>
                                            @{
                                                void showMw()
                                                {
                                                    pageParams["disableLogo"] = disableLogo;
                                                    UiLogic.tabPageIsFilled("movingwing", doorConfig);  //set redBorder on empty controls
                                                    showTabPage(typeof(Movingwing), "movinwing");
                                                    doorConfig.btnClasses["general"] =
                                                    doorConfig.btnClasses["selectprod"] =
                                                    doorConfig.btnClasses["proddes"] = "buttonFilled";  //"buttonDisabled";
                                                    doorConfig.btnClasses["movingwing"] = "buttonActive";
                                                }
                                            }
                                                        </tr>
                                                        <tr hidden="@hideBtnExtDecor">
                                            @{
                                                bool disableBtnExtDecor = false;
                                                //disableBtnExtDecor = !ActivatePage("extdecor", doorConfig, ref errMsg2);
                                                // 12/05/2022 : at present btnextdecor is always ENABLED
                                                //[TODO] when leaving Movingwing check whether it is filled.
                                                //  if it's not filled DISABLE btnextdecor

                                            }

                                                            <td>
                                                                <button name="btnextdecor" class="@doorConfig.btnClasses["extdecor"]" @onclick="showExtdecor"
                                                    disabled="@disableBtnExtDecor" hidden="@hideBtnExtDecor" >
                                                                    פרטי דקורציה חוץ
                                                                </button>
                                                            </td>
                                            @{
                                                void showExtdecor()
                                                {
                                                    showTabPage(typeof(Extdecor), "extdecor");
                                                }
                                            }

                                                        </tr>
                                                        <tr hidden="@hideBtnIntDecor">
                                                            <td>
                                                                <button name="btnintdecor" class="@doorConfig.btnClasses["intdecor"]"
                                                    @onclick="showIntdecor" hidden="@hideBtnIntDecor">
                                                                    פרטי דקורציה פנים
                                                                </button>
                                                            </td>
                                            @{
                                                void showIntdecor()
                                                {
                                                    showTabPage(typeof(Intdecor), "intdecor");
                                                }
                                            }
                                                        </tr>
                                                        <tr>
                                            @{
                                                bool disableSw = false;
                                                disableSw = (doorConfig.TRSH_WINGSNUMDES == "כנף");
                                            }
                                                            <td>
                                                                <button name="btnstaticwing" class="@doorConfig.btnClasses["staticwing"]" disabled="@disableSw"
                                                    @onclick="showStaticwing">
                                                                    כנף קבועה
                                                                </button>
                                                            </td>
                                            @{
                                                void showStaticwing()
                                                {
                                                    showTabPage(typeof(Staticwing), "staticwing");
                                                }
                                            }
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <button name="btnhinges" class="@doorConfig.btnClasses["hinges"]"
                                                    @onclick="showHinges">
                                                                    פרטי צירים
                                                                </button>
                                                            </td>
                                            @{
                                                void showHinges()
                                                {
                                                    showTabPage(typeof(Hinges), "hinges");
                                                }
                                            }
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <button name="btnhandle" class="@doorConfig.btnClasses["handle"]"
                                                    @onclick="showHandle">
                                                                    ידיות אומנותיות
                                                                </button>
                                                            </td>
                                            @{
                                                void showHandle()
                                                {
                                                    showTabPage(typeof(Handle), "handle");
                                                }
                                            }
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <button name="btnaccessories" class="@doorConfig.btnClasses["accessories"]"
                                                    @onclick="showAccessories">
                                                                    נילווים
                                                                </button>
                                                            </td>
                                            @{
                                                void showAccessories()
                                                {
                                                    showTabPage(typeof(Accessories), "accessories");
                                                }
                                            }
                                                        </tr>
                                                    </table>
                                                    <!-- end tblTabButtons -->
                                            </td>
                                            </tr>
                        }

                    </table>
                    <!-- end tblmenuButtons -->
                </div>
                <!-- end of divMainMenuButtons -->
            </td>
            <td id="tdMainForm">
                <div id="divMainForm" dir="rtl" class="mainFormDiv">
                    <div id="divHeader" dir="rtl"   style="border: solid; border-color: black; border-radius: 10px" >
                        <table id="tblLine1">
                            <tr>
                                <th>תאריך</th>
                                <th>שם ממלא שאלון</th>
                                <th>אסמכתא</th>
                            </tr>
                            <tr id="trHeaderL1Controls">
                                <td id="tdDate">
                                    <input type="date" name="txtDate" @bind="formDate" disabled="@doorConfig.disabledFlds["FORMDATE"]" />
                                    @code {
        // public DoorConfig? doorConfig; // = new DoorConfig();

        private DateTime _formDate = DateTime.Now;
        protected DateTime formDate
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _formDate = Convert.ToDateTime(doorConfig.FORMDATE);

                                            return _formDate;
                                        }
                                        set
                                        {
                                            _formDate = value;
                                            if (doorConfig == null)
                                            {
                                                doorConfig = new DoorConfig();
                                                doorConfig.initBorderColors();
                                            }
                                            doorConfig.FORMDATE = Helper.formatDate4Rest(_formDate);
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                        }
        }
                                    }
                                </td>
                                <!-- end tdDate-->
                                <td id="tdFormFiller">
                                     <input name="txtFormFiller" @bind="formFiller" dir="rtl" class="@doorConfig.borderColors["FORMFILLER"]"
                                           disabled="@doorConfig.disabledFlds["FORMFILLER"]"
                                           @onfocus="@( () => formFillerHasFocus() )"
                                           @onblur="@( () => formFillerLostFocus() )" 
                                           onkeypress="@KeyPressHandler"
                                           />
                                           @* onkeypress="return event.keyCode!=13" *@
                                           

                                    @{
                                        // doorConfig.borderColors["FORMFILLER"] = "form-control " + doorConfig.borderColors["FORMFILLER"];
                                    }

                                    @code {
                                        protected string _formFiller;
                                        protected string formFiller
                                        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _formFiller = doorConfig.FORMFILLER;

                                            return _formFiller;
                                        }
                                        set
                                        {
                                            _formFiller = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.FORMFILLER = _formFiller;
                                                doorConfig.borderColors["FORMFILLER"] = (!string.IsNullOrEmpty(value) ? "blackBorder" : "redBorder");
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }
                                        }
                                        string[] Elements = {"txtFormFiller", "dlstCustDes", "txtEndCustDes", "txtInstallAddress", "ShipAddress"  };
                                        //async Task KeyPressHandler(KeyboardEventArgs e)
                                        bool KeyPressHandler(KeyboardEventArgs e)
                                        {
                                            if(e.Key.ToLowerInvariant() == "enter")
                                            {
                                            //await Js.InvokeVoidAsync("invokeTabKey", (object)Elements);
                                                Js.InvokeVoidAsync("invokeTabKey", (object)Elements);
                                                return false;  // event.keyCode!=13
                                            }
                                            return true;       // event.keyCode!=13 
                                        }
                                        void formFillerHasFocus()
                                        {
                                                                        // System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
                                        }
                                        void formFillerLostFocus()
                                        {
                                                                        //System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
                                        }
                                    }
                                </td>
                                <!-- end tdFormFiller -->
                                <td id="tdReference">
                                    <input name="txtReference" @bind="reference" @ref="txtReference" disabled=@true />   @* 01/06/2022 at preset always disabled *@

                                    @* <InputText name="txtReference" @bind-Value="reference" style="outline:none"
                                    onkeypress="return event.keyCode!=13" />
                                    *@

                                    @code {
        private ElementReference txtReference;
        protected string _reference;
        protected string reference
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _reference = doorConfig.REFERENCE;

                                            return _reference;
                                        }
                                        set
                                        {
                                            _reference = value;

                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(PrApiCalls.getReference(_reference, ref errMsg)))
                                                {
                                                    ErrMsgCssClass = "modal-body centeredMsg";
                                                    errMsg2 = "אסמכתא עם מספר זה כבר קיימת במערכת";
                                                    openMsgBox = true;
                                                    txtReference.FocusAsync();
                                                }
                                                else
                                                    doorConfig.REFERENCE = _reference;

                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }
        }
                                    }
                                </td>
                                <!-- end tdReference -->
                                <td>
                                    <label id="lblMsgL1" />
                                </td>
                            </tr>
                            <!-- end trHeaderL1Controls -->
                        </table>
                        <!-- end tblLine1 -->

                        <table id="tblLine2">
                            <tr>
                                <th>שם משווק</th>
                                <th>שם לקוח קצה</th>
                                <th>כתובת התקנה</th>
                                <th>כתובת לאספקה</th>
                            </tr>
                            <tr id="trLine2Controls">
                                <td>
                                    @*
                                        <select name="dlstAgent" @bind="AGENT" class="@doorConfig.borderColors["AGENT"]">
                                        @if (lstAgents != null)
                                        {
                                        @foreach (AGENT_Class a in lstAgents)
                                        {
                                        <option value="@a.AGENT">@a.AGENTNAME</option>
                                        }
                                        }
                                        </select>
                                    *@
                                    <select name="dlstCustDes" @bind="AGENT" class="@doorConfig.borderColors["AGENT"]"  disabled="@doorConfig.disabledFlds["AGENT"]" >
                                        @if (lstCustomers != null)
                                        {
                                            @foreach (CUSTOMER_Class c in lstCustomers)
                                            {
                                                  <option value="@c.CUST">@c.CUSTDES</option>
                                            }
                                        }
                                    </select>
                                </td>
                                @code {
        public bool disableLogo = false;
        private int _AGENT = 0;
        protected int AGENT
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                            _AGENT = doorConfig.AGENT;

                                        return _AGENT;
                                    }
                                    set
                                    {
                                        _AGENT = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.AGENT = _AGENT;
                                            doorConfig.borderColors["AGENT"] = (value != 0 ? string.Empty : "redBorder");
                                            //
                                            if (_AGENT != 0)
                                            {
                                                // set Address and Logo based on _AGENT ( actuall CUST in priority)
                                                CUSTOMER_Class agent = PrApiCalls.getCustomer((int)doorConfig.AGENT, ref errMsg);
                                                ShipAddress = string.Format("{0} {1} {2}", agent.ADDRESS, agent.ADDRESS2, agent.ADDRESS3);
                                                if (!string.IsNullOrEmpty(agent.TRSH_LOGO) && agent.TRSH_LOGO == "Y")
                                                {
                                                    disableLogo = true;
                                                    doorConfig.LOGO = string.Empty;   //chkbLogo.Checked = false;
                                                }
                                                //
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "selectprod");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }
                                    }
        }
}
                                <td>
                                   @* <select name="dlstCustDes" @bind="CUST" class="@doorConfig.borderColors["CUST"]">
                                        @if (lstCustomers != null)
                                        {
                                            @foreach (CUSTOMER_Class c in lstCustomers)
                                            {
                                                        <option value="@c.CUST">@c.CUSTDES</option>
                                            }
                                        }
                                    </select>
                                    *@
                                     <input name="txtEndCustDes" @bind="ENDCUSTDES" dir="rtl" class="@doorConfig.borderColors["ENDCUSTDES"]" 
                                       disabled="@doorConfig.disabledFlds["ENDCUSTDES"]"
                                       onkeypress="return event.keyCode!=13" />

                                @code {
        // public bool disableLogo = false;
        private string _ENDCUSTDES = string.Empty;
        protected string ENDCUSTDES
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _ENDCUSTDES = doorConfig.ENDCUSTDES;

                                            return _ENDCUSTDES;
                                        }
                                        set
                                        {
                                            _ENDCUSTDES = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.ENDCUSTDES = _ENDCUSTDES;
                                                //doorConfig.borderColors["ENDCUSTDES"] = (value != 0 ? string.Empty : "redBorder");  // it's al optional field 01/06/2022
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                            }
                                        }

        }
        }

                                @* end ENDCUSTDES *@
                                 </td>
                                <td>
                                    <input name="txtInstallAddress" dir="rtl" @bind="InstallAddress" size="40" class="@doorConfig.borderColors["INSTALLADDRESS"]" 
                                               disabled="@doorConfig.disabledFlds["INSTALLADDRESS"]"
                                               onkeypress="return event.keyCode!=13" /> 
                                    @* <InputText dir="rtl" @bind-Value="InstallAddress" class="@doorConfig.borderColors["INSTALLADDRESS"]"  style="outline:none"
                                      onkeypress="return event.keyCode!=13"/>
                                      *@
                                </td>
                                @code {
        protected string _InstallAddress = string.Empty;
        protected string InstallAddress
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _InstallAddress = doorConfig.INSTALLADDRESS;
                                        }
                                        return _InstallAddress;
                                    }
                                    set
                                    {
                                        _InstallAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.INSTALLADDRESS = _InstallAddress;
                                            //
                                            //doorConfig.borderColors["ADDRESS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                        }
                                    }
        }
                                }
                                @* end Address  *@
                                <td>
                                    <input name="txtShipAddress" dir="rtl" @bind="ShipAddress" size="60" class="@doorConfig.borderColors["SHIPADDRESS"]" 
                                    disabled="@doorConfig.disabledFlds["SHIPADDRESS"]"
                                    onkeypress="return event.keyCode!=13" /> 
                                    @* <InputText dir="rtl"  @bind-Value="ShipAddress" size="80" class="@doorConfig.borderColors["SHIPADDRESS"]"  style="outline:none"
                                    onkeypress="return event.keyCode!=13"   />
                                    *@
                                </td>
                                @code {
        protected string _ShipAddress = string.Empty;
        protected string ShipAddress
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _ShipAddress = doorConfig.SHIPADDRESS;
                                        }
                                        return _ShipAddress;
                                    }
                                    set
                                    {
                                        _ShipAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.SHIPADDRESS = _ShipAddress;
                                            doorConfig.borderColors["SHIPADDRESS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                            //UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader");
                                        }
                                    }
        }
                                }
                                @* end ShipAddress *@
                            </tr>
                            <!-- end trLine2Controls -->
                        </table>
                        <!-- end tblLine2 -->
                    </div>
                    <!--end of divHeader -->
                    @if (showProducts)
                    {
                                        <div id="divProducts" class="div1">
                                            <table>
                                                <tr>
                                                    <td>
                                                        <div class="tabPageTitle">
                                                            <h1 class="rightLeftMargin">בחירת מוצר</h1>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </table>
                                            <table id="tblProducts">
                                                <tr>
                                                    <td id="tdBtnDoor">
                                                        <button name="btnDoor" @onclick="btnDoorClicked" class="@doorConfig.btnClasses["btnDoor"]"
                                                        disabled="@doorConfig.disabledFlds["btnDoor"]"
                                                        >דלת</button>
                                        @code
                                        {
        private void btnDoorClicked()
        {
                                        if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                        {
                                            errMsg2 = string.Format("יש למלא את כל השדות בכותרת");
                                            // Js.InvokeVoidAsync("alert", errMsg);
                                            openMsgBox = true;
                                            return;
                                        }
                                        else
                                        {
                                            pageParams["doorConfig"] = doorConfig;
                                            pageParams["disableLogo"] = disableLogo;
                                            //dyncompType = typeof(Movingwing);
                                            hideDivDoor = false;
                                            doorConfig.btnClasses["general"] =   //"buttonLostFocus";
                                            doorConfig.btnClasses["selectprod"] = "buttonFilled";
                                            doorConfig.btnClasses["proddes"] = "buttonActive";
                                            //doorConfig.btnClasses["movingwing"] = "buttonActive";
                                            //doorConfig.markButton("movingwing");
                                            doorConfig.btnClasses["btnDoor"] = "buttonActive backgroundGreen";
                                        }
        }
                                    }
                                </td>
                                <!-- end tdBtnDoor -->
                                <td>
                                    <button name="btnLintel" class="@doorConfig.btnClasses["btnLintel"]"  disabled="@doorConfig.disabledFlds["btnLintel"]" >משקוף</button>
                                </td>
                                <td>
                                    <button name="btnCover" class="@doorConfig.btnClasses["btnCover"]"  disabled="@doorConfig.disabledFlds["btnCover"]" >חיפוי</button>
                                </td>
                                <td>
                                    <button name="btnSideUnit" class="@doorConfig.btnClasses["btnSideUnit"]" disabled="@doorConfig.disabledFlds["btnSideUnit"]" >יחידת צד</button>
                                </td>
                                <td>
                                    <button name="btnECabinet" class="@doorConfig.btnClasses["btnECabinet"]"  disabled="@doorConfig.disabledFlds["btnECabinet"]" >ארון חשמל</button>
                                </td>
                                <td>
                                    <button name="btnShelves" class="@doorConfig.btnClasses["btnShelves"]"  disabled="@doorConfig.disabledFlds["btnShelves"]" >מדפים</button>
                                </td>
                            </tr>
                        </table>
                        <!--end tblProducts -->
                    </div>
                                        <!-- end divProducts -->
                    }  @* end if (showProducts) *@

                    <div id="divDoor" dir="rtl" hidden="@hideDivDoor">

                        <div id="divDoorTitle" dir="rtl" style="border: solid; border-color: black; border-radius: 10px" hidden="@hideDoorTitle">
                            <table id="tblDoorTitle">
                                <tr>
                                    <th id="thWingsNum">מיפתח</th>
                                    <th id="thTRSH_MODELNAME">דגם</th>

                                    @* <th id="thOpenMode">צורת פתיחה</th>  moved to Movingwing.razor  *@

                                    <th id="thDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">עיצוב דקורציה (חוץ,פנים,דו צדדי)</th>
                                    <th id="thComplient">דלת תואם אלידור</th>
                                    <th id="thMeasuresDoc">מצורף נספח מדידה</th>

                                    @* <th id="thFamily">סידרה</th> *@
                                </tr>
                                <tr>
                                    <td>
                                        <select name="dlstWingsNum" @bind="WingsNum" class="@doorConfig.borderColors["TRSH_WINGSNUMDES"]" 
                                              disabled="@doorConfig.disabledFlds["TRSH_WINGSNUMDES"]" >
                                            @*
                                                <option>בחר סוג מיפתח</option>
                                                <option>כנף</option>
                                                <option>כנף וחצי</option>
                                                <option>דו כנפי</option>
                                            *@
                                            @if (PrApiCalls.lstWingsNum != null)
                                            {
                                                @foreach (WingsNum_Class wn in PrApiCalls.lstWingsNum)
                                                {
                                                                                    <option value="@wn.TRSH_WINGSNUMDES">@wn.TRSH_WINGSNUMDES</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    @code
                                    {
        //protected bool disableStaticWing = false;
        protected string _WingsNum = string.Empty;
        protected string WingsNum
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _WingsNum = doorConfig.TRSH_WINGSNUMDES;
                                            }
                                            return _WingsNum;
                                        }
                                        set
                                        {
                                            _WingsNum = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.TRSH_WINGSNUMDES = _WingsNum;
                                                if (!string.IsNullOrEmpty(value) && (!string.IsNullOrEmpty(doorConfig.TRSH_MODELNAME)))
                                                {
                                                    doorConfig.PARTNAME = PrApiCalls.getPARTNAMEbyModelWings(doorConfig, ref errMsg);
                                                    if (string.IsNullOrEmpty(doorConfig.PARTNAME))
                                                    {
                                                        errMsg2 = "לא קיים פריט  עם הדגם והמיפתח שציינת";
                                                        openMsgBox = true;
                                                        dlstModelName.FocusAsync();
                                                        return;
                                                    }
                                                    // get PART FAMILY
                                                    FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                                    doorConfig.FAMILYNAME = familyOfPart.FAMILYNAME;
                                                }
                                                doorConfig.borderColors["TRSH_WINGSNUMDES"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                            }

                                            //disableStaticWing =  (_WingsNum == "כנף");
                                        }
        }

                                    }
                                    
                                    <td>
                                        <select name="dlstModelName" @bind="TRSH_MODELNAME" class="@doorConfig.borderColors["TRSH_MODELNAME"]" 
                                              disabled="@doorConfig.disabledFlds["TRSH_MODELNAME"]" @ref="dlstModelName"   >
                                            
                                            @if (PrApiCalls.lstModels != null)
                                            {
                                                @foreach (Model_Class m in PrApiCalls.lstModels)
                                                {
                                                                                    <option value="@m.TRSH_MODELNAME">@m.TRSH_MODELDES</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    @code {
        private ElementReference dlstModelName;
        protected string _TRSH_MODELNAME = string.Empty;
        protected string TRSH_MODELNAME
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _TRSH_MODELNAME = doorConfig.TRSH_MODELNAME;
                                            }
                                            return _TRSH_MODELNAME;
                                        }
                                        set
                                        {
                                            int dbg = 0;
                                            _TRSH_MODELNAME = value;
                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(doorConfig.TRSH_MODELNAME) && UiLogic.tabPageIsNotEmpty("movingwing", doorConfig))
                                                {
                                                    msgCaption = string.Empty;
                                                    errMsg2 = "שינוי הנתונים ימחק את כל הנתונים שמולאו בלשוניות הבאות ?";
                                                    MsgTitleCssClass = string.Empty;
                                                    ErrMsgCssClass = "centeredMsg"; //string.Empty;
                                                                                    // the actual restart is done in the YesNo section of MsgBox control
                                                    YNissue = "clear";
                                                    openYesNo = true;
                                                    if (!ansYes)
                                                    {
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        UiLogic.clearFollowingTabFields(doorConfig, "divDoorTitle");
                                                    }
                                                }
                                                doorConfig.TRSH_MODELNAME = value;
                                                Model_Class model = PrApiCalls.getModel(doorConfig.TRSH_MODELNAME, ref errMsg);
                                                doorConfig.meaged = model.TRSH_MEAGEDNAME;
                                                doorConfig.TRSH_DOOR_HWCATCODE = model.TRSH_DOOR_HWCATCODE;
                                                doorConfig.borderColors["TRSH_MODELNAME"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                                if (!string.IsNullOrEmpty(value) && (!string.IsNullOrEmpty(doorConfig.TRSH_WINGSNUMDES)))
                                                {
                                                    doorConfig.PARTNAME = PrApiCalls.getPARTNAMEbyModelWings(doorConfig, ref errMsg);
                                                    if (string.IsNullOrEmpty(doorConfig.PARTNAME))
                                                    {
                                                        errMsg2 = "לא קיים פריט  עם הדגם והמיפתח שציינת";
                                                        openMsgBox = true;
                                                        dlstModelName.FocusAsync();
                                                        return;
                                                    }
                                                    // get PART FAMILY
                                                    FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                                    doorConfig.FAMILYNAME = familyOfPart.FAMILYNAME;
                                                }
                                                UiLogic.applyModelDefaults(doorConfig);
                                                applyDecorFormat2Btns();
                                                dbg = doorConfig.TRSH_HARDWARE;
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle");
                                            }
                                        }
        }
}

                                    @code
                                    {
        protected void applyDecorFormat2Btns()
        {
                                        switch (doorConfig.DECORFORMAT)
                                        {
                                            case "ללא":
                                                hideBtnExtDecor = hideBtnIntDecor = true;
                                                break;
                                            case "חוץ":
                                                hideBtnExtDecor = false;  //show
                                                hideBtnIntDecor = true;
                                                break;
                                            case "פנים":
                                                hideBtnExtDecor = true;
                                                hideBtnIntDecor = false;  //show
                                                break;
                                            case "דו צדדי":
                                                hideBtnExtDecor = false;
                                                hideBtnIntDecor = false;  //show
                                                break;
                                        }
        }
                                    }
                                    <td id="tdDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">
                                        <select name="dlstDecorFormat" @bind="DecorFormat" class="@doorConfig.borderColors["DECORFORMAT"]"
                                         disabled="@doorConfig.disabledFlds["DECORFORMAT"]"  >
                                            <option></option>
                                            <option>ללא</option>
                                            <option>חוץ</option>
                                            <option>פנים</option>
                                            <option disabled="@UiLogic.disableOption(doorConfig,"dlstDecorFormat","דו צדדי")">דו צדדי</option>
                                            @* see Helper.DecorFormat2Code(...) method *@
                                        </select>
                                    </td>
                                    @code {
        protected string _DecorFormat = string.Empty;
        protected string DecorFormat
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                // UiLogic.applyFldDefault(doorConfig, "dlstDecorFormat");
                                                _DecorFormat = doorConfig.DECORFORMAT;
                                            }
                                            return _DecorFormat;
                                        }
                                        set
                                        {
                                            _DecorFormat = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.DECORFORMAT = _DecorFormat;
                                                doorConfig.borderColors["DECORFORMAT"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                                //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                                //UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle", "proddes", "movingwing");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divDoorTitle");
                                                applyDecorFormat2Btns();
                                                //switch (_DecorFormat)
                                                //{
                                                //    case "ללא":
                                                //        hideBtnExtDecor = hideBtnIntDecor = true;
                                                //        break;
                                                //    case "חוץ":
                                                //        hideBtnExtDecor = false;  //show
                                                //        hideBtnIntDecor = true;  
                                                //        break;
                                                //    case "פנים":
                                                //        hideBtnExtDecor = true;
                                                //        hideBtnIntDecor = false;  //show
                                                //        break;
                                                //    case "דו צדדי":
                                                //        hideBtnExtDecor = false;
                                                //        hideBtnIntDecor = false;  //show
                                                //        break;
                                                //}
                                            }
                                        }
        }
                                    }



                                    <td>
                                        <input type="checkbox" name="chkbComplient" @bind="Complient" disabled="@doorConfig.disabledFlds["COMPLIENTDOOR"]" />
                                    </td>
                                    @code
                                    {
        protected bool _Complient = false;
        protected bool Complient
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _Complient = (doorConfig.COMPLIENTDOOR == "Y");
                                            }
                                            return _Complient;
                                        }
                                        set
                                        {
                                            _Complient = value;
                                            if (doorConfig != null)
                                                doorConfig.COMPLIENTDOOR = (_Complient ? "Y" : "");
                                        }
        }
                                    }

                                    <td>
                                        <input type="checkbox" name="chkbMeasuresDoc" @bind="MeasuresDoc" disabled="@doorConfig.disabledFlds["MEASURESDOC"]" />
                                    </td>
                                    @code
                                    {
        protected bool _MeasuresDoc = false;
        protected bool MeasuresDoc
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _MeasuresDoc = (doorConfig.MEASURESDOC == "Y");
                                            }
                                            return _MeasuresDoc;
                                        }
                                        set
                                        {
                                            _MeasuresDoc = value;
                                            if (doorConfig != null)
                                                doorConfig.MEASURESDOC = (_MeasuresDoc ? "Y" : "");
                                        }
        }
                                    }
                                    @*
                                        At present the position of FAMILY was not specified.

                                        <td>
                                        <input name="txtFAMILY" disabled=@true @bind="FAMILYDES" />
                                        </td>
                                    *@
                                    @code
                                    {
        protected string _FAMILYDES;
        protected string FAMILYDES
        {
                                        get
                                        {
                                            return _FAMILYDES;
                                        }
                                        set
                                        {
                                            _FAMILYDES = value;
                                        }
        }

                                    }

                                </tr>
                            </table>
                            <!-- end tblDoorTitle-->
                        </div>
                        <!-- end divDoorTitle -->



                        <br />
                        <br />
                        <br />

                        @if (showDynComp)
                        {
                                            <div dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
                                                <DynamicComponent Type="@dyncompType" Parameters="@pageParams"  />
                                @* <Movingwing onDoneButtonClicked="DoRefresh"></Movingwing> *@
                                            </div>
                        }
                        @code {
                            protected void DoRefresh()
                            {
                                                this.StateHasChanged();
                            }
                        }
                        
                    </div>
                    <!-- end divDoor -->

                    <div id="divCommentsAndSave" dir="rtl" style="padding-top: 30px;">
                        <table id="tblComments">
                            <tr>
                                <th id="thComments" style="text-align: right">הערות</th>
                            </tr>
                            <tr>
                                <td id="tdComments">
                                     <input name="txtComments" size="120" @bind="Comments" AutoCompleteType="Disabled" onkeypress="return event.keyCode!=13" /> 
                                   @*<InputText name="txtComments"  size="120" @bind-Value="Comments" AutoCompleteType="Disabled" style="outline:none"
                                    dir="rtl"  onkeypress="return event.keyCode!=13"
                                    />*@
                                </td>
                                @code
                                {
        protected string _Comments = string.Empty;
        protected string Comments
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _Comments = doorConfig.COMMENTS;
                                        }
                                        return _Comments;
                                    }
                                    set
                                    {
                                        _Comments = value;
                                        if (doorConfig != null)
                                            doorConfig.COMMENTS = _Comments;
                                    }
        }
                                }
                            </tr>
                        </table>
                        <p />
                        <br />
                        <br />
                        <table id="tblSaveClear">
                            <tr>
                                <td>
                                    <button name="btnSave" @onclick="btnSave_Click">שמירה בפריוריטי</button>
                                </td>
                                @code {
        private void btnSave_Click()
        {
                                    string prevTab = "accessories";
                                    string prevText = "נילווים";
                                    if (!UiLogic.tabPageIsFilled(prevTab, doorConfig))
                                    {
                                        errMsg2 = UiLogic.requiredFieldsAreEmpty; //string.Format("יש למלא את כל השדות בלשונית '{0}'  י", prevText);
                                                                                  // Js.InvokeVoidAsync("alert", errMsg);
                                        openMsgBox = true;
                                        //return;
                                    }

                                    if (!string.IsNullOrEmpty(doorConfig.FAMILYNAME))
                                        doorConfig.FAMILY = PrApiCalls.getFAMILY(doorConfig.FAMILYNAME, ref errMsg);

                                    clear9999Fields();
                                    var response = (PrApiCalls.SendToPriority("TRSH_DOORCONFIG", doorConfig, ref errMsg)).StatusCode;

                                    if (response != System.Net.HttpStatusCode.Created)
                                    {
                                        //myMessageBox.Show(Page, errMsg);
                                        //UiLogic.displayErrMsg(lblMsg, "Api call failed : " + errMsg);
                                        //Js.InvokeVoidAsync("alert", errMsg);
                                        msgCaption = "שגיאה";
                                        errMsg2 = errMsg;
                                        ErrMsgCssClass = "modal-body redMessage";
                                        openMsgBox = true;

                                        myLogger.log.Info("Api call failed : " + errMsg);
                                    }
                                    else
                                    {
                                        string lastREFERENCE = PrApiCalls.getLastREFERENCE(ref errMsg);
                                        errMsg2 = string.Format("השאלון {0} נשמר בהצלחה, השאלון האחרון במערכת הוא {1}   י", doorConfig.REFERENCE, lastREFERENCE);
                                        //Js.InvokeVoidAsync("alert", errMsg2);
                                        msgCaption = "הודעה";
                                        MsgTitleCssClass = "modal-title greenTitle";
                                        ErrMsgCssClass = "modal-body greenMessage";
                                        openMsgBox = true;

                                        //UiLogic.ClearAllControls();
                                        //doorConfig = new DoorConfig();
                                    }
        }
        void clear9999Fields()
        {
                                    if (doorConfig.REFERENCE == null)
                                    {
                                        doorConfig.REFERENCE = string.Empty;
                                    }
                                    if (doorConfig.TRSH_HARDWARE == UiLogic.IdOfNone)
                                        doorConfig.TRSH_HARDWARE = 0;
                                    if (doorConfig.HWCOLORID == UiLogic.IdOfNone)
                                        doorConfig.HWCOLORID = 0;
                                    if (doorConfig.CYLINDERNAME == UiLogic.NameOfNone)
                                        doorConfig.CYLINDERNAME = string.Empty;
        }
                                }
                                <td>
                                    <button name="btnClear" @onclick="btnClear_Click">ניקוי טופס</button>
                                </td>
                                @code {
        private void btnClear_Click()
        {
                                    showProducts = false;
                                    UiLogic.clearDoorConfig(doorConfig);
                                    this.StateHasChanged();
        }
                                }
                            </tr>
                        </table>
                        <!-- end tblSaveClear -->

                    </div>
                    <!-- end divCommentsAndSave -->
                </div>
                <!-- end divMainForm -->
            </td>
            <!-- end tdMainForm -->
        </tr>
    </table>
    <!-- end tblMainContainer -->
    <div id="divBuildTime">
        <p style="float:left">@buildTime</p>
        @code {
        protected string buildTime = string.Format("Build Date : {0}", Helper.formatDateTime(Helper.getBuildTime()));
        }
    </div>
    <!-- end divBuildTime -->
</EditForm>

@if (openMsgBox)
{
                    <MsgBox Caption="@msgCaption"
        Message="@errMsg2"
        OnClose="OnDialogClose"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@ErrMsgCssClass">
                    </MsgBox>
    @code
    {
    private void OnDialogClose()
    {
        openMsgBox = false;
        errMsg2 = string.Empty;
    }
}
}
@if (openYesNo)
{
                    <MsgBox Caption="@msgCaption"
        Type="MsgBox.Category.YesNo"
        Message="@errMsg2"
        OnClose="OnCloseYesNo"
        MsgTitleCssClass="@MsgTitleCssClass"
        ErrMsgCssClass="@ErrMsgCssClass">
                    </MsgBox>
    @code
    {
    private void OnCloseYesNo(bool isYes)
    {
        if (isYes)   // yesNo here is just for btnRestart !
        {
            ansYes = true;
            switch (YNissue)
            {
                case "restart":
                    doRestart();
                    break;
                case "clear":

                    break;

            }
        }
        openYesNo = false;
        errMsg2 = string.Empty;
    }
}
}