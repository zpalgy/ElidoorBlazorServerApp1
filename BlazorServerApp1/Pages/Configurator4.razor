@page "/"

@using BlazorServerApp1.Pages
@using BlazorServerApp1.Data
@using System.Globalization;

@* @page "/Configurator4" *@

@inherits Configurator4Base

@inject IJSRuntime Js

<EditForm Model=@doorConfig>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h3>Configurator4</h3>

    @code {
        //protected bool hideCustDes { get; set; } = false;
        protected static string errMsg = string.Empty;

        private bool openMsgBox = false;
        private string errMsg2 = string.Empty;
        private string msgCaption = "שגיאה";
        private string msgClass = "modal-body redMessage";
        private string titleClass = "modal-title redTitle";
        private bool openYesNo = false;

        protected List<CUSTOMER_Class>? lstCustomers = PrApiCalls.getCustomers(ref errMsg);
        protected List<AGENT_Class>? lstAgents = PrApiCalls.getAgents(ref errMsg);

        //BlazorServerApp1.Pages.Configurator3
        protected bool hideDivDoor = true;

        //public bool MovinwingIsFull = false;
        //public bool ExtdecorIsFull = false;
        //public bool IntdecorIsFull = false;

        public DoorConfig? doorConfig;
        CultureInfo hebrew;
        CultureInfo english;

        Type dyncompType = typeof(Index);
        Dictionary<string, object> pageParams = new Dictionary<string, object>();
        bool showDynComp = false;
        bool showProducts = false;

        protected override async Task OnInitializedAsync()
        {
        doorConfig = new DoorConfig();
        doorConfig.initBorderColors();
        doorConfig.btnClasses["general"] = "buttonActive";

        formDate = DateTime.Now;
        UiLogic.initPropNames(doorConfig);
        UiLogic.AppAllDefaults(doorConfig, ref errMsg);

        //await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);
        pageParams.Add("doorConfig", doorConfig);  //common to all tab pages !
                                                   // dyncompType = typeof(Extdecor);

        hebrew = new CultureInfo("he-IL", false);
        english = new CultureInfo("en-US", false);

        showProducts = false;
        }

        void showTabPage(Type pageType, string tabName)
        {
        errMsg2 = string.Empty;
        if (ActivatePage(tabName, doorConfig, ref errMsg2))
        {
            pageParams["doorConfig"] = doorConfig;
            if (pageParams.ContainsKey("disableLogo") && tabName != "movingwing")
                pageParams.Remove("disableLogo");
            dyncompType = pageType;
            //doorConfig.btnClasses[tabName] = "buttonActive";
            doorConfig.markButton(tabName);
        }
        else
        {
            openMsgBox = true;
        }
        }
    }


    <table id="tblMainContainer">
        <tr>
            <td>
                <div id="divMainMenuButtons" dir="rtl" class="menuButtonsDiv">
                    <table id="tblmenuButtons">
                        <tr>
                            <td>
                                <button name="btnRestart" class="@doorConfig.btnClasses["restart"]"
                                        onclick="@restart">
                                    התחל מחדש
                                </button>
                            </td>
                            @{
                                void restart()
                                {
                                    openYesNo = true;
                                    msgCaption = string.Empty;
                                    errMsg2 = "תחילת שאלון חדש ?";
                                    titleClass = string.Empty;
                                    msgClass = "centeredMsg"; //string.Empty;
                                }
                            }
                        </tr>
                        <tr>
                            <td>
                                <button name="btnGeneral" class="@doorConfig.btnClasses["general"]">פרטים כלליים</button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button name="btnProdDes" class="@doorConfig.btnClasses["proddes"]"
                                        onclick="@showProdButtons">
                                    פרטי המוצר
                                </button>
                            </td>
                            @{
                                void showProdButtons()
                                {
                                    if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                    {
                                        msgCaption = string.Empty;
                                        errMsg2 = string.Format("שדות חובה לא מולאו, על מנת להמשיך נדרש למלא את כל שדות החובה");
                                        // Js.InvokeVoidAsync("alert", errMsg);
                                        msgClass = "modal-body centeredMsg";
                                        openMsgBox = true;
                                        return;
                                    }
                                    showProducts = true;
                                }
                            }
                        </tr>
                        @{
                            bool showTabs = false;
                        }
                        @if (!hideDivDoor)
                        {
                            <tr>
                                <td>
                                    <table id="tblTabButtons">
                                        <tr>
                                            <td>
                                                <button name="btnmovingwing" class="@doorConfig.btnClasses["movingwing"]"
                                                    @onclick=@( () => @showMw())>
                                                    כנף נעה
                                                </button>
                                            </td>
                                            @{
                                                void showMw()
                                                {
                                                    pageParams["disableLogo"] = disableLogo;
                                                    showTabPage(typeof(Movingwing), "movinwing");
                                                    doorConfig.btnClasses["general"] =
                                                    doorConfig.btnClasses["proddes"] = "buttonDisabled";
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            @{
                                                bool disableEd = false;
                                                //disableEd = !ActivatePage("extdecor", doorConfig, ref errMsg2);
                                                // 12/05/2022 : at present btnextdecor is always ENABLED
                                                //[TODO] when leaving Movingwing check whether it is filled.
                                                //  if it's not filled DISABLE btnextdecor
                                            }

                                            <td>
                                                <button name="btnextdecor" class="@doorConfig.btnClasses["extdecor"]" @onclick="showExtdecor"
                                                    disabled="@disableEd">
                                                    פרטי דקורציה חוץ
                                                </button>
                                            </td>
                                            @{
                                                void showExtdecor()
                                                {
                                                    showTabPage(typeof(Extdecor), "extdecor");
                                                }
                                            }

                                        </tr>
                                        <tr>
                                            <td>
                                                <button name="btnintdecor" class="@doorConfig.btnClasses["intdecor"]"
                                                    @onclick="showIntdecor">
                                                    פרטי דקורציה פנים
                                                </button>
                                            </td>
                                            @{
                                                void showIntdecor()
                                                {
                                                    showTabPage(typeof(Intdecor), "intdecor");
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            @{
                                                bool disableSw = false;
                                                disableSw = (doorConfig.WINGSNUM == "כנף");
                                            }
                                            <td>
                                                <button name="btnstaticwing" class="@doorConfig.btnClasses["staticwing"]" disabled="@disableSw"
                                                    @onclick="showStaticwing">
                                                    כנף קבועה
                                                </button>
                                            </td>
                                            @{
                                                void showStaticwing()
                                                {
                                                    showTabPage(typeof(Staticwing), "staticwing");
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            <td>
                                                <button name="btnhinges" class="@doorConfig.btnClasses["hinges"]"
                                                    @onclick="showHinges">
                                                    פרטי צירים
                                                </button>
                                            </td>
                                            @{
                                                void showHinges()
                                                {
                                                    showTabPage(typeof(Hinges), "hinges");
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            <td>
                                                <button name="btnhandle" class="@doorConfig.btnClasses["handle"]"
                                                    @onclick="showHandle">
                                                    ידיות אומנותיות
                                                </button>
                                            </td>
                                            @{
                                                void showHandle()
                                                {
                                                    showTabPage(typeof(Handle), "handle");
                                                }
                                            }
                                        </tr>
                                        <tr>
                                            <td>
                                                <button name="btnaccessories" class="@doorConfig.btnClasses["accessories"]"
                                                    @onclick="showAccessories">
                                                    נילווים
                                                </button>
                                            </td>
                                            @{
                                                void showAccessories()
                                                {
                                                    showTabPage(typeof(Accessories), "accessories");
                                                }
                                            }
                                        </tr>
                                    </table>
                                    <!-- end tblTabButtons -->
                            </td>
                            </tr>
                        }

                    </table>
                    <!-- end tblmenuButtons -->
                </div>
                <!-- end of divMainMenuButtons -->
            </td>
            <td id="tdMainForm">
                <div id="divMainForm" dir="rtl" class="mainFormDiv">
                    <div id="divHeader" dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
                        <table id="tblLine1">
                            <tr>
                                <th>תאריך</th>
                                <th>שם ממלא שאלון</th>
                                <th>אסמכתא</th>
                            </tr>
                            <tr id="trHeaderL1Controls">
                                <td id="tdDate">
                                    <input type="date" name="txtDate" @bind="formDate" />
                                    @code {
        // public DoorConfig? doorConfig; // = new DoorConfig();

        private DateTime _formDate = DateTime.Now;
        protected DateTime formDate
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _formDate = Convert.ToDateTime(doorConfig.FORMDATE);

                                            return _formDate;
                                        }
                                        set
                                        {
                                            _formDate = value;
                                            if (doorConfig == null)
                                            {
                                                doorConfig = new DoorConfig();
                                                doorConfig.initBorderColors();
                                            }
                                            doorConfig.FORMDATE = Helper.formatDate4Rest(_formDate);
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                        }
        }
                                    }
                                </td>
                                <!-- end tdDate-->
                                <td id="tdFormFiller">
                                    <input name="txtFormFiller" @bind="formFiller" dir="rtl" class="@doorConfig.borderColors["FORMFILLER"]"
                                           @onfocus="@( () => formFillerHasFocus() )"
                                           @onblur="@( () => formFillerLostFocus() )" />
                                    @code {
        protected string _formFiller;
        protected string formFiller
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _formFiller = doorConfig.FORMFILLER;

                                            return _formFiller;
                                        }
                                        set
                                        {
                                            _formFiller = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.FORMFILLER = _formFiller;
                                                doorConfig.borderColors["FORMFILLER"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            }
                                        }
        }
        void formFillerHasFocus()
        {
                                        // System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
        }
        void formFillerLostFocus()
        {
                                        //System.Windows.Forms.InputLanguage.CurrentInputLanguage = System.Windows.Forms.InputLanguage.FromCulture(hebrew);
        }
                                    }
                                </td>
                                <!-- end tdFormFiller -->
                                <td id="tdReference">
                                    <input name="txtReference" @bind="reference" @ref="txtReference" />
                                    @code {

        private ElementReference txtReference;
        protected string _reference;
        protected string reference
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                                _reference = doorConfig.REFERENCE;

                                            return _reference;
                                        }
                                        set
                                        {
                                            _reference = value;

                                            if (doorConfig != null)
                                            {
                                                if (!string.IsNullOrEmpty(PrApiCalls.getReference(_reference, ref errMsg)))
                                                {
                                                    msgClass = "modal-body centeredMsg";
                                                    errMsg2 = "אסמכתא עם מספר זה כבר קיימת במערכת";
                                                    openMsgBox = true;
                                                    txtReference.FocusAsync();
                                                }
                                                else
                                                    doorConfig.REFERENCE = _reference;

                                                UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            }
                                        }
        }
                                    }
                                </td>
                                <!-- end tdReference -->
                                <td>
                                    <label id="lblMsgL1" />
                                </td>
                            </tr>
                            <!-- end trHeaderL1Controls -->
                        </table>
                        <!-- end tblLine1 -->

                        <table id="tblLine2">
                            <tr>
                                <th>שם משווק</th>
                                <th>שם לקוח קצה</th>
                                <th>כתובת התקנה</th>
                                <th>כתובת לאספקה</th>
                            </tr>
                            <tr id="trLine2Controls">
                                <td>
                                    @*
                                        <select name="dlstAgent" @bind="AGENT" class="@doorConfig.borderColors["AGENT"]">
                                        @if (lstAgents != null)
                                        {
                                        @foreach (AGENT_Class a in lstAgents)
                                        {
                                        <option value="@a.AGENT">@a.AGENTNAME</option>
                                        }
                                        }
                                        </select>
                                    *@
                                    <select name="dlstCustDes" @bind="AGENT" class="@doorConfig.borderColors["AGENT"]">
                                        @if (lstCustomers != null)
                                        {
                                            @foreach (CUSTOMER_Class c in lstCustomers)
                                            {
                                                <option value="@c.CUST">@c.CUSTDES</option>
                                            }
                                        }
                                    </select>
                                </td>
                                @code {
        private int _AGENT = 0;
        protected int AGENT
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                            _AGENT = doorConfig.AGENT;

                                        return _AGENT;
                                    }
                                    set
                                    {
                                        _AGENT = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.AGENT = _AGENT;
                                            doorConfig.borderColors["AGENT"] = (value != 0 ? string.Empty : "redBorder");
                                            //
                                            CUSTOMER_Class agent = PrApiCalls.getCustomer((int)doorConfig.AGENT, ref errMsg);
                                            ShipAddress = string.Format("{0} {1} {2}", agent.ADDRESS, agent.ADDRESS2, agent.ADDRESS3);
                                            if (!string.IsNullOrEmpty(agent.TRSH_LOGO) && agent.TRSH_LOGO == "Y")
                                            {
                                                disableLogo = true;
                                                doorConfig.LOGO = string.Empty;   //chkbLogo.Checked = false;
                                            }
                                            //
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                        }
                                    }
        }
                                }
                                <td>
                                    <select name="dlstCustDes" @bind="CUST" class="@doorConfig.borderColors["CUST"]">
                                        @if (lstCustomers != null)
                                        {
                                            @foreach (CUSTOMER_Class c in lstCustomers)
                                            {
                                                <option value="@c.CUST">@c.CUSTDES</option>
                                            }
                                        }
                                    </select>
                                </td>
                                @code {
        public bool disableLogo = false;
        private int _CUST = 0;
        protected int CUST
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                            _CUST = doorConfig.CUST;

                                        return _CUST;
                                    }
                                    set
                                    {
                                        _CUST = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.CUST = _CUST;
                                            // set Address and Logo based on CUST
                                            CUSTOMER_Class cust = PrApiCalls.getCustomer((int)doorConfig.CUST, ref errMsg);
                                            //InstallAddress = string.Format("{0} {1} {2}", cust.ADDRESS, cust.ADDRESS2, cust.ADDRESS3); - NOT required field
                                            doorConfig.borderColors["CUST"] = (value != 0 ? string.Empty : "redBorder");
                                            if (!string.IsNullOrEmpty(cust.TRSH_LOGO) && cust.TRSH_LOGO == "Y")
                                            {
                                                disableLogo = true;
                                                doorConfig.LOGO = string.Empty;   //chkbLogo.Checked = false;
                                            }
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                            //
                                        }

                                    }
        }
                                }
                                @* end CUST *@

                                <td>
                                    <input dir="rtl" @bind="InstallAddress" class="@doorConfig.borderColors["INSTALLADDRESS"]" />
                                </td>
                                @code {
        protected string _InstallAddress = string.Empty;
        protected string InstallAddress
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _InstallAddress = doorConfig.INSTALLADDRESS;
                                        }
                                        return _InstallAddress;
                                    }
                                    set
                                    {
                                        _InstallAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.INSTALLADDRESS = _InstallAddress;
                                            //
                                            //doorConfig.borderColors["ADDRESS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                        }
                                    }
        }
                                }
                                @* end Address  *@
                                <td>
                                    <input dir="rtl" @bind="ShipAddress" size="80" class="@doorConfig.borderColors["SHIPADDRESS"]" />
                                </td>
                                @code {
        protected string _ShipAddress = string.Empty;
        protected string ShipAddress
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _ShipAddress = doorConfig.SHIPADDRESS;
                                        }
                                        return _ShipAddress;
                                    }
                                    set
                                    {
                                        _ShipAddress = value;
                                        if (doorConfig != null)
                                        {
                                            doorConfig.SHIPADDRESS = _ShipAddress;
                                            doorConfig.borderColors["SHIPADDRESS"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                            UiLogic.try2UpdateBtnClass(doorConfig, "divHeader", "general", "proddes");
                                        }
                                    }
        }
                                }
                                @* end ShipAddress *@
                            </tr>
                            <!-- end trLine2Controls -->
                        </table>
                        <!-- end tblLine2 -->
                    </div>
                    <!--end of divHeader -->
                    @if (showProducts)
                    {
                        <div id="divProducts" class="div1">
                            <table id="tblProducts">
                                <tr>
                                    <td id="tdBtnDoor">
                                        <button name="btnDoor" @onclick="btnDoorClicked" class="button">דלת</button>
                                        @code
                                        {
        private void btnDoorClicked()
        {
                                        if (!UiLogic.tabPageIsFilled("divHeader", doorConfig))
                                        {
                                            errMsg2 = string.Format("יש למלא את כל השדות בכותרת");
                                            // Js.InvokeVoidAsync("alert", errMsg);
                                            openMsgBox = true;
                                            return;
                                        }
                                        else
                                        {
                                            pageParams["doorConfig"] = doorConfig;
                                            pageParams["disableLogo"] = disableLogo;
                                            dyncompType = typeof(Movingwing);
                                            hideDivDoor = false;
                                            doorConfig.btnClasses["general"] =
                                            doorConfig.btnClasses["proddes"] = "buttonLostFocus";
                                            //doorConfig.btnClasses["movingwing"] = "buttonActive";
                                            doorConfig.markButton("movingwing");
                                        }
        }
                                    }
                                </td>
                                <!-- end tdBtnDoor -->
                                <td>
                                    <button name="btnLintel" class="button">משקוף</button>
                                </td>
                                <td>
                                    <button name="btnCover" class="button">חיפוי</button>
                                </td>
                                <td>
                                    <button name="btnSideUnit" class="button">יחידת צד</button>
                                </td>
                                <td>
                                    <button name="btnECabinet" class="button">ארון חשמל</button>
                                </td>
                                <td>
                                    <button name="btnShelves" class="button">מדפים</button>
                                </td>
                            </tr>
                        </table>
                        <!--end tblProducts -->
                    </div>
                        <!-- end divProducts -->
                    }

                    <div id="divDoor" dir="rtl" hidden="@hideDivDoor">

                        <div id="divDoorTitle" dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
                            <table id="tblDoorTitle">
                                <tr>
                                    <th id="thWingsNum">מיפתח</th>
                                    <th id="thPARTNAME">דגם</th>

                                    @* <th id="thOpenMode">צורת פתיחה</th> *@
                                    
                                    <th id="thDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">עיצוב דקורציה (חוץ,פנים,דו צדדי)</th>
                                    <th id="thComplient">דלת תואם אלידור</th>
                                    <th id="thMeasuresDoc">מצורף נספח מדידה</th>

                                    @* <th id="thFamily">סידרה</th> *@
                                </tr>
                                <tr>
                                    <td>
                                        <select name="dlstWingsNum" @bind="WingsNum">
                                            @* 
                                                <option>בחר סוג מיפתח</option>
                                            <option>כנף</option>
                                            <option>כנף וחצי</option>
                                            <option>דו כנפי</option>
                                            *@
                                            @if (PrApiCalls.lstWingsNum != null)
                                            {
                                                @foreach (WingsNum_Class wn in PrApiCalls.lstWingsNum)
                                                {
                                                    <option value="@wn.TRSH_WINGNUMDES">@wn.TRSH_WINGNUMDES</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    @code
                                    {
        //protected bool disableStaticWing = false;
        protected string _WingsNum = string.Empty;
        protected string WingsNum
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _WingsNum = doorConfig.WINGSNUM;
                                            }
                                            return _WingsNum;
                                        }
                                        set
                                        {
                                            _WingsNum = value;
                                            if (doorConfig != null)
                                                doorConfig.WINGSNUM = _WingsNum;

                                            //disableStaticWing =  (_WingsNum == "כנף");
                                        }
        }

                                    }
                                    @*
                                    <td>
                                        <select name="dlstPARTNAME" @bind="PARTNAME" class="@doorConfig.borderColors["PARTNAME"]">
                                            @if (PrApiCalls.lstParts != null)
                                            {
                                                @foreach (PART_Class p in PrApiCalls.lstParts)
                                                {
                                                    <option value="@p.PARTNAME">@p.PARTDES</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    @code
                                    {
                                        protected string _PARTNAME = string.Empty;
                                        protected string PARTNAME
                                        {
                                            get
                                            {
                                                if (doorConfig != null)
                                                {
                                                    _PARTNAME = doorConfig.PARTNAME;
                                                    if (string.IsNullOrEmpty(_PARTNAME))
                                                        _FAMILYDES = string.Empty;
                                                }
                                                return _PARTNAME;
                                            }
                                            set
                                            {
                                                _PARTNAME = value;
                                                if (doorConfig != null)
                                                {
                                                    doorConfig.PARTNAME = _PARTNAME;
                                                    PART_Class part = PrApiCalls.getPart(doorConfig.PARTNAME, ref errMsg);
                                                    //FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                                    FAMILYDES = part.FAMILYDES;         //familyOfPart.FAMILYDES;
                                                    doorConfig.FAMILYNAME = part.FAMILYNAME;  //[NonSerialized]
                                                                                              //doorConfig.FAMILY = PrApiCalls.getFAMILY(part.FAMILYNAME, ref errMsg);
                                                    doorConfig.meaged = part.MPARTNAME;  //PrApiCalls.getMeagedOfPart(PARTNAME, ref errMsg);
                                                    doorConfig.TRSH_DOOR_HWCATCODE = part.TRSH_DOOR_HWCATCODE;    //PrApiCalls.getDoorHwCatCode(doorConfig.PARTNAME, ref errMsg);
                                                    doorConfig.borderColors["MPARTNAME"] = (!(string.IsNullOrEmpty(value)) ? string.Empty : "redBorder");
                                                    UiLogic.applyPartDefaults(doorConfig);
                                                }
                                            }

                                          }
                                        }
                                    *@
                                    <td>
                                        <select name="dlstModelName" @bind="TRSH_MODELNAME" class="@doorConfig.borderColors["TRSH_MODELNAME"]">
                                            @if (PrApiCalls.lstModels != null)
                                            {
                                                @foreach (Model_Class m in PrApiCalls.lstModels)
                                                {
                                                    <option value="@m.TRSH_MODELNAME">@m.TRSH_MODELDES</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    @code{
                                        protected string _TRSH_MODELNAME = string.Empty;
                                        protected string TRSH_MODELNAME
                                        {
                                            get
                                            {
                                                if (doorConfig != null)
                                                {
                                                    _TRSH_MODELNAME = doorConfig.TRSH_MODELNAME;
                                                }
                                                return _TRSH_MODELNAME;
                                            }
                                            set
                                            {
                                                _TRSH_MODELNAME = value;
                                                if (doorConfig != null)
                                                {
                                                    doorConfig.TRSH_MODELNAME = value;
                                                }
                                            }
                                        }
                                    }


                                    <td id="tdDecorFormat" hidden="@UiLogic.hideFld(doorConfig, "DecorFormat")">
                                        <select name="dlstDecorFormat" @bind="DecorFormat" class="@doorConfig.borderColors["DECORFORMAT"]">
                                            <option></option>
                                            <option>ללא</option>
                                            <option>חוץ</option>
                                            <option>פנים</option>
                                            <option disabled="@UiLogic.disableOption(doorConfig,"dlstDecorFormat","דו צדדי")">דו צדדי</option>
                                            @* see Helper.DecorFormat2Code(...) method *@
                                        </select>
                                    </td>
                                    @code {
        protected string _DecorFormat = string.Empty;
        protected string DecorFormat
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                // UiLogic.applyFldDefault(doorConfig, "dlstDecorFormat");
                                                _DecorFormat = doorConfig.DECORFORMAT;
                                            }
                                            return _DecorFormat;
                                        }
                                        set
                                        {
                                            _DecorFormat = value;
                                            if (doorConfig != null)
                                            {
                                                doorConfig.DECORFORMAT = _DecorFormat;
                                                doorConfig.borderColors["DECORFORMAT"] = (!string.IsNullOrEmpty(value) ? string.Empty : "redBorder");
                                                //UiLogic.clearFollowingTabFields(doorConfig, "movingwing");
                                            }
                                        }
        }
                                    }



                                    <td>
                                        <input type="checkbox" name="chkbComplient" @bind="Complient" />
                                    </td>
                                    @code
                                    {
        protected bool _Complient = false;
        protected bool Complient
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _Complient = (doorConfig.COMPLIENTDOOR == "Y");
                                            }
                                            return _Complient;
                                        }
                                        set
                                        {
                                            _Complient = value;
                                            if (doorConfig != null)
                                                doorConfig.COMPLIENTDOOR = (_Complient ? "Y" : "");
                                        }
        }
                                    }

                                    <td>
                                        <input type="checkbox" name="chkbMeasuresDoc" @bind="MeasuresDoc" />
                                    </td>
                                    @code
                                    {
        protected bool _MeasuresDoc = false;
        protected bool MeasuresDoc
        {
                                        get
                                        {
                                            if (doorConfig != null)
                                            {
                                                _MeasuresDoc = (doorConfig.MEASURESDOC == "Y");
                                            }
                                            return _MeasuresDoc;
                                        }
                                        set
                                        {
                                            _MeasuresDoc = value;
                                            if (doorConfig != null)
                                                doorConfig.MEASURESDOC = (_MeasuresDoc ? "Y" : "");
                                        }
        }
                                    }
                                    @*
                                        At present the position of FAMILY was not specified.

                                        <td>
                                        <input name="txtFAMILY" disabled=@true @bind="FAMILYDES" />
                                        </td>
                                    *@
                                    @code
                                    {
        protected string _FAMILYDES;
        protected string FAMILYDES
        {
                                        get
                                        {
                                            return _FAMILYDES;
                                        }
                                        set
                                        {
                                            _FAMILYDES = value;
                                        }
        }

                                    }

                                </tr>
                            </table>
                            <!-- end tblDoorTitle-->
                        </div>
                        <!-- end divDoorTitle -->



                        <br />
                        <br />
                        <br />
                        @{
                            //Type dyncompType = typeof(Movingwing);
                            //Dictionary<string, object> mwParams = new Dictionary<string, object>();
                            //pageParams.Add("doorConfig", doorConfig);
                            //pageParams.Add("disableLogo", disableLogo);
                            //pageParams["disableLogo"] = disableLogo;
                            //bool showDynComp = false;

                            @*
                                openMsgBox = false;
                                errMsg2 = string.Empty;
                                if (doorConfig.CUST == null || doorConfig.CUST == 0)
                                errMsg2 += "חובה לציין לקוח";
                                if (string.IsNullOrEmpty(doorConfig.PARTNAME))
                                errMsg2 += " חובה לציין דגם , ";
                                if (!string.IsNullOrEmpty(errMsg2))
                                {
                                //Js.InvokeVoidAsync("alert", errMsg);
                                openMsgBox = true;
                                showMw = false;
                                }
                            *@
                            showDynComp = (doorConfig.CUST != 0 && !string.IsNullOrEmpty(doorConfig.PARTNAME));
                        }

                        @if (showDynComp)
                        {
                            <div dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
                                <DynamicComponent Type="@dyncompType" Parameters="@pageParams" />
                            </div>
                        }
                        @*
                            <div id="divTabControl"  >
                            <TabControl doorConfig="doorConfig">
                            <TabPage Text="כנף נעה" TabName="movingwing">
                            <div id="divMovingWing" class="myDiv">
                            <Movingwing doorConfig="@doorConfig" disableLogo="@disableLogo"></Movingwing>
                            </div>
                            </TabPage>
                            <TabPage Text="פרטי דקורציה חוץ" TabName="extdecor">
                            <div id="divExtDecor" class="myDiv">
                            <Extdecor doorConfig="@doorConfig" MovingwingIsFull="@MovinwingIsFull" />
                            </div>
                            </TabPage>
                            <TabPage Text="פרטי דקורציה פנים" TabName="intdecor">
                            <div id="divIntDecor" class="myDiv">
                            <Intdecor doorConfig="@doorConfig" ExtdecorIsFull="@ExtdecorIsFull" />
                            </div>
                            </TabPage>
                            <TabPage Text="כנף קבועה" TabName="staticwing">
                            <div id="divStaticWing" class="myDiv">
                            <Staticwing doorConfig="@doorConfig" />
                            </div>
                            </TabPage>
                            <TabPage Text="פרטי צירים" TabName="hinges">
                            <div id="divHinges" class="myDiv">
                            <Hinges doorConfig="@doorConfig" />
                            </div>
                            </TabPage>
                            <TabPage Text="ידית אומנותית" TabName="handle">
                            <div id="divHandles" class="myDiv">
                            <Handle doorConfig="@doorConfig" />
                            </div>
                            </TabPage>
                            <TabPage Text="נילווים" TabName="accessories">
                            <div id="divAccessories" class="myDiv">
                            <Accessories doorConfig="@doorConfig" />
                            </div>
                            </TabPage>
                            </TabControl>
                            </div>
                            <!-- end divTabControl -->
                        *@
                    </div>
                    <!-- end divDoor -->

                    <div id="divCommentsAndSave" dir="rtl" style="padding-top: 30px;">
                        <table id="tblComments">
                            <tr>
                                <th id="thComments" style="text-align: right">הערות</th>
                            </tr>
                            <tr>
                                <td id="tdComments">
                                    <input name="txtComments" size="120" @bind="Comments" AutoCompleteType="Disabled" />
                                </td>
                                @code
                                {
        protected string _Comments = string.Empty;
        protected string Comments
        {
                                    get
                                    {
                                        if (doorConfig != null)
                                        {
                                            _Comments = doorConfig.COMMENTS;
                                        }
                                        return _Comments;
                                    }
                                    set
                                    {
                                        _Comments = value;
                                        if (doorConfig != null)
                                            doorConfig.COMMENTS = _Comments;
                                    }
        }
                                }
                            </tr>
                        </table>
                        <p />
                        <br />
                        <br />
                        <table id="tblSaveClear">
                            <tr>
                                <td>
                                    <button name="btnSave" @onclick="btnSave_Click">שמירה בפריוריטי</button>
                                </td>
                                @code {
        private void btnSave_Click()
        {
                                    string prevTab = "accessories";
                                    string prevText = "נילווים";
                                    if (!UiLogic.tabPageIsFilled(prevTab, doorConfig))
                                    {
                                        errMsg2 = string.Format("יש למלא את כל השדות בלשונית '{0}'  י", prevText);
                                        // Js.InvokeVoidAsync("alert", errMsg);
                                        openMsgBox = true;
                                        return;
                                    }

                                    doorConfig.FAMILY = PrApiCalls.getFAMILY(doorConfig.FAMILYNAME, ref errMsg);
                                    var response = (PrApiCalls.SendToPriority("TRSH_DOORCONFIG", doorConfig, ref errMsg)).StatusCode;

                                    if (response != System.Net.HttpStatusCode.Created)
                                    {
                                        //myMessageBox.Show(Page, errMsg);
                                        //UiLogic.displayErrMsg(lblMsg, "Api call failed : " + errMsg);
                                        //Js.InvokeVoidAsync("alert", errMsg);
                                        msgCaption = "שגיאה";
                                        errMsg2 = errMsg;
                                        msgClass = "modal-body redMessage";
                                        openMsgBox = true;

                                        myLogger.log.Info("Api call failed : " + errMsg);
                                    }
                                    else
                                    {
                                        string lastREFERENCE = PrApiCalls.getLastREFERENCE(ref errMsg);
                                        errMsg2 = string.Format("השאלון {0} נשמר בהצלחה, השאלון האחרון במערכת הוא {1}   י", doorConfig.REFERENCE, lastREFERENCE);
                                        //Js.InvokeVoidAsync("alert", errMsg2);
                                        msgCaption = "הודעה";
                                        titleClass = "modal-title greenTitle";
                                        msgClass = "modal-body greenMessage";
                                        openMsgBox = true;

                                        //UiLogic.ClearAllControls();
                                        //doorConfig = new DoorConfig();
                                    }
        }
                                }
                                <td>
                                    <button name="btnClear" @onclick="btnClear_Click">ניקוי טופס</button>
                                </td>
                                @code {
        private void btnClear_Click()
        {
                                    showProducts = false;
                                    UiLogic.clearDoorConfig(doorConfig);
                                    this.StateHasChanged();
        }
                                }
                            </tr>
                        </table>
                        <!-- end tblSaveClear -->

                    </div>
                    <!-- end divCommentsAndSave -->
                </div>
                <!-- end divMainForm -->
            </td>
            <!-- end tdMainForm -->
        </tr>
    </table>
    <!-- end tblMainContainer -->
    <div id="divBuildTime">
        <p style="float:left">@buildTime</p>
        @code {
        protected string buildTime = string.Format("Build Date : {0}", Helper.formatDateTime(Helper.getBuildTime()));
        }
    </div>
    <!-- end divBuildTime -->
</EditForm>

@if (openMsgBox)
{
    <MsgBox Caption="@msgCaption"
        Message="@errMsg2"
        OnClose="OnDialogClose"
        MsgTitleCssClass="@titleClass"
        ErrMsgCssClass="@msgClass">
    </MsgBox>
    @code
    {
    private void OnDialogClose()
    {
        openMsgBox = false;
        errMsg2 = string.Empty;
    }
}
}
@if (openYesNo)
{
    <MsgBox Caption="@msgCaption"
        Type="MsgBox.Category.YesNo"
        Message="@errMsg2"
        OnClose="OnCloseYesNo"
        MsgTitleCssClass="@titleClass"
        ErrMsgCssClass="@msgClass">
    </MsgBox>
    @code
    {
    private void OnCloseYesNo(bool isYes)
    {
        if (isYes)
        {
            UiLogic.clearDoorConfig(doorConfig);
            showProducts = false;
        }
        openYesNo = false;
        errMsg2 = string.Empty;
    }
}
}