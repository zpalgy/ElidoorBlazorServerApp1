@inject IJSRuntime Js

<CascadingValue Value="this">
	<div class="btn-group" role="group">
		@foreach (TabPage tabPage in Pages)
		{
			<button type="button"
					class="btn @GetButtonClass(tabPage)"
					@onclick=@( () => ActivatePage(tabPage) )
					disabled="@disableTab(@tabPage.Text, doorConfig.WINGSNUM)">
				@tabPage.Text
			</button>
		}
	</div>
	@ChildContent
</CascadingValue>

@code {
	// Next line is needed so we are able to add <TabPage> components inside
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public DoorConfig doorConfig { get; set; }

	public TabPage ActivePage { get; set; }
	List<TabPage> Pages = new List<TabPage>();

	internal void AddPage(TabPage tabPage)
	{
		Pages.Add(tabPage);
		if (Pages.Count == 1)
			ActivePage = tabPage;
		StateHasChanged();
	}

	string GetButtonClass(TabPage page)
	{
		return page == ActivePage ? "btn-primary" : "btn-secondary";
	}

	void ActivatePage(TabPage page )
	{
		int t = Array.IndexOf(UiLogic.tabNames, page.TabName);
		string prevTab = (t > 0 ? UiLogic.tabNames[t - 1] : string.Empty);
		if (t == 0)
		{
			ActivePage = page;
		}
		else
		{
			if (UiLogic.tabPageIsFilled(prevTab, doorConfig))
				ActivePage = page;
			else
			{
				string prevTabText = UiLogic.tabTexts[t - 1];
				string errMsg = string.Format("יש למלא את כל השדות בלשונית '{0}'  י", prevTabText);
				Js.InvokeVoidAsync("alert", errMsg);
			}
		}
		
	}
	bool disableTab(string tabPageText, string wingsNum)
	{
		return (tabPageText == "כנף קבועה" && wingsNum == "כנף");
	}
}
