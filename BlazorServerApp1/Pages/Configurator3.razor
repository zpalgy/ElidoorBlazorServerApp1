@using BlazorServerApp1.Pages
@using BlazorServerApp1.Data

@page "/Configurator3"
@inherits Configurator3Base

@inject IJSRuntime Js

<style>
    th, td {
        padding: 15px;
        text-align: center;
    }
    .myDiv {
        border: solid; 
        border-color: black; 
        border-radius: 10px;
    }
</style>

<EditForm Model=@doorConfig>
  <DataAnnotationsValidator/>
  <ValidationSummary/>
<h3>Configurator3</h3>

@code {
    //protected bool hideCustDes { get; set; } = false;
    protected static string errMsg = string.Empty;
    protected List<CUSTOMER_Class>? lstCustomers = PrApiCalls.getCustomers(ref errMsg);
    protected List<AGENT_Class>? lstAgents = PrApiCalls.getAgents(ref errMsg);

    int x = 17;
    //BlazorServerApp1.Pages.Configurator3
    protected bool hideDivDoor = true;
    }



<div id="divHeader" dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
    <table id="tblLine1">
        <tr>
            <th>תאריך</th>
            <th>שם ממלא שאלון</th>
            <th>אסמכתא</th>
        </tr>
        <tr>
            <td>
                <input type="date" name="txtDate" @bind="formDate" />
                @code {
                    public DoorConfig? doorConfig; // = new DoorConfig();

                    private DateTime _formDate = DateTime.Now;
                    protected DateTime formDate
                    {
                        get { return _formDate; }
                        set
                        {
                            _formDate = value;
                            if (doorConfig == null)
                                doorConfig = new DoorConfig();
                            doorConfig.FORMDATE = _formDate.ToString("dd/MM/yyyy");
                        }
                    }
                }
            </td>
            <td>
                <input name="txtFormFiller" @bind="formFiller" dir="rtl" />
                @code {
                    protected string _formFiller;
                    protected string formFiller
                    {
                        get { return _formFiller; }
                        set
                        {
                            _formFiller = value;
                            if (doorConfig != null)
                                doorConfig.FORMFILLER = _formFiller;
                        }
                    }
                }
            </td>
            <td>
                <input name="txtReference" @bind="reference" @ref="txtReference" />
                @code {

                    private ElementReference txtReference;
                    protected string _reference;
                    protected string reference
                    {
                        get { return _reference; }
                        set
                        {
                            _reference = value;

                            if (doorConfig != null)
                                if (!string.IsNullOrEmpty(PrApiCalls.getReference(_reference, ref errMsg)))
                                {
                                    //UiLogic.displayErrMsg(lblMsgL1, "אסמכתא עם מספר זה כבר קיימת במערכת");
                                    //
                                    //return;
                                    Js.InvokeVoidAsync("alert", "אסמכתא עם מספר זה כבר קיימת במערכת");
                                    txtReference.FocusAsync();
                                }
                                else
                                    doorConfig.REFERENCE = _reference;
                        }
                    }
                }
            </td>
            <td>
                <label id="lblMsgL1" />
            </td>
        </tr>
    </table>

    @code {
        protected override async Task OnInitializedAsync()
        {
            doorConfig = new DoorConfig();
            formDate = DateTime.Now;
            await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);
        }

        public async Task SaveDoorConfig()
        {
            if (doorConfig != null)
                await ProtectedSessionStore.SetAsync("doorConfig", doorConfig);
        }

        public async Task GetDoorConfig()
        {
            var result = await ProtectedSessionStore.GetAsync<DoorConfig>("doorConfig");
            doorConfig = result.Success ? result.Value : null;
        }

        public async Task DeleteDoorConfigFromSession()
        {
            await ProtectedSessionStore.DeleteAsync("doorConfig");
        }
    }

    <table id="tblLine2">
        <tr>
            <th>שם משווק</th>
            <th>שם לקוח קצה</th>
            <th>כתובת</th>
            <th>כתובת לאספקה</th>
        </tr>
        <tr>
            <td>
                <select name="dlstAgent" @bind="AGENT">
                    @if (lstAgents != null)
                    {
                        @foreach (AGENT_Class a in lstAgents)
                        {
                            <option value="@a.AGENT">@a.AGENTNAME</option>
                        }
                    }
                </select>
            </td>
            @code {
                private int _AGENT = 0;
                protected int AGENT
                {
                    get { return _AGENT; }
                    set
                    {
                        _AGENT = value;
                        if (doorConfig != null)
                            doorConfig.AGENT = _AGENT;
                    }
                }
            }
            <td>
                <select name="dlstCustDes" @bind="CUST">
                    @if (lstCustomers != null)
                    {
                        @foreach (CUSTOMER_Class c in lstCustomers)
                        {
                            <option value="@c.CUST">@c.CUSTDES</option>
                        }
                    }
                </select> />
            </td>
            @code {
                public bool disableLogo = false;
                private string _CUST = string.Empty;
                protected string CUST
                {
                    get { return _CUST; }
                    set
                    {
                        _CUST = value;
                        if (doorConfig != null)
                        {
                            doorConfig.CUST = int.Parse(_CUST);
                            // set Address and Logo based on CUST
                            CUSTOMER_Class cust = PrApiCalls.getCustomer((int)doorConfig.CUST, ref errMsg);
                            Address = string.Format("{0} {1} {2}", cust.ADDRESS, cust.ADDRESS2, cust.ADDRESS3);
                            if (!string.IsNullOrEmpty(cust.TRSH_LOGO) && cust.TRSH_LOGO == "Y")
                            {
                                disableLogo = true;
                                doorConfig.LOGO = string.Empty;   //chkbLogo.Checked = false;
                            }
                            //
                        }

                    }
                }
            }

            <td>
                <input dir="rtl" @bind="Address" />
            </td>
            @code {
                protected string _Address = string.Empty;
                protected string Address
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _Address = doorConfig.ADDRESS;
                        }
                        return _Address;
                    }
                    set
                    {
                        _Address = value;
                        if (doorConfig != null)
                            doorConfig.ADDRESS = _Address;
                    }
                }
            }
            <td>
                <input dir="rtl" @bind="ShipAddress" size="80"/>
            </td>
            @code {
                protected string _ShipAddress = string.Empty;
                protected string ShipAddress
                {
                    get
                    {
                        if (doorConfig != null)
                        {
                            _ShipAddress = doorConfig.SHIPADDRESS;
                        }
                        return _ShipAddress;
                    }
                    set
                    {
                        _ShipAddress = value;
                        if (doorConfig != null)
                            doorConfig.SHIPADDRESS = _ShipAddress;
                    }
                }
            }
        </tr>
    </table>
    <table id="tblProducts">
        <tr>
            <td>
                <button name="btnDoor" @onclick="btnDoorClicked">דלת</button>
                @code
                {
                    private void btnDoorClicked()
                    {
                        hideDivDoor = false;
                    }
                }
            </td>
            <td>
                <button name="btnLintel">משקוף</button>
            </td>
            <td>
                <button name="btnCover">חיפוי</button>
            </td>
            <td>
                <button name="btnSideUnit">יחידת צד</button>
            </td>
            <td>
                <button name="btnECabinet">ארון חשמל</button>
            </td>
            <td>
                <button name="btnShelves">מדפים</button>
            </td>
        </tr>
    </table>
</div>
<!--end of divHeader -->

<div id="divDoor" dir="rtl" hidden="@hideDivDoor">

    <div id="divDoorTitle" dir="rtl" style="border: solid; border-color: black; border-radius: 10px">
        <table id="tblDoorTitle">
            <tr>
                <th id="thWingsNum">מיפתח</th>
                <th id="thOpenMode">צורת פתיחה</th>
                <th id="thComplient">דלת תואם אלידור</th>
                <th id="thPARTNAME">דגם</th>
                <th id="thFamily">סידרה</th>
            </tr>
            <tr>
                <td>
                    <select name="dlstWingsNum" @bind="WingsNum">
                        <option>בחר סוג מיפתח</option>
                        <option>כנף</option>
                        <option>כנף וחצי</option>
                        <option>דו כנפי</option>
                    </select>
                </td>
                @code
                {
                    //protected bool disableStaticWing = false;
                    protected string _WingsNum = string.Empty;
                    protected string WingsNum
                    {
                        get
                        {
                            if (doorConfig != null)
                            {
                                _WingsNum = doorConfig.WINGSNUM;
                            }
                            return _WingsNum;
                        }
                        set
                        {
                            _WingsNum = value;
                            if (doorConfig != null)
                                doorConfig.WINGSNUM = _WingsNum;

                            //disableStaticWing =  (_WingsNum == "כנף");
                        }
                    }

                }
                <td>
                    <select name="dlstOpenMode">
                        <option>בחר צורת פתיחה</option>
                        <option>החוצה</option>
                        <option>פנימה</option>
                    </select>
                </td>

                <td>
                    <input type="checkbox" name="chkbComplient" />
                </td>
                <td>
                    <select name="dlstPARTNAME" @bind="PARTNAME">
                        @if (PrApiCalls.lstParts != null)
                        {
                            @foreach (PART_Class p in PrApiCalls.lstParts)
                            {
                                <option value="@p.PARTNAME">@p.PARTDES</option>
                            }
                        }
                    </select>
                </td>
                @code
                {
                    protected string _PARTNAME = string.Empty;
                    protected string PARTNAME
                    {
                        get
                        {
                            if (doorConfig != null)
                            {
                                _PARTNAME = doorConfig.PARTNAME;
                            }
                            return _PARTNAME;
                        }
                        set
                        {
                            _PARTNAME = value;
                            if (doorConfig != null)
                            {
                                doorConfig.PARTNAME = _PARTNAME;
                                FamilyOfPart_Class familyOfPart = PrApiCalls.getFamilyOfPart(doorConfig.PARTNAME, ref errMsg);
                                FAMILYDES = familyOfPart.FAMILYDES;
                                doorConfig.FAMILY = PrApiCalls.getFAMILY(familyOfPart.FAMILYNAME, ref errMsg);
                            }
                        }

                    }
                }
                <td>
                    <input name="txtFAMILY" disabled=@true @bind="FAMILYDES" />
                </td>
                @code
                {
                    protected string _FAMILYDES;
                    protected string FAMILYDES
                    {
                        get
                        {
                            return _FAMILYDES;
                        }
                        set
                        {
                            _FAMILYDES = value;
                        }
                    }

                }
            </tr>
        </table>
    </div>
    <!-- end divDoorTitle -->


    <br />
    <br />
    <br />

    @code {
        // tab control here -
        // tab content pages in separate *.razor files
        // ref: https://blazor-university.com/templating-components-with-renderfragements/creating-a-tabcontrol/
    }

 <div id="divTabControl" >
    <TabControl doorConfig="doorConfig">
        <TabPage Text="כנף נעה">
            <div id="divMovingWing" class="myDiv">
            <Movingwing doorConfig="@doorConfig" disableLogo="@disableLogo"></Movingwing>
            </div>
        </TabPage>
        <TabPage Text="פרטי דקורציה חוץ">
            <div id="divExtDecor" class="myDiv">
            <Counter />
            </div>
        </TabPage>
        <TabPage Text="פרטי דקורציה פנים">
            <div id="divIntDecor" class="myDiv">
            <h1>The third tab</h1>
            </div>
        </TabPage>
        <TabPage Text="כנף קבועה">
            <div id="divStaticWing" class="myDiv">
            <Counter />
            </div>
        </TabPage>
        <TabPage Text="פרטי צירים">
            <div id="divHinges" class="myDiv">
            <Counter />
            </div>
        </TabPage>
        <TabPage Text="ידית אומנותית">
            <div id="divHandles" class="myDiv">
            <Counter />
            </div>
        </TabPage>
        <TabPage Text="נילווים">
            <div id="divAccessories" class="myDiv">
            <Counter />
            </div>
        </TabPage>
    </TabControl>
    </div>
    <!-- end divTabControl -->

</div>
<!-- end divDoor -->
<div id="divCommentsAndSave" dir="rtl" style="padding-top: 30px;">
                                <table id="tblComments">
                                    <tr>
                                        <th id="thComments" style="text-align: right">הערות</th>
                                    </tr>
                                    <tr>
                                        <td>
                                            <input name="txtComments" size="120" AutoCompleteType="Disabled" />
                                        </td>
                                    </tr>
                                </table>
                                <p />
                                <br />
                                <br />
                                <table>
                                    <tr>
                                        <td>
                                            <button name="btnSave"  @onclick="btnSave_Click" >שמירה בפריוריטי</button>
                                        </td>
                                        @code {
                                            private void btnSave_Click()
                                            {}
                                        }
                                        <td>
                                            <button name="btnClear"  @onclick="btnClear_Click">ניקוי טופס</button>
                                        </td>
                                         @code {
                                            private void btnClear_Click()
                                            {}
                                        }
                                    </tr>
                                </table>
                            </div>
                            <!-- end divCommentsAndSave -->
                            <asp:Label ID="lblBuildDate" runat="server" dir="ltr" Width="600px" />
</EditForm>